// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AccountTransaction is an object representing the database table.
type AccountTransaction struct {
	ID             int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	AccountID      string `boil:"account_id" json:"account_id" toml:"account_id" yaml:"account_id"`
	Amount         int64  `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	TXType         string `boil:"tx_type" json:"tx_type" toml:"tx_type" yaml:"tx_type"`
	OpeningBalance int64  `boil:"opening_balance" json:"opening_balance" toml:"opening_balance" yaml:"opening_balance"`
	ClosingBalance int64  `boil:"closing_balance" json:"closing_balance" toml:"closing_balance" yaml:"closing_balance"`
	Date           int64  `boil:"date" json:"date" toml:"date" yaml:"date"`
	Description    string `boil:"description" json:"description" toml:"description" yaml:"description"`

	R *accountTransactionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L accountTransactionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AccountTransactionColumns = struct {
	ID             string
	AccountID      string
	Amount         string
	TXType         string
	OpeningBalance string
	ClosingBalance string
	Date           string
	Description    string
}{
	ID:             "id",
	AccountID:      "account_id",
	Amount:         "amount",
	TXType:         "tx_type",
	OpeningBalance: "opening_balance",
	ClosingBalance: "closing_balance",
	Date:           "date",
	Description:    "description",
}

var AccountTransactionTableColumns = struct {
	ID             string
	AccountID      string
	Amount         string
	TXType         string
	OpeningBalance string
	ClosingBalance string
	Date           string
	Description    string
}{
	ID:             "account_transaction.id",
	AccountID:      "account_transaction.account_id",
	Amount:         "account_transaction.amount",
	TXType:         "account_transaction.tx_type",
	OpeningBalance: "account_transaction.opening_balance",
	ClosingBalance: "account_transaction.closing_balance",
	Date:           "account_transaction.date",
	Description:    "account_transaction.description",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var AccountTransactionWhere = struct {
	ID             whereHelperint
	AccountID      whereHelperstring
	Amount         whereHelperint64
	TXType         whereHelperstring
	OpeningBalance whereHelperint64
	ClosingBalance whereHelperint64
	Date           whereHelperint64
	Description    whereHelperstring
}{
	ID:             whereHelperint{field: "\"account_transaction\".\"id\""},
	AccountID:      whereHelperstring{field: "\"account_transaction\".\"account_id\""},
	Amount:         whereHelperint64{field: "\"account_transaction\".\"amount\""},
	TXType:         whereHelperstring{field: "\"account_transaction\".\"tx_type\""},
	OpeningBalance: whereHelperint64{field: "\"account_transaction\".\"opening_balance\""},
	ClosingBalance: whereHelperint64{field: "\"account_transaction\".\"closing_balance\""},
	Date:           whereHelperint64{field: "\"account_transaction\".\"date\""},
	Description:    whereHelperstring{field: "\"account_transaction\".\"description\""},
}

// AccountTransactionRels is where relationship names are stored.
var AccountTransactionRels = struct {
	Account string
}{
	Account: "Account",
}

// accountTransactionR is where relationships are stored.
type accountTransactionR struct {
	Account *Account `boil:"Account" json:"Account" toml:"Account" yaml:"Account"`
}

// NewStruct creates a new relationship struct
func (*accountTransactionR) NewStruct() *accountTransactionR {
	return &accountTransactionR{}
}

// accountTransactionL is where Load methods for each relationship are stored.
type accountTransactionL struct{}

var (
	accountTransactionAllColumns            = []string{"id", "account_id", "amount", "tx_type", "opening_balance", "closing_balance", "date", "description"}
	accountTransactionColumnsWithoutDefault = []string{"account_id", "amount", "tx_type", "opening_balance", "closing_balance", "date", "description"}
	accountTransactionColumnsWithDefault    = []string{"id"}
	accountTransactionPrimaryKeyColumns     = []string{"id"}
)

type (
	// AccountTransactionSlice is an alias for a slice of pointers to AccountTransaction.
	// This should almost always be used instead of []AccountTransaction.
	AccountTransactionSlice []*AccountTransaction

	accountTransactionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	accountTransactionType                 = reflect.TypeOf(&AccountTransaction{})
	accountTransactionMapping              = queries.MakeStructMapping(accountTransactionType)
	accountTransactionPrimaryKeyMapping, _ = queries.BindMapping(accountTransactionType, accountTransactionMapping, accountTransactionPrimaryKeyColumns)
	accountTransactionInsertCacheMut       sync.RWMutex
	accountTransactionInsertCache          = make(map[string]insertCache)
	accountTransactionUpdateCacheMut       sync.RWMutex
	accountTransactionUpdateCache          = make(map[string]updateCache)
	accountTransactionUpsertCacheMut       sync.RWMutex
	accountTransactionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single accountTransaction record from the query.
func (q accountTransactionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AccountTransaction, error) {
	o := &AccountTransaction{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for account_transaction")
	}

	return o, nil
}

// All returns all AccountTransaction records from the query.
func (q accountTransactionQuery) All(ctx context.Context, exec boil.ContextExecutor) (AccountTransactionSlice, error) {
	var o []*AccountTransaction

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AccountTransaction slice")
	}

	return o, nil
}

// Count returns the count of all AccountTransaction records in the query.
func (q accountTransactionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count account_transaction rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q accountTransactionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if account_transaction exists")
	}

	return count > 0, nil
}

// Account pointed to by the foreign key.
func (o *AccountTransaction) Account(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AccountID),
	}

	queryMods = append(queryMods, mods...)

	query := Accounts(queryMods...)
	queries.SetFrom(query.Query, "\"account\"")

	return query
}

// LoadAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (accountTransactionL) LoadAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAccountTransaction interface{}, mods queries.Applicator) error {
	var slice []*AccountTransaction
	var object *AccountTransaction

	if singular {
		object = maybeAccountTransaction.(*AccountTransaction)
	} else {
		slice = *maybeAccountTransaction.(*[]*AccountTransaction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &accountTransactionR{}
		}
		args = append(args, object.AccountID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &accountTransactionR{}
			}

			for _, a := range args {
				if a == obj.AccountID {
					continue Outer
				}
			}

			args = append(args, obj.AccountID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`account`),
		qm.WhereIn(`account.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for account")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Account = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.AccountTransactions = append(foreign.R.AccountTransactions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AccountID == foreign.ID {
				local.R.Account = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.AccountTransactions = append(foreign.R.AccountTransactions, local)
				break
			}
		}
	}

	return nil
}

// SetAccount of the accountTransaction to the related item.
// Sets o.R.Account to related.
// Adds o to related.R.AccountTransactions.
func (o *AccountTransaction) SetAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"account_transaction\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"account_id"}),
		strmangle.WhereClause("\"", "\"", 2, accountTransactionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AccountID = related.ID
	if o.R == nil {
		o.R = &accountTransactionR{
			Account: related,
		}
	} else {
		o.R.Account = related
	}

	if related.R == nil {
		related.R = &accountR{
			AccountTransactions: AccountTransactionSlice{o},
		}
	} else {
		related.R.AccountTransactions = append(related.R.AccountTransactions, o)
	}

	return nil
}

// AccountTransactions retrieves all the records using an executor.
func AccountTransactions(mods ...qm.QueryMod) accountTransactionQuery {
	mods = append(mods, qm.From("\"account_transaction\""))
	return accountTransactionQuery{NewQuery(mods...)}
}

// FindAccountTransaction retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAccountTransaction(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*AccountTransaction, error) {
	accountTransactionObj := &AccountTransaction{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"account_transaction\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, accountTransactionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from account_transaction")
	}

	return accountTransactionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AccountTransaction) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no account_transaction provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(accountTransactionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	accountTransactionInsertCacheMut.RLock()
	cache, cached := accountTransactionInsertCache[key]
	accountTransactionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			accountTransactionAllColumns,
			accountTransactionColumnsWithDefault,
			accountTransactionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(accountTransactionType, accountTransactionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(accountTransactionType, accountTransactionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"account_transaction\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"account_transaction\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into account_transaction")
	}

	if !cached {
		accountTransactionInsertCacheMut.Lock()
		accountTransactionInsertCache[key] = cache
		accountTransactionInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the AccountTransaction.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AccountTransaction) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	accountTransactionUpdateCacheMut.RLock()
	cache, cached := accountTransactionUpdateCache[key]
	accountTransactionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			accountTransactionAllColumns,
			accountTransactionPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update account_transaction, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"account_transaction\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, accountTransactionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(accountTransactionType, accountTransactionMapping, append(wl, accountTransactionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update account_transaction row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for account_transaction")
	}

	if !cached {
		accountTransactionUpdateCacheMut.Lock()
		accountTransactionUpdateCache[key] = cache
		accountTransactionUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q accountTransactionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for account_transaction")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for account_transaction")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AccountTransactionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accountTransactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"account_transaction\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, accountTransactionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in accountTransaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all accountTransaction")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AccountTransaction) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no account_transaction provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(accountTransactionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	accountTransactionUpsertCacheMut.RLock()
	cache, cached := accountTransactionUpsertCache[key]
	accountTransactionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			accountTransactionAllColumns,
			accountTransactionColumnsWithDefault,
			accountTransactionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			accountTransactionAllColumns,
			accountTransactionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert account_transaction, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(accountTransactionPrimaryKeyColumns))
			copy(conflict, accountTransactionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"account_transaction\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(accountTransactionType, accountTransactionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(accountTransactionType, accountTransactionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert account_transaction")
	}

	if !cached {
		accountTransactionUpsertCacheMut.Lock()
		accountTransactionUpsertCache[key] = cache
		accountTransactionUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single AccountTransaction record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AccountTransaction) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AccountTransaction provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), accountTransactionPrimaryKeyMapping)
	sql := "DELETE FROM \"account_transaction\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from account_transaction")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for account_transaction")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q accountTransactionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no accountTransactionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from account_transaction")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for account_transaction")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AccountTransactionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accountTransactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"account_transaction\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, accountTransactionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from accountTransaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for account_transaction")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AccountTransaction) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAccountTransaction(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AccountTransactionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AccountTransactionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accountTransactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"account_transaction\".* FROM \"account_transaction\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, accountTransactionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AccountTransactionSlice")
	}

	*o = slice

	return nil
}

// AccountTransactionExists checks if the AccountTransaction row exists.
func AccountTransactionExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"account_transaction\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if account_transaction exists")
	}

	return exists, nil
}
