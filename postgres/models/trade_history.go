// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TradeHistory is an object representing the database table.
type TradeHistory struct {
	ID            string `boil:"id" json:"id" toml:"id" yaml:"id"`
	AccountID     string `boil:"account_id" json:"account_id" toml:"account_id" yaml:"account_id"`
	BaseCurrency  string `boil:"base_currency" json:"base_currency" toml:"base_currency" yaml:"base_currency"`
	QouteCurrency string `boil:"qoute_currency" json:"qoute_currency" toml:"qoute_currency" yaml:"qoute_currency"`
	BaseAmount    int64  `boil:"base_amount" json:"base_amount" toml:"base_amount" yaml:"base_amount"`
	QouteAmount   int64  `boil:"qoute_amount" json:"qoute_amount" toml:"qoute_amount" yaml:"qoute_amount"`
	Date          int64  `boil:"date" json:"date" toml:"date" yaml:"date"`

	R *tradeHistoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tradeHistoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TradeHistoryColumns = struct {
	ID            string
	AccountID     string
	BaseCurrency  string
	QouteCurrency string
	BaseAmount    string
	QouteAmount   string
	Date          string
}{
	ID:            "id",
	AccountID:     "account_id",
	BaseCurrency:  "base_currency",
	QouteCurrency: "qoute_currency",
	BaseAmount:    "base_amount",
	QouteAmount:   "qoute_amount",
	Date:          "date",
}

var TradeHistoryTableColumns = struct {
	ID            string
	AccountID     string
	BaseCurrency  string
	QouteCurrency string
	BaseAmount    string
	QouteAmount   string
	Date          string
}{
	ID:            "trade_history.id",
	AccountID:     "trade_history.account_id",
	BaseCurrency:  "trade_history.base_currency",
	QouteCurrency: "trade_history.qoute_currency",
	BaseAmount:    "trade_history.base_amount",
	QouteAmount:   "trade_history.qoute_amount",
	Date:          "trade_history.date",
}

// Generated where

var TradeHistoryWhere = struct {
	ID            whereHelperstring
	AccountID     whereHelperstring
	BaseCurrency  whereHelperstring
	QouteCurrency whereHelperstring
	BaseAmount    whereHelperint64
	QouteAmount   whereHelperint64
	Date          whereHelperint64
}{
	ID:            whereHelperstring{field: "\"trade_history\".\"id\""},
	AccountID:     whereHelperstring{field: "\"trade_history\".\"account_id\""},
	BaseCurrency:  whereHelperstring{field: "\"trade_history\".\"base_currency\""},
	QouteCurrency: whereHelperstring{field: "\"trade_history\".\"qoute_currency\""},
	BaseAmount:    whereHelperint64{field: "\"trade_history\".\"base_amount\""},
	QouteAmount:   whereHelperint64{field: "\"trade_history\".\"qoute_amount\""},
	Date:          whereHelperint64{field: "\"trade_history\".\"date\""},
}

// TradeHistoryRels is where relationship names are stored.
var TradeHistoryRels = struct {
}{}

// tradeHistoryR is where relationships are stored.
type tradeHistoryR struct {
}

// NewStruct creates a new relationship struct
func (*tradeHistoryR) NewStruct() *tradeHistoryR {
	return &tradeHistoryR{}
}

// tradeHistoryL is where Load methods for each relationship are stored.
type tradeHistoryL struct{}

var (
	tradeHistoryAllColumns            = []string{"id", "account_id", "base_currency", "qoute_currency", "base_amount", "qoute_amount", "date"}
	tradeHistoryColumnsWithoutDefault = []string{"account_id", "base_currency", "qoute_currency", "base_amount", "qoute_amount", "date"}
	tradeHistoryColumnsWithDefault    = []string{"id"}
	tradeHistoryPrimaryKeyColumns     = []string{"id"}
)

type (
	// TradeHistorySlice is an alias for a slice of pointers to TradeHistory.
	// This should almost always be used instead of []TradeHistory.
	TradeHistorySlice []*TradeHistory

	tradeHistoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tradeHistoryType                 = reflect.TypeOf(&TradeHistory{})
	tradeHistoryMapping              = queries.MakeStructMapping(tradeHistoryType)
	tradeHistoryPrimaryKeyMapping, _ = queries.BindMapping(tradeHistoryType, tradeHistoryMapping, tradeHistoryPrimaryKeyColumns)
	tradeHistoryInsertCacheMut       sync.RWMutex
	tradeHistoryInsertCache          = make(map[string]insertCache)
	tradeHistoryUpdateCacheMut       sync.RWMutex
	tradeHistoryUpdateCache          = make(map[string]updateCache)
	tradeHistoryUpsertCacheMut       sync.RWMutex
	tradeHistoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single tradeHistory record from the query.
func (q tradeHistoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TradeHistory, error) {
	o := &TradeHistory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for trade_history")
	}

	return o, nil
}

// All returns all TradeHistory records from the query.
func (q tradeHistoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (TradeHistorySlice, error) {
	var o []*TradeHistory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TradeHistory slice")
	}

	return o, nil
}

// Count returns the count of all TradeHistory records in the query.
func (q tradeHistoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count trade_history rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tradeHistoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if trade_history exists")
	}

	return count > 0, nil
}

// TradeHistories retrieves all the records using an executor.
func TradeHistories(mods ...qm.QueryMod) tradeHistoryQuery {
	mods = append(mods, qm.From("\"trade_history\""))
	return tradeHistoryQuery{NewQuery(mods...)}
}

// FindTradeHistory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTradeHistory(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*TradeHistory, error) {
	tradeHistoryObj := &TradeHistory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"trade_history\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, tradeHistoryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from trade_history")
	}

	return tradeHistoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TradeHistory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no trade_history provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(tradeHistoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tradeHistoryInsertCacheMut.RLock()
	cache, cached := tradeHistoryInsertCache[key]
	tradeHistoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tradeHistoryAllColumns,
			tradeHistoryColumnsWithDefault,
			tradeHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tradeHistoryType, tradeHistoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tradeHistoryType, tradeHistoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"trade_history\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"trade_history\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into trade_history")
	}

	if !cached {
		tradeHistoryInsertCacheMut.Lock()
		tradeHistoryInsertCache[key] = cache
		tradeHistoryInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the TradeHistory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TradeHistory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	tradeHistoryUpdateCacheMut.RLock()
	cache, cached := tradeHistoryUpdateCache[key]
	tradeHistoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tradeHistoryAllColumns,
			tradeHistoryPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update trade_history, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"trade_history\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, tradeHistoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tradeHistoryType, tradeHistoryMapping, append(wl, tradeHistoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update trade_history row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for trade_history")
	}

	if !cached {
		tradeHistoryUpdateCacheMut.Lock()
		tradeHistoryUpdateCache[key] = cache
		tradeHistoryUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q tradeHistoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for trade_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for trade_history")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TradeHistorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tradeHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"trade_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, tradeHistoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in tradeHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all tradeHistory")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TradeHistory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no trade_history provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(tradeHistoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tradeHistoryUpsertCacheMut.RLock()
	cache, cached := tradeHistoryUpsertCache[key]
	tradeHistoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tradeHistoryAllColumns,
			tradeHistoryColumnsWithDefault,
			tradeHistoryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			tradeHistoryAllColumns,
			tradeHistoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert trade_history, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(tradeHistoryPrimaryKeyColumns))
			copy(conflict, tradeHistoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"trade_history\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(tradeHistoryType, tradeHistoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tradeHistoryType, tradeHistoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert trade_history")
	}

	if !cached {
		tradeHistoryUpsertCacheMut.Lock()
		tradeHistoryUpsertCache[key] = cache
		tradeHistoryUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single TradeHistory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TradeHistory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TradeHistory provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tradeHistoryPrimaryKeyMapping)
	sql := "DELETE FROM \"trade_history\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from trade_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for trade_history")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tradeHistoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no tradeHistoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from trade_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for trade_history")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TradeHistorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tradeHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"trade_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tradeHistoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tradeHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for trade_history")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TradeHistory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTradeHistory(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TradeHistorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TradeHistorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tradeHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"trade_history\".* FROM \"trade_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tradeHistoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TradeHistorySlice")
	}

	*o = slice

	return nil
}

// TradeHistoryExists checks if the TradeHistory row exists.
func TradeHistoryExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"trade_history\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if trade_history exists")
	}

	return exists, nil
}
