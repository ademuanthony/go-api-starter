// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Agent is an object representing the database table.
type Agent struct {
	ID                 int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	SlackUsername      string `boil:"slack_username" json:"slack_username" toml:"slack_username" yaml:"slack_username"`
	Name               string `boil:"name" json:"name" toml:"name" yaml:"name"`
	Balance            int64  `boil:"balance" json:"balance" toml:"balance" yaml:"balance"`
	Status             int    `boil:"status" json:"status" toml:"status" yaml:"status"`
	AccountNumber      string `boil:"account_number" json:"account_number" toml:"account_number" yaml:"account_number"`
	AccountName        string `boil:"account_name" json:"account_name" toml:"account_name" yaml:"account_name"`
	BankName           string `boil:"bank_name" json:"bank_name" toml:"bank_name" yaml:"bank_name"`
	StableNairaBalance int64  `boil:"stable_naira_balance" json:"stable_naira_balance" toml:"stable_naira_balance" yaml:"stable_naira_balance"`

	R *agentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L agentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AgentColumns = struct {
	ID                 string
	SlackUsername      string
	Name               string
	Balance            string
	Status             string
	AccountNumber      string
	AccountName        string
	BankName           string
	StableNairaBalance string
}{
	ID:                 "id",
	SlackUsername:      "slack_username",
	Name:               "name",
	Balance:            "balance",
	Status:             "status",
	AccountNumber:      "account_number",
	AccountName:        "account_name",
	BankName:           "bank_name",
	StableNairaBalance: "stable_naira_balance",
}

var AgentTableColumns = struct {
	ID                 string
	SlackUsername      string
	Name               string
	Balance            string
	Status             string
	AccountNumber      string
	AccountName        string
	BankName           string
	StableNairaBalance string
}{
	ID:                 "agent.id",
	SlackUsername:      "agent.slack_username",
	Name:               "agent.name",
	Balance:            "agent.balance",
	Status:             "agent.status",
	AccountNumber:      "agent.account_number",
	AccountName:        "agent.account_name",
	BankName:           "agent.bank_name",
	StableNairaBalance: "agent.stable_naira_balance",
}

// Generated where

var AgentWhere = struct {
	ID                 whereHelperint
	SlackUsername      whereHelperstring
	Name               whereHelperstring
	Balance            whereHelperint64
	Status             whereHelperint
	AccountNumber      whereHelperstring
	AccountName        whereHelperstring
	BankName           whereHelperstring
	StableNairaBalance whereHelperint64
}{
	ID:                 whereHelperint{field: "\"agent\".\"id\""},
	SlackUsername:      whereHelperstring{field: "\"agent\".\"slack_username\""},
	Name:               whereHelperstring{field: "\"agent\".\"name\""},
	Balance:            whereHelperint64{field: "\"agent\".\"balance\""},
	Status:             whereHelperint{field: "\"agent\".\"status\""},
	AccountNumber:      whereHelperstring{field: "\"agent\".\"account_number\""},
	AccountName:        whereHelperstring{field: "\"agent\".\"account_name\""},
	BankName:           whereHelperstring{field: "\"agent\".\"bank_name\""},
	StableNairaBalance: whereHelperint64{field: "\"agent\".\"stable_naira_balance\""},
}

// AgentRels is where relationship names are stored.
var AgentRels = struct {
	StableNairaTransactions           string
	StableNairaTransactionAssignments string
	TransactionAssignments            string
}{
	StableNairaTransactions:           "StableNairaTransactions",
	StableNairaTransactionAssignments: "StableNairaTransactionAssignments",
	TransactionAssignments:            "TransactionAssignments",
}

// agentR is where relationships are stored.
type agentR struct {
	StableNairaTransactions           StableNairaTransactionSlice           `boil:"StableNairaTransactions" json:"StableNairaTransactions" toml:"StableNairaTransactions" yaml:"StableNairaTransactions"`
	StableNairaTransactionAssignments StableNairaTransactionAssignmentSlice `boil:"StableNairaTransactionAssignments" json:"StableNairaTransactionAssignments" toml:"StableNairaTransactionAssignments" yaml:"StableNairaTransactionAssignments"`
	TransactionAssignments            TransactionAssignmentSlice            `boil:"TransactionAssignments" json:"TransactionAssignments" toml:"TransactionAssignments" yaml:"TransactionAssignments"`
}

// NewStruct creates a new relationship struct
func (*agentR) NewStruct() *agentR {
	return &agentR{}
}

// agentL is where Load methods for each relationship are stored.
type agentL struct{}

var (
	agentAllColumns            = []string{"id", "slack_username", "name", "balance", "status", "account_number", "account_name", "bank_name", "stable_naira_balance"}
	agentColumnsWithoutDefault = []string{"slack_username", "name", "balance", "status"}
	agentColumnsWithDefault    = []string{"id", "account_number", "account_name", "bank_name", "stable_naira_balance"}
	agentPrimaryKeyColumns     = []string{"id"}
)

type (
	// AgentSlice is an alias for a slice of pointers to Agent.
	// This should almost always be used instead of []Agent.
	AgentSlice []*Agent

	agentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	agentType                 = reflect.TypeOf(&Agent{})
	agentMapping              = queries.MakeStructMapping(agentType)
	agentPrimaryKeyMapping, _ = queries.BindMapping(agentType, agentMapping, agentPrimaryKeyColumns)
	agentInsertCacheMut       sync.RWMutex
	agentInsertCache          = make(map[string]insertCache)
	agentUpdateCacheMut       sync.RWMutex
	agentUpdateCache          = make(map[string]updateCache)
	agentUpsertCacheMut       sync.RWMutex
	agentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single agent record from the query.
func (q agentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Agent, error) {
	o := &Agent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for agent")
	}

	return o, nil
}

// All returns all Agent records from the query.
func (q agentQuery) All(ctx context.Context, exec boil.ContextExecutor) (AgentSlice, error) {
	var o []*Agent

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Agent slice")
	}

	return o, nil
}

// Count returns the count of all Agent records in the query.
func (q agentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count agent rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q agentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if agent exists")
	}

	return count > 0, nil
}

// StableNairaTransactions retrieves all the stable_naira_transaction's StableNairaTransactions with an executor.
func (o *Agent) StableNairaTransactions(mods ...qm.QueryMod) stableNairaTransactionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"stable_naira_transaction\".\"agent_id\"=?", o.ID),
	)

	query := StableNairaTransactions(queryMods...)
	queries.SetFrom(query.Query, "\"stable_naira_transaction\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"stable_naira_transaction\".*"})
	}

	return query
}

// StableNairaTransactionAssignments retrieves all the stable_naira_transaction_assignment's StableNairaTransactionAssignments with an executor.
func (o *Agent) StableNairaTransactionAssignments(mods ...qm.QueryMod) stableNairaTransactionAssignmentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"stable_naira_transaction_assignment\".\"agent_id\"=?", o.ID),
	)

	query := StableNairaTransactionAssignments(queryMods...)
	queries.SetFrom(query.Query, "\"stable_naira_transaction_assignment\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"stable_naira_transaction_assignment\".*"})
	}

	return query
}

// TransactionAssignments retrieves all the transaction_assignment's TransactionAssignments with an executor.
func (o *Agent) TransactionAssignments(mods ...qm.QueryMod) transactionAssignmentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"transaction_assignment\".\"agent_id\"=?", o.ID),
	)

	query := TransactionAssignments(queryMods...)
	queries.SetFrom(query.Query, "\"transaction_assignment\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"transaction_assignment\".*"})
	}

	return query
}

// LoadStableNairaTransactions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (agentL) LoadStableNairaTransactions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAgent interface{}, mods queries.Applicator) error {
	var slice []*Agent
	var object *Agent

	if singular {
		object = maybeAgent.(*Agent)
	} else {
		slice = *maybeAgent.(*[]*Agent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &agentR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &agentR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`stable_naira_transaction`),
		qm.WhereIn(`stable_naira_transaction.agent_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load stable_naira_transaction")
	}

	var resultSlice []*StableNairaTransaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice stable_naira_transaction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on stable_naira_transaction")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for stable_naira_transaction")
	}

	if singular {
		object.R.StableNairaTransactions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &stableNairaTransactionR{}
			}
			foreign.R.Agent = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.AgentID {
				local.R.StableNairaTransactions = append(local.R.StableNairaTransactions, foreign)
				if foreign.R == nil {
					foreign.R = &stableNairaTransactionR{}
				}
				foreign.R.Agent = local
				break
			}
		}
	}

	return nil
}

// LoadStableNairaTransactionAssignments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (agentL) LoadStableNairaTransactionAssignments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAgent interface{}, mods queries.Applicator) error {
	var slice []*Agent
	var object *Agent

	if singular {
		object = maybeAgent.(*Agent)
	} else {
		slice = *maybeAgent.(*[]*Agent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &agentR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &agentR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`stable_naira_transaction_assignment`),
		qm.WhereIn(`stable_naira_transaction_assignment.agent_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load stable_naira_transaction_assignment")
	}

	var resultSlice []*StableNairaTransactionAssignment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice stable_naira_transaction_assignment")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on stable_naira_transaction_assignment")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for stable_naira_transaction_assignment")
	}

	if singular {
		object.R.StableNairaTransactionAssignments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &stableNairaTransactionAssignmentR{}
			}
			foreign.R.Agent = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.AgentID {
				local.R.StableNairaTransactionAssignments = append(local.R.StableNairaTransactionAssignments, foreign)
				if foreign.R == nil {
					foreign.R = &stableNairaTransactionAssignmentR{}
				}
				foreign.R.Agent = local
				break
			}
		}
	}

	return nil
}

// LoadTransactionAssignments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (agentL) LoadTransactionAssignments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAgent interface{}, mods queries.Applicator) error {
	var slice []*Agent
	var object *Agent

	if singular {
		object = maybeAgent.(*Agent)
	} else {
		slice = *maybeAgent.(*[]*Agent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &agentR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &agentR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`transaction_assignment`),
		qm.WhereIn(`transaction_assignment.agent_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load transaction_assignment")
	}

	var resultSlice []*TransactionAssignment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice transaction_assignment")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on transaction_assignment")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for transaction_assignment")
	}

	if singular {
		object.R.TransactionAssignments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &transactionAssignmentR{}
			}
			foreign.R.Agent = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.AgentID {
				local.R.TransactionAssignments = append(local.R.TransactionAssignments, foreign)
				if foreign.R == nil {
					foreign.R = &transactionAssignmentR{}
				}
				foreign.R.Agent = local
				break
			}
		}
	}

	return nil
}

// AddStableNairaTransactions adds the given related objects to the existing relationships
// of the agent, optionally inserting them as new records.
// Appends related to o.R.StableNairaTransactions.
// Sets related.R.Agent appropriately.
func (o *Agent) AddStableNairaTransactions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*StableNairaTransaction) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AgentID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"stable_naira_transaction\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"agent_id"}),
				strmangle.WhereClause("\"", "\"", 2, stableNairaTransactionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AgentID = o.ID
		}
	}

	if o.R == nil {
		o.R = &agentR{
			StableNairaTransactions: related,
		}
	} else {
		o.R.StableNairaTransactions = append(o.R.StableNairaTransactions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &stableNairaTransactionR{
				Agent: o,
			}
		} else {
			rel.R.Agent = o
		}
	}
	return nil
}

// AddStableNairaTransactionAssignments adds the given related objects to the existing relationships
// of the agent, optionally inserting them as new records.
// Appends related to o.R.StableNairaTransactionAssignments.
// Sets related.R.Agent appropriately.
func (o *Agent) AddStableNairaTransactionAssignments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*StableNairaTransactionAssignment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AgentID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"stable_naira_transaction_assignment\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"agent_id"}),
				strmangle.WhereClause("\"", "\"", 2, stableNairaTransactionAssignmentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AgentID = o.ID
		}
	}

	if o.R == nil {
		o.R = &agentR{
			StableNairaTransactionAssignments: related,
		}
	} else {
		o.R.StableNairaTransactionAssignments = append(o.R.StableNairaTransactionAssignments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &stableNairaTransactionAssignmentR{
				Agent: o,
			}
		} else {
			rel.R.Agent = o
		}
	}
	return nil
}

// AddTransactionAssignments adds the given related objects to the existing relationships
// of the agent, optionally inserting them as new records.
// Appends related to o.R.TransactionAssignments.
// Sets related.R.Agent appropriately.
func (o *Agent) AddTransactionAssignments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TransactionAssignment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AgentID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"transaction_assignment\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"agent_id"}),
				strmangle.WhereClause("\"", "\"", 2, transactionAssignmentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AgentID = o.ID
		}
	}

	if o.R == nil {
		o.R = &agentR{
			TransactionAssignments: related,
		}
	} else {
		o.R.TransactionAssignments = append(o.R.TransactionAssignments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &transactionAssignmentR{
				Agent: o,
			}
		} else {
			rel.R.Agent = o
		}
	}
	return nil
}

// Agents retrieves all the records using an executor.
func Agents(mods ...qm.QueryMod) agentQuery {
	mods = append(mods, qm.From("\"agent\""))
	return agentQuery{NewQuery(mods...)}
}

// FindAgent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAgent(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Agent, error) {
	agentObj := &Agent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"agent\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, agentObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from agent")
	}

	return agentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Agent) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no agent provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(agentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	agentInsertCacheMut.RLock()
	cache, cached := agentInsertCache[key]
	agentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			agentAllColumns,
			agentColumnsWithDefault,
			agentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(agentType, agentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(agentType, agentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"agent\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"agent\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into agent")
	}

	if !cached {
		agentInsertCacheMut.Lock()
		agentInsertCache[key] = cache
		agentInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Agent.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Agent) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	agentUpdateCacheMut.RLock()
	cache, cached := agentUpdateCache[key]
	agentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			agentAllColumns,
			agentPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update agent, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"agent\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, agentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(agentType, agentMapping, append(wl, agentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update agent row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for agent")
	}

	if !cached {
		agentUpdateCacheMut.Lock()
		agentUpdateCache[key] = cache
		agentUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q agentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for agent")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for agent")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AgentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), agentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"agent\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, agentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in agent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all agent")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Agent) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no agent provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(agentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	agentUpsertCacheMut.RLock()
	cache, cached := agentUpsertCache[key]
	agentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			agentAllColumns,
			agentColumnsWithDefault,
			agentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			agentAllColumns,
			agentPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert agent, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(agentPrimaryKeyColumns))
			copy(conflict, agentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"agent\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(agentType, agentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(agentType, agentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert agent")
	}

	if !cached {
		agentUpsertCacheMut.Lock()
		agentUpsertCache[key] = cache
		agentUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Agent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Agent) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Agent provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), agentPrimaryKeyMapping)
	sql := "DELETE FROM \"agent\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from agent")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for agent")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q agentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no agentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from agent")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for agent")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AgentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), agentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"agent\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, agentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from agent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for agent")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Agent) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAgent(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AgentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AgentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), agentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"agent\".* FROM \"agent\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, agentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AgentSlice")
	}

	*o = slice

	return nil
}

// AgentExists checks if the Agent row exists.
func AgentExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"agent\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if agent exists")
	}

	return exists, nil
}
