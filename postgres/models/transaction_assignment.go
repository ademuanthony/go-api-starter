// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TransactionAssignment is an object representing the database table.
type TransactionAssignment struct {
	ID            int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	AgentID       int    `boil:"agent_id" json:"agent_id" toml:"agent_id" yaml:"agent_id"`
	TransactionID string `boil:"transaction_id" json:"transaction_id" toml:"transaction_id" yaml:"transaction_id"`
	Amount        int64  `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	Date          int64  `boil:"date" json:"date" toml:"date" yaml:"date"`
	Status        int    `boil:"status" json:"status" toml:"status" yaml:"status"`

	R *transactionAssignmentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L transactionAssignmentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TransactionAssignmentColumns = struct {
	ID            string
	AgentID       string
	TransactionID string
	Amount        string
	Date          string
	Status        string
}{
	ID:            "id",
	AgentID:       "agent_id",
	TransactionID: "transaction_id",
	Amount:        "amount",
	Date:          "date",
	Status:        "status",
}

var TransactionAssignmentTableColumns = struct {
	ID            string
	AgentID       string
	TransactionID string
	Amount        string
	Date          string
	Status        string
}{
	ID:            "transaction_assignment.id",
	AgentID:       "transaction_assignment.agent_id",
	TransactionID: "transaction_assignment.transaction_id",
	Amount:        "transaction_assignment.amount",
	Date:          "transaction_assignment.date",
	Status:        "transaction_assignment.status",
}

// Generated where

var TransactionAssignmentWhere = struct {
	ID            whereHelperint
	AgentID       whereHelperint
	TransactionID whereHelperstring
	Amount        whereHelperint64
	Date          whereHelperint64
	Status        whereHelperint
}{
	ID:            whereHelperint{field: "\"transaction_assignment\".\"id\""},
	AgentID:       whereHelperint{field: "\"transaction_assignment\".\"agent_id\""},
	TransactionID: whereHelperstring{field: "\"transaction_assignment\".\"transaction_id\""},
	Amount:        whereHelperint64{field: "\"transaction_assignment\".\"amount\""},
	Date:          whereHelperint64{field: "\"transaction_assignment\".\"date\""},
	Status:        whereHelperint{field: "\"transaction_assignment\".\"status\""},
}

// TransactionAssignmentRels is where relationship names are stored.
var TransactionAssignmentRels = struct {
	Agent       string
	Transaction string
}{
	Agent:       "Agent",
	Transaction: "Transaction",
}

// transactionAssignmentR is where relationships are stored.
type transactionAssignmentR struct {
	Agent       *Agent       `boil:"Agent" json:"Agent" toml:"Agent" yaml:"Agent"`
	Transaction *Transaction `boil:"Transaction" json:"Transaction" toml:"Transaction" yaml:"Transaction"`
}

// NewStruct creates a new relationship struct
func (*transactionAssignmentR) NewStruct() *transactionAssignmentR {
	return &transactionAssignmentR{}
}

// transactionAssignmentL is where Load methods for each relationship are stored.
type transactionAssignmentL struct{}

var (
	transactionAssignmentAllColumns            = []string{"id", "agent_id", "transaction_id", "amount", "date", "status"}
	transactionAssignmentColumnsWithoutDefault = []string{"agent_id", "transaction_id", "amount", "date", "status"}
	transactionAssignmentColumnsWithDefault    = []string{"id"}
	transactionAssignmentPrimaryKeyColumns     = []string{"id"}
)

type (
	// TransactionAssignmentSlice is an alias for a slice of pointers to TransactionAssignment.
	// This should almost always be used instead of []TransactionAssignment.
	TransactionAssignmentSlice []*TransactionAssignment

	transactionAssignmentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	transactionAssignmentType                 = reflect.TypeOf(&TransactionAssignment{})
	transactionAssignmentMapping              = queries.MakeStructMapping(transactionAssignmentType)
	transactionAssignmentPrimaryKeyMapping, _ = queries.BindMapping(transactionAssignmentType, transactionAssignmentMapping, transactionAssignmentPrimaryKeyColumns)
	transactionAssignmentInsertCacheMut       sync.RWMutex
	transactionAssignmentInsertCache          = make(map[string]insertCache)
	transactionAssignmentUpdateCacheMut       sync.RWMutex
	transactionAssignmentUpdateCache          = make(map[string]updateCache)
	transactionAssignmentUpsertCacheMut       sync.RWMutex
	transactionAssignmentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single transactionAssignment record from the query.
func (q transactionAssignmentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TransactionAssignment, error) {
	o := &TransactionAssignment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for transaction_assignment")
	}

	return o, nil
}

// All returns all TransactionAssignment records from the query.
func (q transactionAssignmentQuery) All(ctx context.Context, exec boil.ContextExecutor) (TransactionAssignmentSlice, error) {
	var o []*TransactionAssignment

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TransactionAssignment slice")
	}

	return o, nil
}

// Count returns the count of all TransactionAssignment records in the query.
func (q transactionAssignmentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count transaction_assignment rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q transactionAssignmentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if transaction_assignment exists")
	}

	return count > 0, nil
}

// Agent pointed to by the foreign key.
func (o *TransactionAssignment) Agent(mods ...qm.QueryMod) agentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AgentID),
	}

	queryMods = append(queryMods, mods...)

	query := Agents(queryMods...)
	queries.SetFrom(query.Query, "\"agent\"")

	return query
}

// Transaction pointed to by the foreign key.
func (o *TransactionAssignment) Transaction(mods ...qm.QueryMod) transactionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TransactionID),
	}

	queryMods = append(queryMods, mods...)

	query := Transactions(queryMods...)
	queries.SetFrom(query.Query, "\"transaction\"")

	return query
}

// LoadAgent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transactionAssignmentL) LoadAgent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTransactionAssignment interface{}, mods queries.Applicator) error {
	var slice []*TransactionAssignment
	var object *TransactionAssignment

	if singular {
		object = maybeTransactionAssignment.(*TransactionAssignment)
	} else {
		slice = *maybeTransactionAssignment.(*[]*TransactionAssignment)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &transactionAssignmentR{}
		}
		args = append(args, object.AgentID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionAssignmentR{}
			}

			for _, a := range args {
				if a == obj.AgentID {
					continue Outer
				}
			}

			args = append(args, obj.AgentID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`agent`),
		qm.WhereIn(`agent.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Agent")
	}

	var resultSlice []*Agent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Agent")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for agent")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for agent")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Agent = foreign
		if foreign.R == nil {
			foreign.R = &agentR{}
		}
		foreign.R.TransactionAssignments = append(foreign.R.TransactionAssignments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AgentID == foreign.ID {
				local.R.Agent = foreign
				if foreign.R == nil {
					foreign.R = &agentR{}
				}
				foreign.R.TransactionAssignments = append(foreign.R.TransactionAssignments, local)
				break
			}
		}
	}

	return nil
}

// LoadTransaction allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transactionAssignmentL) LoadTransaction(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTransactionAssignment interface{}, mods queries.Applicator) error {
	var slice []*TransactionAssignment
	var object *TransactionAssignment

	if singular {
		object = maybeTransactionAssignment.(*TransactionAssignment)
	} else {
		slice = *maybeTransactionAssignment.(*[]*TransactionAssignment)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &transactionAssignmentR{}
		}
		args = append(args, object.TransactionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionAssignmentR{}
			}

			for _, a := range args {
				if a == obj.TransactionID {
					continue Outer
				}
			}

			args = append(args, obj.TransactionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`transaction`),
		qm.WhereIn(`transaction.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Transaction")
	}

	var resultSlice []*Transaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Transaction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for transaction")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for transaction")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Transaction = foreign
		if foreign.R == nil {
			foreign.R = &transactionR{}
		}
		foreign.R.TransactionAssignments = append(foreign.R.TransactionAssignments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TransactionID == foreign.ID {
				local.R.Transaction = foreign
				if foreign.R == nil {
					foreign.R = &transactionR{}
				}
				foreign.R.TransactionAssignments = append(foreign.R.TransactionAssignments, local)
				break
			}
		}
	}

	return nil
}

// SetAgent of the transactionAssignment to the related item.
// Sets o.R.Agent to related.
// Adds o to related.R.TransactionAssignments.
func (o *TransactionAssignment) SetAgent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Agent) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"transaction_assignment\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"agent_id"}),
		strmangle.WhereClause("\"", "\"", 2, transactionAssignmentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AgentID = related.ID
	if o.R == nil {
		o.R = &transactionAssignmentR{
			Agent: related,
		}
	} else {
		o.R.Agent = related
	}

	if related.R == nil {
		related.R = &agentR{
			TransactionAssignments: TransactionAssignmentSlice{o},
		}
	} else {
		related.R.TransactionAssignments = append(related.R.TransactionAssignments, o)
	}

	return nil
}

// SetTransaction of the transactionAssignment to the related item.
// Sets o.R.Transaction to related.
// Adds o to related.R.TransactionAssignments.
func (o *TransactionAssignment) SetTransaction(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Transaction) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"transaction_assignment\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"transaction_id"}),
		strmangle.WhereClause("\"", "\"", 2, transactionAssignmentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TransactionID = related.ID
	if o.R == nil {
		o.R = &transactionAssignmentR{
			Transaction: related,
		}
	} else {
		o.R.Transaction = related
	}

	if related.R == nil {
		related.R = &transactionR{
			TransactionAssignments: TransactionAssignmentSlice{o},
		}
	} else {
		related.R.TransactionAssignments = append(related.R.TransactionAssignments, o)
	}

	return nil
}

// TransactionAssignments retrieves all the records using an executor.
func TransactionAssignments(mods ...qm.QueryMod) transactionAssignmentQuery {
	mods = append(mods, qm.From("\"transaction_assignment\""))
	return transactionAssignmentQuery{NewQuery(mods...)}
}

// FindTransactionAssignment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTransactionAssignment(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*TransactionAssignment, error) {
	transactionAssignmentObj := &TransactionAssignment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"transaction_assignment\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, transactionAssignmentObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from transaction_assignment")
	}

	return transactionAssignmentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TransactionAssignment) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no transaction_assignment provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(transactionAssignmentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	transactionAssignmentInsertCacheMut.RLock()
	cache, cached := transactionAssignmentInsertCache[key]
	transactionAssignmentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			transactionAssignmentAllColumns,
			transactionAssignmentColumnsWithDefault,
			transactionAssignmentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(transactionAssignmentType, transactionAssignmentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(transactionAssignmentType, transactionAssignmentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"transaction_assignment\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"transaction_assignment\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into transaction_assignment")
	}

	if !cached {
		transactionAssignmentInsertCacheMut.Lock()
		transactionAssignmentInsertCache[key] = cache
		transactionAssignmentInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the TransactionAssignment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TransactionAssignment) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	transactionAssignmentUpdateCacheMut.RLock()
	cache, cached := transactionAssignmentUpdateCache[key]
	transactionAssignmentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			transactionAssignmentAllColumns,
			transactionAssignmentPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update transaction_assignment, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"transaction_assignment\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, transactionAssignmentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(transactionAssignmentType, transactionAssignmentMapping, append(wl, transactionAssignmentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update transaction_assignment row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for transaction_assignment")
	}

	if !cached {
		transactionAssignmentUpdateCacheMut.Lock()
		transactionAssignmentUpdateCache[key] = cache
		transactionAssignmentUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q transactionAssignmentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for transaction_assignment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for transaction_assignment")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TransactionAssignmentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionAssignmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"transaction_assignment\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, transactionAssignmentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in transactionAssignment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all transactionAssignment")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TransactionAssignment) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no transaction_assignment provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(transactionAssignmentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	transactionAssignmentUpsertCacheMut.RLock()
	cache, cached := transactionAssignmentUpsertCache[key]
	transactionAssignmentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			transactionAssignmentAllColumns,
			transactionAssignmentColumnsWithDefault,
			transactionAssignmentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			transactionAssignmentAllColumns,
			transactionAssignmentPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert transaction_assignment, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(transactionAssignmentPrimaryKeyColumns))
			copy(conflict, transactionAssignmentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"transaction_assignment\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(transactionAssignmentType, transactionAssignmentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(transactionAssignmentType, transactionAssignmentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert transaction_assignment")
	}

	if !cached {
		transactionAssignmentUpsertCacheMut.Lock()
		transactionAssignmentUpsertCache[key] = cache
		transactionAssignmentUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single TransactionAssignment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TransactionAssignment) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TransactionAssignment provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), transactionAssignmentPrimaryKeyMapping)
	sql := "DELETE FROM \"transaction_assignment\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from transaction_assignment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for transaction_assignment")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q transactionAssignmentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no transactionAssignmentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from transaction_assignment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for transaction_assignment")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TransactionAssignmentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionAssignmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"transaction_assignment\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, transactionAssignmentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from transactionAssignment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for transaction_assignment")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TransactionAssignment) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTransactionAssignment(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TransactionAssignmentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TransactionAssignmentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionAssignmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"transaction_assignment\".* FROM \"transaction_assignment\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, transactionAssignmentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TransactionAssignmentSlice")
	}

	*o = slice

	return nil
}

// TransactionAssignmentExists checks if the TransactionAssignment row exists.
func TransactionAssignmentExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"transaction_assignment\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if transaction_assignment exists")
	}

	return exists, nil
}
