// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// NetworkCurrency is an object representing the database table.
type NetworkCurrency struct {
	ID              string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Symbol          string      `boil:"symbol" json:"symbol" toml:"symbol" yaml:"symbol"`
	Network         string      `boil:"network" json:"network" toml:"network" yaml:"network"`
	ContractAddress null.String `boil:"contract_address" json:"contract_address,omitempty" toml:"contract_address" yaml:"contract_address,omitempty"`
	Decimals        int         `boil:"decimals" json:"decimals" toml:"decimals" yaml:"decimals"`
	Active          bool        `boil:"active" json:"active" toml:"active" yaml:"active"`

	R *networkCurrencyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L networkCurrencyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NetworkCurrencyColumns = struct {
	ID              string
	Symbol          string
	Network         string
	ContractAddress string
	Decimals        string
	Active          string
}{
	ID:              "id",
	Symbol:          "symbol",
	Network:         "network",
	ContractAddress: "contract_address",
	Decimals:        "decimals",
	Active:          "active",
}

var NetworkCurrencyTableColumns = struct {
	ID              string
	Symbol          string
	Network         string
	ContractAddress string
	Decimals        string
	Active          string
}{
	ID:              "network_currency.id",
	Symbol:          "network_currency.symbol",
	Network:         "network_currency.network",
	ContractAddress: "network_currency.contract_address",
	Decimals:        "network_currency.decimals",
	Active:          "network_currency.active",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var NetworkCurrencyWhere = struct {
	ID              whereHelperstring
	Symbol          whereHelperstring
	Network         whereHelperstring
	ContractAddress whereHelpernull_String
	Decimals        whereHelperint
	Active          whereHelperbool
}{
	ID:              whereHelperstring{field: "\"network_currency\".\"id\""},
	Symbol:          whereHelperstring{field: "\"network_currency\".\"symbol\""},
	Network:         whereHelperstring{field: "\"network_currency\".\"network\""},
	ContractAddress: whereHelpernull_String{field: "\"network_currency\".\"contract_address\""},
	Decimals:        whereHelperint{field: "\"network_currency\".\"decimals\""},
	Active:          whereHelperbool{field: "\"network_currency\".\"active\""},
}

// NetworkCurrencyRels is where relationship names are stored.
var NetworkCurrencyRels = struct {
	SymbolCurrency string
}{
	SymbolCurrency: "SymbolCurrency",
}

// networkCurrencyR is where relationships are stored.
type networkCurrencyR struct {
	SymbolCurrency *Currency `boil:"SymbolCurrency" json:"SymbolCurrency" toml:"SymbolCurrency" yaml:"SymbolCurrency"`
}

// NewStruct creates a new relationship struct
func (*networkCurrencyR) NewStruct() *networkCurrencyR {
	return &networkCurrencyR{}
}

// networkCurrencyL is where Load methods for each relationship are stored.
type networkCurrencyL struct{}

var (
	networkCurrencyAllColumns            = []string{"id", "symbol", "network", "contract_address", "decimals", "active"}
	networkCurrencyColumnsWithoutDefault = []string{"symbol", "network", "contract_address", "decimals", "active"}
	networkCurrencyColumnsWithDefault    = []string{"id"}
	networkCurrencyPrimaryKeyColumns     = []string{"id"}
)

type (
	// NetworkCurrencySlice is an alias for a slice of pointers to NetworkCurrency.
	// This should almost always be used instead of []NetworkCurrency.
	NetworkCurrencySlice []*NetworkCurrency

	networkCurrencyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	networkCurrencyType                 = reflect.TypeOf(&NetworkCurrency{})
	networkCurrencyMapping              = queries.MakeStructMapping(networkCurrencyType)
	networkCurrencyPrimaryKeyMapping, _ = queries.BindMapping(networkCurrencyType, networkCurrencyMapping, networkCurrencyPrimaryKeyColumns)
	networkCurrencyInsertCacheMut       sync.RWMutex
	networkCurrencyInsertCache          = make(map[string]insertCache)
	networkCurrencyUpdateCacheMut       sync.RWMutex
	networkCurrencyUpdateCache          = make(map[string]updateCache)
	networkCurrencyUpsertCacheMut       sync.RWMutex
	networkCurrencyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single networkCurrency record from the query.
func (q networkCurrencyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*NetworkCurrency, error) {
	o := &NetworkCurrency{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for network_currency")
	}

	return o, nil
}

// All returns all NetworkCurrency records from the query.
func (q networkCurrencyQuery) All(ctx context.Context, exec boil.ContextExecutor) (NetworkCurrencySlice, error) {
	var o []*NetworkCurrency

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to NetworkCurrency slice")
	}

	return o, nil
}

// Count returns the count of all NetworkCurrency records in the query.
func (q networkCurrencyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count network_currency rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q networkCurrencyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if network_currency exists")
	}

	return count > 0, nil
}

// SymbolCurrency pointed to by the foreign key.
func (o *NetworkCurrency) SymbolCurrency(mods ...qm.QueryMod) currencyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"symbol\" = ?", o.Symbol),
	}

	queryMods = append(queryMods, mods...)

	query := Currencies(queryMods...)
	queries.SetFrom(query.Query, "\"currency\"")

	return query
}

// LoadSymbolCurrency allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (networkCurrencyL) LoadSymbolCurrency(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNetworkCurrency interface{}, mods queries.Applicator) error {
	var slice []*NetworkCurrency
	var object *NetworkCurrency

	if singular {
		object = maybeNetworkCurrency.(*NetworkCurrency)
	} else {
		slice = *maybeNetworkCurrency.(*[]*NetworkCurrency)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &networkCurrencyR{}
		}
		args = append(args, object.Symbol)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &networkCurrencyR{}
			}

			for _, a := range args {
				if a == obj.Symbol {
					continue Outer
				}
			}

			args = append(args, obj.Symbol)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`currency`),
		qm.WhereIn(`currency.symbol in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Currency")
	}

	var resultSlice []*Currency
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Currency")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for currency")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for currency")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SymbolCurrency = foreign
		if foreign.R == nil {
			foreign.R = &currencyR{}
		}
		foreign.R.SymbolNetworkCurrencies = append(foreign.R.SymbolNetworkCurrencies, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Symbol == foreign.Symbol {
				local.R.SymbolCurrency = foreign
				if foreign.R == nil {
					foreign.R = &currencyR{}
				}
				foreign.R.SymbolNetworkCurrencies = append(foreign.R.SymbolNetworkCurrencies, local)
				break
			}
		}
	}

	return nil
}

// SetSymbolCurrency of the networkCurrency to the related item.
// Sets o.R.SymbolCurrency to related.
// Adds o to related.R.SymbolNetworkCurrencies.
func (o *NetworkCurrency) SetSymbolCurrency(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Currency) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"network_currency\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"symbol"}),
		strmangle.WhereClause("\"", "\"", 2, networkCurrencyPrimaryKeyColumns),
	)
	values := []interface{}{related.Symbol, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Symbol = related.Symbol
	if o.R == nil {
		o.R = &networkCurrencyR{
			SymbolCurrency: related,
		}
	} else {
		o.R.SymbolCurrency = related
	}

	if related.R == nil {
		related.R = &currencyR{
			SymbolNetworkCurrencies: NetworkCurrencySlice{o},
		}
	} else {
		related.R.SymbolNetworkCurrencies = append(related.R.SymbolNetworkCurrencies, o)
	}

	return nil
}

// NetworkCurrencies retrieves all the records using an executor.
func NetworkCurrencies(mods ...qm.QueryMod) networkCurrencyQuery {
	mods = append(mods, qm.From("\"network_currency\""))
	return networkCurrencyQuery{NewQuery(mods...)}
}

// FindNetworkCurrency retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNetworkCurrency(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*NetworkCurrency, error) {
	networkCurrencyObj := &NetworkCurrency{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"network_currency\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, networkCurrencyObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from network_currency")
	}

	return networkCurrencyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *NetworkCurrency) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no network_currency provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(networkCurrencyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	networkCurrencyInsertCacheMut.RLock()
	cache, cached := networkCurrencyInsertCache[key]
	networkCurrencyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			networkCurrencyAllColumns,
			networkCurrencyColumnsWithDefault,
			networkCurrencyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(networkCurrencyType, networkCurrencyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(networkCurrencyType, networkCurrencyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"network_currency\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"network_currency\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into network_currency")
	}

	if !cached {
		networkCurrencyInsertCacheMut.Lock()
		networkCurrencyInsertCache[key] = cache
		networkCurrencyInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the NetworkCurrency.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *NetworkCurrency) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	networkCurrencyUpdateCacheMut.RLock()
	cache, cached := networkCurrencyUpdateCache[key]
	networkCurrencyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			networkCurrencyAllColumns,
			networkCurrencyPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update network_currency, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"network_currency\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, networkCurrencyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(networkCurrencyType, networkCurrencyMapping, append(wl, networkCurrencyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update network_currency row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for network_currency")
	}

	if !cached {
		networkCurrencyUpdateCacheMut.Lock()
		networkCurrencyUpdateCache[key] = cache
		networkCurrencyUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q networkCurrencyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for network_currency")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for network_currency")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NetworkCurrencySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), networkCurrencyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"network_currency\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, networkCurrencyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in networkCurrency slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all networkCurrency")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *NetworkCurrency) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no network_currency provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(networkCurrencyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	networkCurrencyUpsertCacheMut.RLock()
	cache, cached := networkCurrencyUpsertCache[key]
	networkCurrencyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			networkCurrencyAllColumns,
			networkCurrencyColumnsWithDefault,
			networkCurrencyColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			networkCurrencyAllColumns,
			networkCurrencyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert network_currency, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(networkCurrencyPrimaryKeyColumns))
			copy(conflict, networkCurrencyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"network_currency\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(networkCurrencyType, networkCurrencyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(networkCurrencyType, networkCurrencyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert network_currency")
	}

	if !cached {
		networkCurrencyUpsertCacheMut.Lock()
		networkCurrencyUpsertCache[key] = cache
		networkCurrencyUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single NetworkCurrency record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *NetworkCurrency) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no NetworkCurrency provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), networkCurrencyPrimaryKeyMapping)
	sql := "DELETE FROM \"network_currency\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from network_currency")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for network_currency")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q networkCurrencyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no networkCurrencyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from network_currency")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for network_currency")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NetworkCurrencySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), networkCurrencyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"network_currency\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, networkCurrencyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from networkCurrency slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for network_currency")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *NetworkCurrency) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindNetworkCurrency(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NetworkCurrencySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := NetworkCurrencySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), networkCurrencyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"network_currency\".* FROM \"network_currency\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, networkCurrencyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in NetworkCurrencySlice")
	}

	*o = slice

	return nil
}

// NetworkCurrencyExists checks if the NetworkCurrency row exists.
func NetworkCurrencyExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"network_currency\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if network_currency exists")
	}

	return exists, nil
}
