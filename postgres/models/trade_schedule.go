// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TradeSchedule is an object representing the database table.
type TradeSchedule struct {
	ID                     string `boil:"id" json:"id" toml:"id" yaml:"id"`
	AccountID              string `boil:"account_id" json:"account_id" toml:"account_id" yaml:"account_id"`
	TradeNo                int    `boil:"trade_no" json:"trade_no" toml:"trade_no" yaml:"trade_no"`
	TotalTrades            int    `boil:"total_trades" json:"total_trades" toml:"total_trades" yaml:"total_trades"`
	Date                   int64  `boil:"date" json:"date" toml:"date" yaml:"date"`
	TargetProfitPercentage int    `boil:"target_profit_percentage" json:"target_profit_percentage" toml:"target_profit_percentage" yaml:"target_profit_percentage"`
	StartDate              int    `boil:"start_date" json:"start_date" toml:"start_date" yaml:"start_date"`

	R *tradeScheduleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tradeScheduleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TradeScheduleColumns = struct {
	ID                     string
	AccountID              string
	TradeNo                string
	TotalTrades            string
	Date                   string
	TargetProfitPercentage string
	StartDate              string
}{
	ID:                     "id",
	AccountID:              "account_id",
	TradeNo:                "trade_no",
	TotalTrades:            "total_trades",
	Date:                   "date",
	TargetProfitPercentage: "target_profit_percentage",
	StartDate:              "start_date",
}

var TradeScheduleTableColumns = struct {
	ID                     string
	AccountID              string
	TradeNo                string
	TotalTrades            string
	Date                   string
	TargetProfitPercentage string
	StartDate              string
}{
	ID:                     "trade_schedule.id",
	AccountID:              "trade_schedule.account_id",
	TradeNo:                "trade_schedule.trade_no",
	TotalTrades:            "trade_schedule.total_trades",
	Date:                   "trade_schedule.date",
	TargetProfitPercentage: "trade_schedule.target_profit_percentage",
	StartDate:              "trade_schedule.start_date",
}

// Generated where

var TradeScheduleWhere = struct {
	ID                     whereHelperstring
	AccountID              whereHelperstring
	TradeNo                whereHelperint
	TotalTrades            whereHelperint
	Date                   whereHelperint64
	TargetProfitPercentage whereHelperint
	StartDate              whereHelperint
}{
	ID:                     whereHelperstring{field: "\"trade_schedule\".\"id\""},
	AccountID:              whereHelperstring{field: "\"trade_schedule\".\"account_id\""},
	TradeNo:                whereHelperint{field: "\"trade_schedule\".\"trade_no\""},
	TotalTrades:            whereHelperint{field: "\"trade_schedule\".\"total_trades\""},
	Date:                   whereHelperint64{field: "\"trade_schedule\".\"date\""},
	TargetProfitPercentage: whereHelperint{field: "\"trade_schedule\".\"target_profit_percentage\""},
	StartDate:              whereHelperint{field: "\"trade_schedule\".\"start_date\""},
}

// TradeScheduleRels is where relationship names are stored.
var TradeScheduleRels = struct {
	Account string
}{
	Account: "Account",
}

// tradeScheduleR is where relationships are stored.
type tradeScheduleR struct {
	Account *Account `boil:"Account" json:"Account" toml:"Account" yaml:"Account"`
}

// NewStruct creates a new relationship struct
func (*tradeScheduleR) NewStruct() *tradeScheduleR {
	return &tradeScheduleR{}
}

// tradeScheduleL is where Load methods for each relationship are stored.
type tradeScheduleL struct{}

var (
	tradeScheduleAllColumns            = []string{"id", "account_id", "trade_no", "total_trades", "date", "target_profit_percentage", "start_date"}
	tradeScheduleColumnsWithoutDefault = []string{"account_id", "trade_no", "total_trades", "date"}
	tradeScheduleColumnsWithDefault    = []string{"id", "target_profit_percentage", "start_date"}
	tradeSchedulePrimaryKeyColumns     = []string{"id"}
)

type (
	// TradeScheduleSlice is an alias for a slice of pointers to TradeSchedule.
	// This should almost always be used instead of []TradeSchedule.
	TradeScheduleSlice []*TradeSchedule

	tradeScheduleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tradeScheduleType                 = reflect.TypeOf(&TradeSchedule{})
	tradeScheduleMapping              = queries.MakeStructMapping(tradeScheduleType)
	tradeSchedulePrimaryKeyMapping, _ = queries.BindMapping(tradeScheduleType, tradeScheduleMapping, tradeSchedulePrimaryKeyColumns)
	tradeScheduleInsertCacheMut       sync.RWMutex
	tradeScheduleInsertCache          = make(map[string]insertCache)
	tradeScheduleUpdateCacheMut       sync.RWMutex
	tradeScheduleUpdateCache          = make(map[string]updateCache)
	tradeScheduleUpsertCacheMut       sync.RWMutex
	tradeScheduleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single tradeSchedule record from the query.
func (q tradeScheduleQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TradeSchedule, error) {
	o := &TradeSchedule{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for trade_schedule")
	}

	return o, nil
}

// All returns all TradeSchedule records from the query.
func (q tradeScheduleQuery) All(ctx context.Context, exec boil.ContextExecutor) (TradeScheduleSlice, error) {
	var o []*TradeSchedule

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TradeSchedule slice")
	}

	return o, nil
}

// Count returns the count of all TradeSchedule records in the query.
func (q tradeScheduleQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count trade_schedule rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tradeScheduleQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if trade_schedule exists")
	}

	return count > 0, nil
}

// Account pointed to by the foreign key.
func (o *TradeSchedule) Account(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AccountID),
	}

	queryMods = append(queryMods, mods...)

	query := Accounts(queryMods...)
	queries.SetFrom(query.Query, "\"account\"")

	return query
}

// LoadAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tradeScheduleL) LoadAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTradeSchedule interface{}, mods queries.Applicator) error {
	var slice []*TradeSchedule
	var object *TradeSchedule

	if singular {
		object = maybeTradeSchedule.(*TradeSchedule)
	} else {
		slice = *maybeTradeSchedule.(*[]*TradeSchedule)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tradeScheduleR{}
		}
		args = append(args, object.AccountID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tradeScheduleR{}
			}

			for _, a := range args {
				if a == obj.AccountID {
					continue Outer
				}
			}

			args = append(args, obj.AccountID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`account`),
		qm.WhereIn(`account.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for account")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Account = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.TradeSchedules = append(foreign.R.TradeSchedules, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AccountID == foreign.ID {
				local.R.Account = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.TradeSchedules = append(foreign.R.TradeSchedules, local)
				break
			}
		}
	}

	return nil
}

// SetAccount of the tradeSchedule to the related item.
// Sets o.R.Account to related.
// Adds o to related.R.TradeSchedules.
func (o *TradeSchedule) SetAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"trade_schedule\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"account_id"}),
		strmangle.WhereClause("\"", "\"", 2, tradeSchedulePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AccountID = related.ID
	if o.R == nil {
		o.R = &tradeScheduleR{
			Account: related,
		}
	} else {
		o.R.Account = related
	}

	if related.R == nil {
		related.R = &accountR{
			TradeSchedules: TradeScheduleSlice{o},
		}
	} else {
		related.R.TradeSchedules = append(related.R.TradeSchedules, o)
	}

	return nil
}

// TradeSchedules retrieves all the records using an executor.
func TradeSchedules(mods ...qm.QueryMod) tradeScheduleQuery {
	mods = append(mods, qm.From("\"trade_schedule\""))
	return tradeScheduleQuery{NewQuery(mods...)}
}

// FindTradeSchedule retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTradeSchedule(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*TradeSchedule, error) {
	tradeScheduleObj := &TradeSchedule{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"trade_schedule\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, tradeScheduleObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from trade_schedule")
	}

	return tradeScheduleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TradeSchedule) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no trade_schedule provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(tradeScheduleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tradeScheduleInsertCacheMut.RLock()
	cache, cached := tradeScheduleInsertCache[key]
	tradeScheduleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tradeScheduleAllColumns,
			tradeScheduleColumnsWithDefault,
			tradeScheduleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tradeScheduleType, tradeScheduleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tradeScheduleType, tradeScheduleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"trade_schedule\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"trade_schedule\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into trade_schedule")
	}

	if !cached {
		tradeScheduleInsertCacheMut.Lock()
		tradeScheduleInsertCache[key] = cache
		tradeScheduleInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the TradeSchedule.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TradeSchedule) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	tradeScheduleUpdateCacheMut.RLock()
	cache, cached := tradeScheduleUpdateCache[key]
	tradeScheduleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tradeScheduleAllColumns,
			tradeSchedulePrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update trade_schedule, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"trade_schedule\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, tradeSchedulePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tradeScheduleType, tradeScheduleMapping, append(wl, tradeSchedulePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update trade_schedule row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for trade_schedule")
	}

	if !cached {
		tradeScheduleUpdateCacheMut.Lock()
		tradeScheduleUpdateCache[key] = cache
		tradeScheduleUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q tradeScheduleQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for trade_schedule")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for trade_schedule")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TradeScheduleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tradeSchedulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"trade_schedule\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, tradeSchedulePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in tradeSchedule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all tradeSchedule")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TradeSchedule) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no trade_schedule provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(tradeScheduleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tradeScheduleUpsertCacheMut.RLock()
	cache, cached := tradeScheduleUpsertCache[key]
	tradeScheduleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tradeScheduleAllColumns,
			tradeScheduleColumnsWithDefault,
			tradeScheduleColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			tradeScheduleAllColumns,
			tradeSchedulePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert trade_schedule, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(tradeSchedulePrimaryKeyColumns))
			copy(conflict, tradeSchedulePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"trade_schedule\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(tradeScheduleType, tradeScheduleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tradeScheduleType, tradeScheduleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert trade_schedule")
	}

	if !cached {
		tradeScheduleUpsertCacheMut.Lock()
		tradeScheduleUpsertCache[key] = cache
		tradeScheduleUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single TradeSchedule record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TradeSchedule) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TradeSchedule provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tradeSchedulePrimaryKeyMapping)
	sql := "DELETE FROM \"trade_schedule\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from trade_schedule")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for trade_schedule")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tradeScheduleQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no tradeScheduleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from trade_schedule")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for trade_schedule")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TradeScheduleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tradeSchedulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"trade_schedule\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tradeSchedulePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tradeSchedule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for trade_schedule")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TradeSchedule) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTradeSchedule(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TradeScheduleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TradeScheduleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tradeSchedulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"trade_schedule\".* FROM \"trade_schedule\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tradeSchedulePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TradeScheduleSlice")
	}

	*o = slice

	return nil
}

// TradeScheduleExists checks if the TradeSchedule row exists.
func TradeScheduleExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"trade_schedule\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if trade_schedule exists")
	}

	return exists, nil
}
