// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Transfer is an object representing the database table.
type Transfer struct {
	ID         string `boil:"id" json:"id" toml:"id" yaml:"id"`
	Amount     int64  `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	SenderID   string `boil:"sender_id" json:"sender_id" toml:"sender_id" yaml:"sender_id"`
	ReceiverID string `boil:"receiver_id" json:"receiver_id" toml:"receiver_id" yaml:"receiver_id"`
	Date       int64  `boil:"date" json:"date" toml:"date" yaml:"date"`

	R *transferR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L transferL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TransferColumns = struct {
	ID         string
	Amount     string
	SenderID   string
	ReceiverID string
	Date       string
}{
	ID:         "id",
	Amount:     "amount",
	SenderID:   "sender_id",
	ReceiverID: "receiver_id",
	Date:       "date",
}

var TransferTableColumns = struct {
	ID         string
	Amount     string
	SenderID   string
	ReceiverID string
	Date       string
}{
	ID:         "transfer.id",
	Amount:     "transfer.amount",
	SenderID:   "transfer.sender_id",
	ReceiverID: "transfer.receiver_id",
	Date:       "transfer.date",
}

// Generated where

var TransferWhere = struct {
	ID         whereHelperstring
	Amount     whereHelperint64
	SenderID   whereHelperstring
	ReceiverID whereHelperstring
	Date       whereHelperint64
}{
	ID:         whereHelperstring{field: "\"transfer\".\"id\""},
	Amount:     whereHelperint64{field: "\"transfer\".\"amount\""},
	SenderID:   whereHelperstring{field: "\"transfer\".\"sender_id\""},
	ReceiverID: whereHelperstring{field: "\"transfer\".\"receiver_id\""},
	Date:       whereHelperint64{field: "\"transfer\".\"date\""},
}

// TransferRels is where relationship names are stored.
var TransferRels = struct {
	Receiver string
	Sender   string
}{
	Receiver: "Receiver",
	Sender:   "Sender",
}

// transferR is where relationships are stored.
type transferR struct {
	Receiver *Account `boil:"Receiver" json:"Receiver" toml:"Receiver" yaml:"Receiver"`
	Sender   *Account `boil:"Sender" json:"Sender" toml:"Sender" yaml:"Sender"`
}

// NewStruct creates a new relationship struct
func (*transferR) NewStruct() *transferR {
	return &transferR{}
}

// transferL is where Load methods for each relationship are stored.
type transferL struct{}

var (
	transferAllColumns            = []string{"id", "amount", "sender_id", "receiver_id", "date"}
	transferColumnsWithoutDefault = []string{"id", "amount", "sender_id", "receiver_id", "date"}
	transferColumnsWithDefault    = []string{}
	transferPrimaryKeyColumns     = []string{"id"}
)

type (
	// TransferSlice is an alias for a slice of pointers to Transfer.
	// This should almost always be used instead of []Transfer.
	TransferSlice []*Transfer

	transferQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	transferType                 = reflect.TypeOf(&Transfer{})
	transferMapping              = queries.MakeStructMapping(transferType)
	transferPrimaryKeyMapping, _ = queries.BindMapping(transferType, transferMapping, transferPrimaryKeyColumns)
	transferInsertCacheMut       sync.RWMutex
	transferInsertCache          = make(map[string]insertCache)
	transferUpdateCacheMut       sync.RWMutex
	transferUpdateCache          = make(map[string]updateCache)
	transferUpsertCacheMut       sync.RWMutex
	transferUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single transfer record from the query.
func (q transferQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Transfer, error) {
	o := &Transfer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for transfer")
	}

	return o, nil
}

// All returns all Transfer records from the query.
func (q transferQuery) All(ctx context.Context, exec boil.ContextExecutor) (TransferSlice, error) {
	var o []*Transfer

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Transfer slice")
	}

	return o, nil
}

// Count returns the count of all Transfer records in the query.
func (q transferQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count transfer rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q transferQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if transfer exists")
	}

	return count > 0, nil
}

// Receiver pointed to by the foreign key.
func (o *Transfer) Receiver(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ReceiverID),
	}

	queryMods = append(queryMods, mods...)

	query := Accounts(queryMods...)
	queries.SetFrom(query.Query, "\"account\"")

	return query
}

// Sender pointed to by the foreign key.
func (o *Transfer) Sender(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SenderID),
	}

	queryMods = append(queryMods, mods...)

	query := Accounts(queryMods...)
	queries.SetFrom(query.Query, "\"account\"")

	return query
}

// LoadReceiver allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transferL) LoadReceiver(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTransfer interface{}, mods queries.Applicator) error {
	var slice []*Transfer
	var object *Transfer

	if singular {
		object = maybeTransfer.(*Transfer)
	} else {
		slice = *maybeTransfer.(*[]*Transfer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &transferR{}
		}
		args = append(args, object.ReceiverID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transferR{}
			}

			for _, a := range args {
				if a == obj.ReceiverID {
					continue Outer
				}
			}

			args = append(args, obj.ReceiverID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`account`),
		qm.WhereIn(`account.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for account")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Receiver = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.ReceiverTransfers = append(foreign.R.ReceiverTransfers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ReceiverID == foreign.ID {
				local.R.Receiver = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.ReceiverTransfers = append(foreign.R.ReceiverTransfers, local)
				break
			}
		}
	}

	return nil
}

// LoadSender allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transferL) LoadSender(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTransfer interface{}, mods queries.Applicator) error {
	var slice []*Transfer
	var object *Transfer

	if singular {
		object = maybeTransfer.(*Transfer)
	} else {
		slice = *maybeTransfer.(*[]*Transfer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &transferR{}
		}
		args = append(args, object.SenderID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transferR{}
			}

			for _, a := range args {
				if a == obj.SenderID {
					continue Outer
				}
			}

			args = append(args, obj.SenderID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`account`),
		qm.WhereIn(`account.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for account")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Sender = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.SenderTransfers = append(foreign.R.SenderTransfers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SenderID == foreign.ID {
				local.R.Sender = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.SenderTransfers = append(foreign.R.SenderTransfers, local)
				break
			}
		}
	}

	return nil
}

// SetReceiver of the transfer to the related item.
// Sets o.R.Receiver to related.
// Adds o to related.R.ReceiverTransfers.
func (o *Transfer) SetReceiver(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"transfer\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"receiver_id"}),
		strmangle.WhereClause("\"", "\"", 2, transferPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ReceiverID = related.ID
	if o.R == nil {
		o.R = &transferR{
			Receiver: related,
		}
	} else {
		o.R.Receiver = related
	}

	if related.R == nil {
		related.R = &accountR{
			ReceiverTransfers: TransferSlice{o},
		}
	} else {
		related.R.ReceiverTransfers = append(related.R.ReceiverTransfers, o)
	}

	return nil
}

// SetSender of the transfer to the related item.
// Sets o.R.Sender to related.
// Adds o to related.R.SenderTransfers.
func (o *Transfer) SetSender(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"transfer\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"sender_id"}),
		strmangle.WhereClause("\"", "\"", 2, transferPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SenderID = related.ID
	if o.R == nil {
		o.R = &transferR{
			Sender: related,
		}
	} else {
		o.R.Sender = related
	}

	if related.R == nil {
		related.R = &accountR{
			SenderTransfers: TransferSlice{o},
		}
	} else {
		related.R.SenderTransfers = append(related.R.SenderTransfers, o)
	}

	return nil
}

// Transfers retrieves all the records using an executor.
func Transfers(mods ...qm.QueryMod) transferQuery {
	mods = append(mods, qm.From("\"transfer\""))
	return transferQuery{NewQuery(mods...)}
}

// FindTransfer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTransfer(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Transfer, error) {
	transferObj := &Transfer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"transfer\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, transferObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from transfer")
	}

	return transferObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Transfer) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no transfer provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(transferColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	transferInsertCacheMut.RLock()
	cache, cached := transferInsertCache[key]
	transferInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			transferAllColumns,
			transferColumnsWithDefault,
			transferColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(transferType, transferMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(transferType, transferMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"transfer\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"transfer\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into transfer")
	}

	if !cached {
		transferInsertCacheMut.Lock()
		transferInsertCache[key] = cache
		transferInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Transfer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Transfer) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	transferUpdateCacheMut.RLock()
	cache, cached := transferUpdateCache[key]
	transferUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			transferAllColumns,
			transferPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update transfer, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"transfer\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, transferPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(transferType, transferMapping, append(wl, transferPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update transfer row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for transfer")
	}

	if !cached {
		transferUpdateCacheMut.Lock()
		transferUpdateCache[key] = cache
		transferUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q transferQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for transfer")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for transfer")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TransferSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transferPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"transfer\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, transferPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in transfer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all transfer")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Transfer) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no transfer provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(transferColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	transferUpsertCacheMut.RLock()
	cache, cached := transferUpsertCache[key]
	transferUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			transferAllColumns,
			transferColumnsWithDefault,
			transferColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			transferAllColumns,
			transferPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert transfer, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(transferPrimaryKeyColumns))
			copy(conflict, transferPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"transfer\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(transferType, transferMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(transferType, transferMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert transfer")
	}

	if !cached {
		transferUpsertCacheMut.Lock()
		transferUpsertCache[key] = cache
		transferUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Transfer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Transfer) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Transfer provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), transferPrimaryKeyMapping)
	sql := "DELETE FROM \"transfer\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from transfer")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for transfer")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q transferQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no transferQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from transfer")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for transfer")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TransferSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transferPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"transfer\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, transferPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from transfer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for transfer")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Transfer) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTransfer(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TransferSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TransferSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transferPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"transfer\".* FROM \"transfer\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, transferPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TransferSlice")
	}

	*o = slice

	return nil
}

// TransferExists checks if the Transfer row exists.
func TransferExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"transfer\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if transfer exists")
	}

	return exists, nil
}
