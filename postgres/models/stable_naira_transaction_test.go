// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testStableNairaTransactions(t *testing.T) {
	t.Parallel()

	query := StableNairaTransactions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testStableNairaTransactionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StableNairaTransaction{}
	if err = randomize.Struct(seed, o, stableNairaTransactionDBTypes, true, stableNairaTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StableNairaTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StableNairaTransactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStableNairaTransactionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StableNairaTransaction{}
	if err = randomize.Struct(seed, o, stableNairaTransactionDBTypes, true, stableNairaTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StableNairaTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := StableNairaTransactions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StableNairaTransactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStableNairaTransactionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StableNairaTransaction{}
	if err = randomize.Struct(seed, o, stableNairaTransactionDBTypes, true, stableNairaTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StableNairaTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StableNairaTransactionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StableNairaTransactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStableNairaTransactionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StableNairaTransaction{}
	if err = randomize.Struct(seed, o, stableNairaTransactionDBTypes, true, stableNairaTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StableNairaTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := StableNairaTransactionExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if StableNairaTransaction exists: %s", err)
	}
	if !e {
		t.Errorf("Expected StableNairaTransactionExists to return true, but got false.")
	}
}

func testStableNairaTransactionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StableNairaTransaction{}
	if err = randomize.Struct(seed, o, stableNairaTransactionDBTypes, true, stableNairaTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StableNairaTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	stableNairaTransactionFound, err := FindStableNairaTransaction(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if stableNairaTransactionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testStableNairaTransactionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StableNairaTransaction{}
	if err = randomize.Struct(seed, o, stableNairaTransactionDBTypes, true, stableNairaTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StableNairaTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = StableNairaTransactions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testStableNairaTransactionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StableNairaTransaction{}
	if err = randomize.Struct(seed, o, stableNairaTransactionDBTypes, true, stableNairaTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StableNairaTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := StableNairaTransactions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testStableNairaTransactionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	stableNairaTransactionOne := &StableNairaTransaction{}
	stableNairaTransactionTwo := &StableNairaTransaction{}
	if err = randomize.Struct(seed, stableNairaTransactionOne, stableNairaTransactionDBTypes, false, stableNairaTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StableNairaTransaction struct: %s", err)
	}
	if err = randomize.Struct(seed, stableNairaTransactionTwo, stableNairaTransactionDBTypes, false, stableNairaTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StableNairaTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = stableNairaTransactionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = stableNairaTransactionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := StableNairaTransactions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testStableNairaTransactionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	stableNairaTransactionOne := &StableNairaTransaction{}
	stableNairaTransactionTwo := &StableNairaTransaction{}
	if err = randomize.Struct(seed, stableNairaTransactionOne, stableNairaTransactionDBTypes, false, stableNairaTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StableNairaTransaction struct: %s", err)
	}
	if err = randomize.Struct(seed, stableNairaTransactionTwo, stableNairaTransactionDBTypes, false, stableNairaTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StableNairaTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = stableNairaTransactionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = stableNairaTransactionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StableNairaTransactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testStableNairaTransactionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StableNairaTransaction{}
	if err = randomize.Struct(seed, o, stableNairaTransactionDBTypes, true, stableNairaTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StableNairaTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StableNairaTransactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStableNairaTransactionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StableNairaTransaction{}
	if err = randomize.Struct(seed, o, stableNairaTransactionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize StableNairaTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(stableNairaTransactionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := StableNairaTransactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStableNairaTransactionToManyTransactionStableNairaTransactionAssignments(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a StableNairaTransaction
	var b, c StableNairaTransactionAssignment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, stableNairaTransactionDBTypes, true, stableNairaTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StableNairaTransaction struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, stableNairaTransactionAssignmentDBTypes, false, stableNairaTransactionAssignmentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, stableNairaTransactionAssignmentDBTypes, false, stableNairaTransactionAssignmentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.TransactionID = a.ID
	c.TransactionID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.TransactionStableNairaTransactionAssignments().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.TransactionID == b.TransactionID {
			bFound = true
		}
		if v.TransactionID == c.TransactionID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := StableNairaTransactionSlice{&a}
	if err = a.L.LoadTransactionStableNairaTransactionAssignments(ctx, tx, false, (*[]*StableNairaTransaction)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TransactionStableNairaTransactionAssignments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.TransactionStableNairaTransactionAssignments = nil
	if err = a.L.LoadTransactionStableNairaTransactionAssignments(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TransactionStableNairaTransactionAssignments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testStableNairaTransactionToManyAddOpTransactionStableNairaTransactionAssignments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a StableNairaTransaction
	var b, c, d, e StableNairaTransactionAssignment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, stableNairaTransactionDBTypes, false, strmangle.SetComplement(stableNairaTransactionPrimaryKeyColumns, stableNairaTransactionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*StableNairaTransactionAssignment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, stableNairaTransactionAssignmentDBTypes, false, strmangle.SetComplement(stableNairaTransactionAssignmentPrimaryKeyColumns, stableNairaTransactionAssignmentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*StableNairaTransactionAssignment{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTransactionStableNairaTransactionAssignments(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.TransactionID {
			t.Error("foreign key was wrong value", a.ID, first.TransactionID)
		}
		if a.ID != second.TransactionID {
			t.Error("foreign key was wrong value", a.ID, second.TransactionID)
		}

		if first.R.Transaction != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Transaction != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.TransactionStableNairaTransactionAssignments[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.TransactionStableNairaTransactionAssignments[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.TransactionStableNairaTransactionAssignments().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testStableNairaTransactionToOneAccountUsingAccount(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local StableNairaTransaction
	var foreign Account

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, stableNairaTransactionDBTypes, false, stableNairaTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StableNairaTransaction struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, accountDBTypes, false, accountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.AccountID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Account().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := StableNairaTransactionSlice{&local}
	if err = local.L.LoadAccount(ctx, tx, false, (*[]*StableNairaTransaction)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Account == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Account = nil
	if err = local.L.LoadAccount(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Account == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testStableNairaTransactionToOneAgentUsingAgent(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local StableNairaTransaction
	var foreign Agent

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, stableNairaTransactionDBTypes, false, stableNairaTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StableNairaTransaction struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, agentDBTypes, false, agentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Agent struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.AgentID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Agent().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := StableNairaTransactionSlice{&local}
	if err = local.L.LoadAgent(ctx, tx, false, (*[]*StableNairaTransaction)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Agent == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Agent = nil
	if err = local.L.LoadAgent(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Agent == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testStableNairaTransactionToOneSetOpAccountUsingAccount(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a StableNairaTransaction
	var b, c Account

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, stableNairaTransactionDBTypes, false, strmangle.SetComplement(stableNairaTransactionPrimaryKeyColumns, stableNairaTransactionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, accountDBTypes, false, strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, accountDBTypes, false, strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Account{&b, &c} {
		err = a.SetAccount(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Account != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.StableNairaTransactions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AccountID != x.ID {
			t.Error("foreign key was wrong value", a.AccountID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AccountID))
		reflect.Indirect(reflect.ValueOf(&a.AccountID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.AccountID != x.ID {
			t.Error("foreign key was wrong value", a.AccountID, x.ID)
		}
	}
}
func testStableNairaTransactionToOneSetOpAgentUsingAgent(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a StableNairaTransaction
	var b, c Agent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, stableNairaTransactionDBTypes, false, strmangle.SetComplement(stableNairaTransactionPrimaryKeyColumns, stableNairaTransactionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, agentDBTypes, false, strmangle.SetComplement(agentPrimaryKeyColumns, agentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, agentDBTypes, false, strmangle.SetComplement(agentPrimaryKeyColumns, agentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Agent{&b, &c} {
		err = a.SetAgent(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Agent != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.StableNairaTransactions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AgentID != x.ID {
			t.Error("foreign key was wrong value", a.AgentID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AgentID))
		reflect.Indirect(reflect.ValueOf(&a.AgentID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.AgentID != x.ID {
			t.Error("foreign key was wrong value", a.AgentID, x.ID)
		}
	}
}

func testStableNairaTransactionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StableNairaTransaction{}
	if err = randomize.Struct(seed, o, stableNairaTransactionDBTypes, true, stableNairaTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StableNairaTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStableNairaTransactionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StableNairaTransaction{}
	if err = randomize.Struct(seed, o, stableNairaTransactionDBTypes, true, stableNairaTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StableNairaTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StableNairaTransactionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStableNairaTransactionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StableNairaTransaction{}
	if err = randomize.Struct(seed, o, stableNairaTransactionDBTypes, true, stableNairaTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StableNairaTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := StableNairaTransactions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	stableNairaTransactionDBTypes = map[string]string{`ID`: `uuid`, `AccountID`: `character varying`, `Amount`: `bigint`, `AmountReceivable`: `bigint`, `AgentID`: `integer`, `Date`: `bigint`, `PaymentDate`: `bigint`, `CompletionDate`: `bigint`}
	_                             = bytes.MinRead
)

func testStableNairaTransactionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(stableNairaTransactionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(stableNairaTransactionAllColumns) == len(stableNairaTransactionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &StableNairaTransaction{}
	if err = randomize.Struct(seed, o, stableNairaTransactionDBTypes, true, stableNairaTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StableNairaTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StableNairaTransactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, stableNairaTransactionDBTypes, true, stableNairaTransactionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StableNairaTransaction struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testStableNairaTransactionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(stableNairaTransactionAllColumns) == len(stableNairaTransactionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &StableNairaTransaction{}
	if err = randomize.Struct(seed, o, stableNairaTransactionDBTypes, true, stableNairaTransactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StableNairaTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StableNairaTransactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, stableNairaTransactionDBTypes, true, stableNairaTransactionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StableNairaTransaction struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(stableNairaTransactionAllColumns, stableNairaTransactionPrimaryKeyColumns) {
		fields = stableNairaTransactionAllColumns
	} else {
		fields = strmangle.SetComplement(
			stableNairaTransactionAllColumns,
			stableNairaTransactionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := StableNairaTransactionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testStableNairaTransactionsUpsert(t *testing.T) {
	t.Parallel()

	if len(stableNairaTransactionAllColumns) == len(stableNairaTransactionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := StableNairaTransaction{}
	if err = randomize.Struct(seed, &o, stableNairaTransactionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize StableNairaTransaction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert StableNairaTransaction: %s", err)
	}

	count, err := StableNairaTransactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, stableNairaTransactionDBTypes, false, stableNairaTransactionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StableNairaTransaction struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert StableNairaTransaction: %s", err)
	}

	count, err = StableNairaTransactions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
