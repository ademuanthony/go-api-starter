// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Beneficiary is an object representing the database table.
type Beneficiary struct {
	ID              string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	AccountID       null.String `boil:"account_id" json:"account_id,omitempty" toml:"account_id" yaml:"account_id,omitempty"`
	Bank            string      `boil:"bank" json:"bank" toml:"bank" yaml:"bank"`
	AccountNumber   string      `boil:"account_number" json:"account_number" toml:"account_number" yaml:"account_number"`
	AccountName     string      `boil:"account_name" json:"account_name" toml:"account_name" yaml:"account_name"`
	Country         string      `boil:"country" json:"country" toml:"country" yaml:"country"`
	BeneficialEmail string      `boil:"beneficial_email" json:"beneficial_email" toml:"beneficial_email" yaml:"beneficial_email"`
	PhoneNumber     string      `boil:"phone_number" json:"phone_number" toml:"phone_number" yaml:"phone_number"`
	SmartCardNumber string      `boil:"smart_card_number" json:"smart_card_number" toml:"smart_card_number" yaml:"smart_card_number"`
	MeterNumber     string      `boil:"meter_number" json:"meter_number" toml:"meter_number" yaml:"meter_number"`
	Type            int         `boil:"type" json:"type" toml:"type" yaml:"type"`
	Date            int64       `boil:"date" json:"date" toml:"date" yaml:"date"`

	R *beneficiaryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L beneficiaryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BeneficiaryColumns = struct {
	ID              string
	AccountID       string
	Bank            string
	AccountNumber   string
	AccountName     string
	Country         string
	BeneficialEmail string
	PhoneNumber     string
	SmartCardNumber string
	MeterNumber     string
	Type            string
	Date            string
}{
	ID:              "id",
	AccountID:       "account_id",
	Bank:            "bank",
	AccountNumber:   "account_number",
	AccountName:     "account_name",
	Country:         "country",
	BeneficialEmail: "beneficial_email",
	PhoneNumber:     "phone_number",
	SmartCardNumber: "smart_card_number",
	MeterNumber:     "meter_number",
	Type:            "type",
	Date:            "date",
}

var BeneficiaryTableColumns = struct {
	ID              string
	AccountID       string
	Bank            string
	AccountNumber   string
	AccountName     string
	Country         string
	BeneficialEmail string
	PhoneNumber     string
	SmartCardNumber string
	MeterNumber     string
	Type            string
	Date            string
}{
	ID:              "beneficiary.id",
	AccountID:       "beneficiary.account_id",
	Bank:            "beneficiary.bank",
	AccountNumber:   "beneficiary.account_number",
	AccountName:     "beneficiary.account_name",
	Country:         "beneficiary.country",
	BeneficialEmail: "beneficiary.beneficial_email",
	PhoneNumber:     "beneficiary.phone_number",
	SmartCardNumber: "beneficiary.smart_card_number",
	MeterNumber:     "beneficiary.meter_number",
	Type:            "beneficiary.type",
	Date:            "beneficiary.date",
}

// Generated where

var BeneficiaryWhere = struct {
	ID              whereHelperstring
	AccountID       whereHelpernull_String
	Bank            whereHelperstring
	AccountNumber   whereHelperstring
	AccountName     whereHelperstring
	Country         whereHelperstring
	BeneficialEmail whereHelperstring
	PhoneNumber     whereHelperstring
	SmartCardNumber whereHelperstring
	MeterNumber     whereHelperstring
	Type            whereHelperint
	Date            whereHelperint64
}{
	ID:              whereHelperstring{field: "\"beneficiary\".\"id\""},
	AccountID:       whereHelpernull_String{field: "\"beneficiary\".\"account_id\""},
	Bank:            whereHelperstring{field: "\"beneficiary\".\"bank\""},
	AccountNumber:   whereHelperstring{field: "\"beneficiary\".\"account_number\""},
	AccountName:     whereHelperstring{field: "\"beneficiary\".\"account_name\""},
	Country:         whereHelperstring{field: "\"beneficiary\".\"country\""},
	BeneficialEmail: whereHelperstring{field: "\"beneficiary\".\"beneficial_email\""},
	PhoneNumber:     whereHelperstring{field: "\"beneficiary\".\"phone_number\""},
	SmartCardNumber: whereHelperstring{field: "\"beneficiary\".\"smart_card_number\""},
	MeterNumber:     whereHelperstring{field: "\"beneficiary\".\"meter_number\""},
	Type:            whereHelperint{field: "\"beneficiary\".\"type\""},
	Date:            whereHelperint64{field: "\"beneficiary\".\"date\""},
}

// BeneficiaryRels is where relationship names are stored.
var BeneficiaryRels = struct {
	Account string
}{
	Account: "Account",
}

// beneficiaryR is where relationships are stored.
type beneficiaryR struct {
	Account *Account `boil:"Account" json:"Account" toml:"Account" yaml:"Account"`
}

// NewStruct creates a new relationship struct
func (*beneficiaryR) NewStruct() *beneficiaryR {
	return &beneficiaryR{}
}

// beneficiaryL is where Load methods for each relationship are stored.
type beneficiaryL struct{}

var (
	beneficiaryAllColumns            = []string{"id", "account_id", "bank", "account_number", "account_name", "country", "beneficial_email", "phone_number", "smart_card_number", "meter_number", "type", "date"}
	beneficiaryColumnsWithoutDefault = []string{"account_id", "bank", "account_number", "account_name", "country", "beneficial_email"}
	beneficiaryColumnsWithDefault    = []string{"id", "phone_number", "smart_card_number", "meter_number", "type", "date"}
	beneficiaryPrimaryKeyColumns     = []string{"id"}
)

type (
	// BeneficiarySlice is an alias for a slice of pointers to Beneficiary.
	// This should almost always be used instead of []Beneficiary.
	BeneficiarySlice []*Beneficiary

	beneficiaryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	beneficiaryType                 = reflect.TypeOf(&Beneficiary{})
	beneficiaryMapping              = queries.MakeStructMapping(beneficiaryType)
	beneficiaryPrimaryKeyMapping, _ = queries.BindMapping(beneficiaryType, beneficiaryMapping, beneficiaryPrimaryKeyColumns)
	beneficiaryInsertCacheMut       sync.RWMutex
	beneficiaryInsertCache          = make(map[string]insertCache)
	beneficiaryUpdateCacheMut       sync.RWMutex
	beneficiaryUpdateCache          = make(map[string]updateCache)
	beneficiaryUpsertCacheMut       sync.RWMutex
	beneficiaryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single beneficiary record from the query.
func (q beneficiaryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Beneficiary, error) {
	o := &Beneficiary{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for beneficiary")
	}

	return o, nil
}

// All returns all Beneficiary records from the query.
func (q beneficiaryQuery) All(ctx context.Context, exec boil.ContextExecutor) (BeneficiarySlice, error) {
	var o []*Beneficiary

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Beneficiary slice")
	}

	return o, nil
}

// Count returns the count of all Beneficiary records in the query.
func (q beneficiaryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count beneficiary rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q beneficiaryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if beneficiary exists")
	}

	return count > 0, nil
}

// Account pointed to by the foreign key.
func (o *Beneficiary) Account(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AccountID),
	}

	queryMods = append(queryMods, mods...)

	query := Accounts(queryMods...)
	queries.SetFrom(query.Query, "\"account\"")

	return query
}

// LoadAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (beneficiaryL) LoadAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBeneficiary interface{}, mods queries.Applicator) error {
	var slice []*Beneficiary
	var object *Beneficiary

	if singular {
		object = maybeBeneficiary.(*Beneficiary)
	} else {
		slice = *maybeBeneficiary.(*[]*Beneficiary)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &beneficiaryR{}
		}
		if !queries.IsNil(object.AccountID) {
			args = append(args, object.AccountID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &beneficiaryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AccountID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.AccountID) {
				args = append(args, obj.AccountID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`account`),
		qm.WhereIn(`account.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for account")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Account = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.Beneficiaries = append(foreign.R.Beneficiaries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AccountID, foreign.ID) {
				local.R.Account = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.Beneficiaries = append(foreign.R.Beneficiaries, local)
				break
			}
		}
	}

	return nil
}

// SetAccount of the beneficiary to the related item.
// Sets o.R.Account to related.
// Adds o to related.R.Beneficiaries.
func (o *Beneficiary) SetAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"beneficiary\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"account_id"}),
		strmangle.WhereClause("\"", "\"", 2, beneficiaryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AccountID, related.ID)
	if o.R == nil {
		o.R = &beneficiaryR{
			Account: related,
		}
	} else {
		o.R.Account = related
	}

	if related.R == nil {
		related.R = &accountR{
			Beneficiaries: BeneficiarySlice{o},
		}
	} else {
		related.R.Beneficiaries = append(related.R.Beneficiaries, o)
	}

	return nil
}

// RemoveAccount relationship.
// Sets o.R.Account to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Beneficiary) RemoveAccount(ctx context.Context, exec boil.ContextExecutor, related *Account) error {
	var err error

	queries.SetScanner(&o.AccountID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("account_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Account = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Beneficiaries {
		if queries.Equal(o.AccountID, ri.AccountID) {
			continue
		}

		ln := len(related.R.Beneficiaries)
		if ln > 1 && i < ln-1 {
			related.R.Beneficiaries[i] = related.R.Beneficiaries[ln-1]
		}
		related.R.Beneficiaries = related.R.Beneficiaries[:ln-1]
		break
	}
	return nil
}

// Beneficiaries retrieves all the records using an executor.
func Beneficiaries(mods ...qm.QueryMod) beneficiaryQuery {
	mods = append(mods, qm.From("\"beneficiary\""))
	return beneficiaryQuery{NewQuery(mods...)}
}

// FindBeneficiary retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBeneficiary(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Beneficiary, error) {
	beneficiaryObj := &Beneficiary{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"beneficiary\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, beneficiaryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from beneficiary")
	}

	return beneficiaryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Beneficiary) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no beneficiary provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(beneficiaryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	beneficiaryInsertCacheMut.RLock()
	cache, cached := beneficiaryInsertCache[key]
	beneficiaryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			beneficiaryAllColumns,
			beneficiaryColumnsWithDefault,
			beneficiaryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(beneficiaryType, beneficiaryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(beneficiaryType, beneficiaryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"beneficiary\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"beneficiary\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into beneficiary")
	}

	if !cached {
		beneficiaryInsertCacheMut.Lock()
		beneficiaryInsertCache[key] = cache
		beneficiaryInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Beneficiary.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Beneficiary) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	beneficiaryUpdateCacheMut.RLock()
	cache, cached := beneficiaryUpdateCache[key]
	beneficiaryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			beneficiaryAllColumns,
			beneficiaryPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update beneficiary, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"beneficiary\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, beneficiaryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(beneficiaryType, beneficiaryMapping, append(wl, beneficiaryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update beneficiary row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for beneficiary")
	}

	if !cached {
		beneficiaryUpdateCacheMut.Lock()
		beneficiaryUpdateCache[key] = cache
		beneficiaryUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q beneficiaryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for beneficiary")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for beneficiary")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BeneficiarySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), beneficiaryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"beneficiary\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, beneficiaryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in beneficiary slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all beneficiary")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Beneficiary) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no beneficiary provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(beneficiaryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	beneficiaryUpsertCacheMut.RLock()
	cache, cached := beneficiaryUpsertCache[key]
	beneficiaryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			beneficiaryAllColumns,
			beneficiaryColumnsWithDefault,
			beneficiaryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			beneficiaryAllColumns,
			beneficiaryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert beneficiary, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(beneficiaryPrimaryKeyColumns))
			copy(conflict, beneficiaryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"beneficiary\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(beneficiaryType, beneficiaryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(beneficiaryType, beneficiaryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert beneficiary")
	}

	if !cached {
		beneficiaryUpsertCacheMut.Lock()
		beneficiaryUpsertCache[key] = cache
		beneficiaryUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Beneficiary record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Beneficiary) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Beneficiary provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), beneficiaryPrimaryKeyMapping)
	sql := "DELETE FROM \"beneficiary\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from beneficiary")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for beneficiary")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q beneficiaryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no beneficiaryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from beneficiary")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for beneficiary")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BeneficiarySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), beneficiaryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"beneficiary\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, beneficiaryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from beneficiary slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for beneficiary")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Beneficiary) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBeneficiary(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BeneficiarySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BeneficiarySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), beneficiaryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"beneficiary\".* FROM \"beneficiary\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, beneficiaryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BeneficiarySlice")
	}

	*o = slice

	return nil
}

// BeneficiaryExists checks if the Beneficiary row exists.
func BeneficiaryExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"beneficiary\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if beneficiary exists")
	}

	return exists, nil
}
