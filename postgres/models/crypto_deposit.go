// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CryptoDeposit is an object representing the database table.
type CryptoDeposit struct {
	TransactionHash string `boil:"transaction_hash" json:"transaction_hash" toml:"transaction_hash" yaml:"transaction_hash"`
	WalletAddress   string `boil:"wallet_address" json:"wallet_address" toml:"wallet_address" yaml:"wallet_address"`
	TokenAmount     string `boil:"token_amount" json:"token_amount" toml:"token_amount" yaml:"token_amount"`
	BlockNumber     int64  `boil:"block_number" json:"block_number" toml:"block_number" yaml:"block_number"`
	Currency        string `boil:"currency" json:"currency" toml:"currency" yaml:"currency"`
	AccountID       string `boil:"account_id" json:"account_id" toml:"account_id" yaml:"account_id"`
	Date            int64  `boil:"date" json:"date" toml:"date" yaml:"date"`
	Network         string `boil:"network" json:"network" toml:"network" yaml:"network"`
	Status          string `boil:"status" json:"status" toml:"status" yaml:"status"`

	R *cryptoDepositR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cryptoDepositL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CryptoDepositColumns = struct {
	TransactionHash string
	WalletAddress   string
	TokenAmount     string
	BlockNumber     string
	Currency        string
	AccountID       string
	Date            string
	Network         string
	Status          string
}{
	TransactionHash: "transaction_hash",
	WalletAddress:   "wallet_address",
	TokenAmount:     "token_amount",
	BlockNumber:     "block_number",
	Currency:        "currency",
	AccountID:       "account_id",
	Date:            "date",
	Network:         "network",
	Status:          "status",
}

var CryptoDepositTableColumns = struct {
	TransactionHash string
	WalletAddress   string
	TokenAmount     string
	BlockNumber     string
	Currency        string
	AccountID       string
	Date            string
	Network         string
	Status          string
}{
	TransactionHash: "crypto_deposit.transaction_hash",
	WalletAddress:   "crypto_deposit.wallet_address",
	TokenAmount:     "crypto_deposit.token_amount",
	BlockNumber:     "crypto_deposit.block_number",
	Currency:        "crypto_deposit.currency",
	AccountID:       "crypto_deposit.account_id",
	Date:            "crypto_deposit.date",
	Network:         "crypto_deposit.network",
	Status:          "crypto_deposit.status",
}

// Generated where

var CryptoDepositWhere = struct {
	TransactionHash whereHelperstring
	WalletAddress   whereHelperstring
	TokenAmount     whereHelperstring
	BlockNumber     whereHelperint64
	Currency        whereHelperstring
	AccountID       whereHelperstring
	Date            whereHelperint64
	Network         whereHelperstring
	Status          whereHelperstring
}{
	TransactionHash: whereHelperstring{field: "\"crypto_deposit\".\"transaction_hash\""},
	WalletAddress:   whereHelperstring{field: "\"crypto_deposit\".\"wallet_address\""},
	TokenAmount:     whereHelperstring{field: "\"crypto_deposit\".\"token_amount\""},
	BlockNumber:     whereHelperint64{field: "\"crypto_deposit\".\"block_number\""},
	Currency:        whereHelperstring{field: "\"crypto_deposit\".\"currency\""},
	AccountID:       whereHelperstring{field: "\"crypto_deposit\".\"account_id\""},
	Date:            whereHelperint64{field: "\"crypto_deposit\".\"date\""},
	Network:         whereHelperstring{field: "\"crypto_deposit\".\"network\""},
	Status:          whereHelperstring{field: "\"crypto_deposit\".\"status\""},
}

// CryptoDepositRels is where relationship names are stored.
var CryptoDepositRels = struct {
	Account                    string
	WalletAddressDepositWallet string
}{
	Account:                    "Account",
	WalletAddressDepositWallet: "WalletAddressDepositWallet",
}

// cryptoDepositR is where relationships are stored.
type cryptoDepositR struct {
	Account                    *Account       `boil:"Account" json:"Account" toml:"Account" yaml:"Account"`
	WalletAddressDepositWallet *DepositWallet `boil:"WalletAddressDepositWallet" json:"WalletAddressDepositWallet" toml:"WalletAddressDepositWallet" yaml:"WalletAddressDepositWallet"`
}

// NewStruct creates a new relationship struct
func (*cryptoDepositR) NewStruct() *cryptoDepositR {
	return &cryptoDepositR{}
}

// cryptoDepositL is where Load methods for each relationship are stored.
type cryptoDepositL struct{}

var (
	cryptoDepositAllColumns            = []string{"transaction_hash", "wallet_address", "token_amount", "block_number", "currency", "account_id", "date", "network", "status"}
	cryptoDepositColumnsWithoutDefault = []string{"transaction_hash", "wallet_address", "token_amount", "block_number", "currency", "account_id", "date", "network", "status"}
	cryptoDepositColumnsWithDefault    = []string{}
	cryptoDepositPrimaryKeyColumns     = []string{"transaction_hash"}
)

type (
	// CryptoDepositSlice is an alias for a slice of pointers to CryptoDeposit.
	// This should almost always be used instead of []CryptoDeposit.
	CryptoDepositSlice []*CryptoDeposit

	cryptoDepositQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cryptoDepositType                 = reflect.TypeOf(&CryptoDeposit{})
	cryptoDepositMapping              = queries.MakeStructMapping(cryptoDepositType)
	cryptoDepositPrimaryKeyMapping, _ = queries.BindMapping(cryptoDepositType, cryptoDepositMapping, cryptoDepositPrimaryKeyColumns)
	cryptoDepositInsertCacheMut       sync.RWMutex
	cryptoDepositInsertCache          = make(map[string]insertCache)
	cryptoDepositUpdateCacheMut       sync.RWMutex
	cryptoDepositUpdateCache          = make(map[string]updateCache)
	cryptoDepositUpsertCacheMut       sync.RWMutex
	cryptoDepositUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single cryptoDeposit record from the query.
func (q cryptoDepositQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CryptoDeposit, error) {
	o := &CryptoDeposit{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for crypto_deposit")
	}

	return o, nil
}

// All returns all CryptoDeposit records from the query.
func (q cryptoDepositQuery) All(ctx context.Context, exec boil.ContextExecutor) (CryptoDepositSlice, error) {
	var o []*CryptoDeposit

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CryptoDeposit slice")
	}

	return o, nil
}

// Count returns the count of all CryptoDeposit records in the query.
func (q cryptoDepositQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count crypto_deposit rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cryptoDepositQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if crypto_deposit exists")
	}

	return count > 0, nil
}

// Account pointed to by the foreign key.
func (o *CryptoDeposit) Account(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AccountID),
	}

	queryMods = append(queryMods, mods...)

	query := Accounts(queryMods...)
	queries.SetFrom(query.Query, "\"account\"")

	return query
}

// WalletAddressDepositWallet pointed to by the foreign key.
func (o *CryptoDeposit) WalletAddressDepositWallet(mods ...qm.QueryMod) depositWalletQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"address\" = ?", o.WalletAddress),
	}

	queryMods = append(queryMods, mods...)

	query := DepositWallets(queryMods...)
	queries.SetFrom(query.Query, "\"deposit_wallet\"")

	return query
}

// LoadAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (cryptoDepositL) LoadAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCryptoDeposit interface{}, mods queries.Applicator) error {
	var slice []*CryptoDeposit
	var object *CryptoDeposit

	if singular {
		object = maybeCryptoDeposit.(*CryptoDeposit)
	} else {
		slice = *maybeCryptoDeposit.(*[]*CryptoDeposit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &cryptoDepositR{}
		}
		args = append(args, object.AccountID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &cryptoDepositR{}
			}

			for _, a := range args {
				if a == obj.AccountID {
					continue Outer
				}
			}

			args = append(args, obj.AccountID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`account`),
		qm.WhereIn(`account.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for account")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Account = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.CryptoDeposits = append(foreign.R.CryptoDeposits, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AccountID == foreign.ID {
				local.R.Account = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.CryptoDeposits = append(foreign.R.CryptoDeposits, local)
				break
			}
		}
	}

	return nil
}

// LoadWalletAddressDepositWallet allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (cryptoDepositL) LoadWalletAddressDepositWallet(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCryptoDeposit interface{}, mods queries.Applicator) error {
	var slice []*CryptoDeposit
	var object *CryptoDeposit

	if singular {
		object = maybeCryptoDeposit.(*CryptoDeposit)
	} else {
		slice = *maybeCryptoDeposit.(*[]*CryptoDeposit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &cryptoDepositR{}
		}
		args = append(args, object.WalletAddress)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &cryptoDepositR{}
			}

			for _, a := range args {
				if a == obj.WalletAddress {
					continue Outer
				}
			}

			args = append(args, obj.WalletAddress)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`deposit_wallet`),
		qm.WhereIn(`deposit_wallet.address in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DepositWallet")
	}

	var resultSlice []*DepositWallet
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DepositWallet")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for deposit_wallet")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for deposit_wallet")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.WalletAddressDepositWallet = foreign
		if foreign.R == nil {
			foreign.R = &depositWalletR{}
		}
		foreign.R.WalletAddressCryptoDeposits = append(foreign.R.WalletAddressCryptoDeposits, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.WalletAddress == foreign.Address {
				local.R.WalletAddressDepositWallet = foreign
				if foreign.R == nil {
					foreign.R = &depositWalletR{}
				}
				foreign.R.WalletAddressCryptoDeposits = append(foreign.R.WalletAddressCryptoDeposits, local)
				break
			}
		}
	}

	return nil
}

// SetAccount of the cryptoDeposit to the related item.
// Sets o.R.Account to related.
// Adds o to related.R.CryptoDeposits.
func (o *CryptoDeposit) SetAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"crypto_deposit\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"account_id"}),
		strmangle.WhereClause("\"", "\"", 2, cryptoDepositPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.TransactionHash}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AccountID = related.ID
	if o.R == nil {
		o.R = &cryptoDepositR{
			Account: related,
		}
	} else {
		o.R.Account = related
	}

	if related.R == nil {
		related.R = &accountR{
			CryptoDeposits: CryptoDepositSlice{o},
		}
	} else {
		related.R.CryptoDeposits = append(related.R.CryptoDeposits, o)
	}

	return nil
}

// SetWalletAddressDepositWallet of the cryptoDeposit to the related item.
// Sets o.R.WalletAddressDepositWallet to related.
// Adds o to related.R.WalletAddressCryptoDeposits.
func (o *CryptoDeposit) SetWalletAddressDepositWallet(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DepositWallet) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"crypto_deposit\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"wallet_address"}),
		strmangle.WhereClause("\"", "\"", 2, cryptoDepositPrimaryKeyColumns),
	)
	values := []interface{}{related.Address, o.TransactionHash}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.WalletAddress = related.Address
	if o.R == nil {
		o.R = &cryptoDepositR{
			WalletAddressDepositWallet: related,
		}
	} else {
		o.R.WalletAddressDepositWallet = related
	}

	if related.R == nil {
		related.R = &depositWalletR{
			WalletAddressCryptoDeposits: CryptoDepositSlice{o},
		}
	} else {
		related.R.WalletAddressCryptoDeposits = append(related.R.WalletAddressCryptoDeposits, o)
	}

	return nil
}

// CryptoDeposits retrieves all the records using an executor.
func CryptoDeposits(mods ...qm.QueryMod) cryptoDepositQuery {
	mods = append(mods, qm.From("\"crypto_deposit\""))
	return cryptoDepositQuery{NewQuery(mods...)}
}

// FindCryptoDeposit retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCryptoDeposit(ctx context.Context, exec boil.ContextExecutor, transactionHash string, selectCols ...string) (*CryptoDeposit, error) {
	cryptoDepositObj := &CryptoDeposit{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"crypto_deposit\" where \"transaction_hash\"=$1", sel,
	)

	q := queries.Raw(query, transactionHash)

	err := q.Bind(ctx, exec, cryptoDepositObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from crypto_deposit")
	}

	return cryptoDepositObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CryptoDeposit) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no crypto_deposit provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(cryptoDepositColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cryptoDepositInsertCacheMut.RLock()
	cache, cached := cryptoDepositInsertCache[key]
	cryptoDepositInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cryptoDepositAllColumns,
			cryptoDepositColumnsWithDefault,
			cryptoDepositColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cryptoDepositType, cryptoDepositMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cryptoDepositType, cryptoDepositMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"crypto_deposit\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"crypto_deposit\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into crypto_deposit")
	}

	if !cached {
		cryptoDepositInsertCacheMut.Lock()
		cryptoDepositInsertCache[key] = cache
		cryptoDepositInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the CryptoDeposit.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CryptoDeposit) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	cryptoDepositUpdateCacheMut.RLock()
	cache, cached := cryptoDepositUpdateCache[key]
	cryptoDepositUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cryptoDepositAllColumns,
			cryptoDepositPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update crypto_deposit, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"crypto_deposit\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, cryptoDepositPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cryptoDepositType, cryptoDepositMapping, append(wl, cryptoDepositPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update crypto_deposit row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for crypto_deposit")
	}

	if !cached {
		cryptoDepositUpdateCacheMut.Lock()
		cryptoDepositUpdateCache[key] = cache
		cryptoDepositUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q cryptoDepositQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for crypto_deposit")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for crypto_deposit")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CryptoDepositSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cryptoDepositPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"crypto_deposit\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, cryptoDepositPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cryptoDeposit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cryptoDeposit")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CryptoDeposit) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no crypto_deposit provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(cryptoDepositColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cryptoDepositUpsertCacheMut.RLock()
	cache, cached := cryptoDepositUpsertCache[key]
	cryptoDepositUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cryptoDepositAllColumns,
			cryptoDepositColumnsWithDefault,
			cryptoDepositColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cryptoDepositAllColumns,
			cryptoDepositPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert crypto_deposit, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(cryptoDepositPrimaryKeyColumns))
			copy(conflict, cryptoDepositPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"crypto_deposit\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(cryptoDepositType, cryptoDepositMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cryptoDepositType, cryptoDepositMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert crypto_deposit")
	}

	if !cached {
		cryptoDepositUpsertCacheMut.Lock()
		cryptoDepositUpsertCache[key] = cache
		cryptoDepositUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single CryptoDeposit record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CryptoDeposit) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CryptoDeposit provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cryptoDepositPrimaryKeyMapping)
	sql := "DELETE FROM \"crypto_deposit\" WHERE \"transaction_hash\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from crypto_deposit")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for crypto_deposit")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cryptoDepositQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cryptoDepositQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from crypto_deposit")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for crypto_deposit")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CryptoDepositSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cryptoDepositPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"crypto_deposit\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cryptoDepositPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cryptoDeposit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for crypto_deposit")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CryptoDeposit) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCryptoDeposit(ctx, exec, o.TransactionHash)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CryptoDepositSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CryptoDepositSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cryptoDepositPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"crypto_deposit\".* FROM \"crypto_deposit\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cryptoDepositPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CryptoDepositSlice")
	}

	*o = slice

	return nil
}

// CryptoDepositExists checks if the CryptoDeposit row exists.
func CryptoDepositExists(ctx context.Context, exec boil.ContextExecutor, transactionHash string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"crypto_deposit\" where \"transaction_hash\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, transactionHash)
	}
	row := exec.QueryRowContext(ctx, sql, transactionHash)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if crypto_deposit exists")
	}

	return exists, nil
}
