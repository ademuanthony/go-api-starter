// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Accounts", testAccounts)
	t.Run("AccountTransactions", testAccountTransactions)
	t.Run("Agents", testAgents)
	t.Run("Beneficiaries", testBeneficiaries)
	t.Run("CgoldHolders", testCgoldHolders)
	t.Run("CryptoAssets", testCryptoAssets)
	t.Run("CryptoDeposits", testCryptoDeposits)
	t.Run("Currencies", testCurrencies)
	t.Run("DailyEarnings", testDailyEarnings)
	t.Run("Deposits", testDeposits)
	t.Run("DepositWallets", testDepositWallets)
	t.Run("DFCHolders", testDFCHolders)
	t.Run("DFCWalletTransactions", testDFCWalletTransactions)
	t.Run("Investments", testInvestments)
	t.Run("KycForms", testKycForms)
	t.Run("LoginInfos", testLoginInfos)
	t.Run("NetworkCurrencies", testNetworkCurrencies)
	t.Run("Notifications", testNotifications)
	t.Run("Packages", testPackages)
	t.Run("PaymentLinks", testPaymentLinks)
	t.Run("ReferralPayouts", testReferralPayouts)
	t.Run("SecurityCodes", testSecurityCodes)
	t.Run("StableNairaTransactions", testStableNairaTransactions)
	t.Run("StableNairaTransactionAssignments", testStableNairaTransactionAssignments)
	t.Run("Subscriptions", testSubscriptions)
	t.Run("Trades", testTrades)
	t.Run("TradeHistories", testTradeHistories)
	t.Run("TradeSchedules", testTradeSchedules)
	t.Run("Transactions", testTransactions)
	t.Run("TransactionAssignments", testTransactionAssignments)
	t.Run("Transfers", testTransfers)
	t.Run("UserSettings", testUserSettings)
	t.Run("Wallets", testWallets)
	t.Run("WalletBalanaces", testWalletBalanaces)
	t.Run("WeeklyPayouts", testWeeklyPayouts)
	t.Run("Withdrawals", testWithdrawals)
}

func TestDelete(t *testing.T) {
	t.Run("Accounts", testAccountsDelete)
	t.Run("AccountTransactions", testAccountTransactionsDelete)
	t.Run("Agents", testAgentsDelete)
	t.Run("Beneficiaries", testBeneficiariesDelete)
	t.Run("CgoldHolders", testCgoldHoldersDelete)
	t.Run("CryptoAssets", testCryptoAssetsDelete)
	t.Run("CryptoDeposits", testCryptoDepositsDelete)
	t.Run("Currencies", testCurrenciesDelete)
	t.Run("DailyEarnings", testDailyEarningsDelete)
	t.Run("Deposits", testDepositsDelete)
	t.Run("DepositWallets", testDepositWalletsDelete)
	t.Run("DFCHolders", testDFCHoldersDelete)
	t.Run("DFCWalletTransactions", testDFCWalletTransactionsDelete)
	t.Run("Investments", testInvestmentsDelete)
	t.Run("KycForms", testKycFormsDelete)
	t.Run("LoginInfos", testLoginInfosDelete)
	t.Run("NetworkCurrencies", testNetworkCurrenciesDelete)
	t.Run("Notifications", testNotificationsDelete)
	t.Run("Packages", testPackagesDelete)
	t.Run("PaymentLinks", testPaymentLinksDelete)
	t.Run("ReferralPayouts", testReferralPayoutsDelete)
	t.Run("SecurityCodes", testSecurityCodesDelete)
	t.Run("StableNairaTransactions", testStableNairaTransactionsDelete)
	t.Run("StableNairaTransactionAssignments", testStableNairaTransactionAssignmentsDelete)
	t.Run("Subscriptions", testSubscriptionsDelete)
	t.Run("Trades", testTradesDelete)
	t.Run("TradeHistories", testTradeHistoriesDelete)
	t.Run("TradeSchedules", testTradeSchedulesDelete)
	t.Run("Transactions", testTransactionsDelete)
	t.Run("TransactionAssignments", testTransactionAssignmentsDelete)
	t.Run("Transfers", testTransfersDelete)
	t.Run("UserSettings", testUserSettingsDelete)
	t.Run("Wallets", testWalletsDelete)
	t.Run("WalletBalanaces", testWalletBalanacesDelete)
	t.Run("WeeklyPayouts", testWeeklyPayoutsDelete)
	t.Run("Withdrawals", testWithdrawalsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Accounts", testAccountsQueryDeleteAll)
	t.Run("AccountTransactions", testAccountTransactionsQueryDeleteAll)
	t.Run("Agents", testAgentsQueryDeleteAll)
	t.Run("Beneficiaries", testBeneficiariesQueryDeleteAll)
	t.Run("CgoldHolders", testCgoldHoldersQueryDeleteAll)
	t.Run("CryptoAssets", testCryptoAssetsQueryDeleteAll)
	t.Run("CryptoDeposits", testCryptoDepositsQueryDeleteAll)
	t.Run("Currencies", testCurrenciesQueryDeleteAll)
	t.Run("DailyEarnings", testDailyEarningsQueryDeleteAll)
	t.Run("Deposits", testDepositsQueryDeleteAll)
	t.Run("DepositWallets", testDepositWalletsQueryDeleteAll)
	t.Run("DFCHolders", testDFCHoldersQueryDeleteAll)
	t.Run("DFCWalletTransactions", testDFCWalletTransactionsQueryDeleteAll)
	t.Run("Investments", testInvestmentsQueryDeleteAll)
	t.Run("KycForms", testKycFormsQueryDeleteAll)
	t.Run("LoginInfos", testLoginInfosQueryDeleteAll)
	t.Run("NetworkCurrencies", testNetworkCurrenciesQueryDeleteAll)
	t.Run("Notifications", testNotificationsQueryDeleteAll)
	t.Run("Packages", testPackagesQueryDeleteAll)
	t.Run("PaymentLinks", testPaymentLinksQueryDeleteAll)
	t.Run("ReferralPayouts", testReferralPayoutsQueryDeleteAll)
	t.Run("SecurityCodes", testSecurityCodesQueryDeleteAll)
	t.Run("StableNairaTransactions", testStableNairaTransactionsQueryDeleteAll)
	t.Run("StableNairaTransactionAssignments", testStableNairaTransactionAssignmentsQueryDeleteAll)
	t.Run("Subscriptions", testSubscriptionsQueryDeleteAll)
	t.Run("Trades", testTradesQueryDeleteAll)
	t.Run("TradeHistories", testTradeHistoriesQueryDeleteAll)
	t.Run("TradeSchedules", testTradeSchedulesQueryDeleteAll)
	t.Run("Transactions", testTransactionsQueryDeleteAll)
	t.Run("TransactionAssignments", testTransactionAssignmentsQueryDeleteAll)
	t.Run("Transfers", testTransfersQueryDeleteAll)
	t.Run("UserSettings", testUserSettingsQueryDeleteAll)
	t.Run("Wallets", testWalletsQueryDeleteAll)
	t.Run("WalletBalanaces", testWalletBalanacesQueryDeleteAll)
	t.Run("WeeklyPayouts", testWeeklyPayoutsQueryDeleteAll)
	t.Run("Withdrawals", testWithdrawalsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Accounts", testAccountsSliceDeleteAll)
	t.Run("AccountTransactions", testAccountTransactionsSliceDeleteAll)
	t.Run("Agents", testAgentsSliceDeleteAll)
	t.Run("Beneficiaries", testBeneficiariesSliceDeleteAll)
	t.Run("CgoldHolders", testCgoldHoldersSliceDeleteAll)
	t.Run("CryptoAssets", testCryptoAssetsSliceDeleteAll)
	t.Run("CryptoDeposits", testCryptoDepositsSliceDeleteAll)
	t.Run("Currencies", testCurrenciesSliceDeleteAll)
	t.Run("DailyEarnings", testDailyEarningsSliceDeleteAll)
	t.Run("Deposits", testDepositsSliceDeleteAll)
	t.Run("DepositWallets", testDepositWalletsSliceDeleteAll)
	t.Run("DFCHolders", testDFCHoldersSliceDeleteAll)
	t.Run("DFCWalletTransactions", testDFCWalletTransactionsSliceDeleteAll)
	t.Run("Investments", testInvestmentsSliceDeleteAll)
	t.Run("KycForms", testKycFormsSliceDeleteAll)
	t.Run("LoginInfos", testLoginInfosSliceDeleteAll)
	t.Run("NetworkCurrencies", testNetworkCurrenciesSliceDeleteAll)
	t.Run("Notifications", testNotificationsSliceDeleteAll)
	t.Run("Packages", testPackagesSliceDeleteAll)
	t.Run("PaymentLinks", testPaymentLinksSliceDeleteAll)
	t.Run("ReferralPayouts", testReferralPayoutsSliceDeleteAll)
	t.Run("SecurityCodes", testSecurityCodesSliceDeleteAll)
	t.Run("StableNairaTransactions", testStableNairaTransactionsSliceDeleteAll)
	t.Run("StableNairaTransactionAssignments", testStableNairaTransactionAssignmentsSliceDeleteAll)
	t.Run("Subscriptions", testSubscriptionsSliceDeleteAll)
	t.Run("Trades", testTradesSliceDeleteAll)
	t.Run("TradeHistories", testTradeHistoriesSliceDeleteAll)
	t.Run("TradeSchedules", testTradeSchedulesSliceDeleteAll)
	t.Run("Transactions", testTransactionsSliceDeleteAll)
	t.Run("TransactionAssignments", testTransactionAssignmentsSliceDeleteAll)
	t.Run("Transfers", testTransfersSliceDeleteAll)
	t.Run("UserSettings", testUserSettingsSliceDeleteAll)
	t.Run("Wallets", testWalletsSliceDeleteAll)
	t.Run("WalletBalanaces", testWalletBalanacesSliceDeleteAll)
	t.Run("WeeklyPayouts", testWeeklyPayoutsSliceDeleteAll)
	t.Run("Withdrawals", testWithdrawalsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Accounts", testAccountsExists)
	t.Run("AccountTransactions", testAccountTransactionsExists)
	t.Run("Agents", testAgentsExists)
	t.Run("Beneficiaries", testBeneficiariesExists)
	t.Run("CgoldHolders", testCgoldHoldersExists)
	t.Run("CryptoAssets", testCryptoAssetsExists)
	t.Run("CryptoDeposits", testCryptoDepositsExists)
	t.Run("Currencies", testCurrenciesExists)
	t.Run("DailyEarnings", testDailyEarningsExists)
	t.Run("Deposits", testDepositsExists)
	t.Run("DepositWallets", testDepositWalletsExists)
	t.Run("DFCHolders", testDFCHoldersExists)
	t.Run("DFCWalletTransactions", testDFCWalletTransactionsExists)
	t.Run("Investments", testInvestmentsExists)
	t.Run("KycForms", testKycFormsExists)
	t.Run("LoginInfos", testLoginInfosExists)
	t.Run("NetworkCurrencies", testNetworkCurrenciesExists)
	t.Run("Notifications", testNotificationsExists)
	t.Run("Packages", testPackagesExists)
	t.Run("PaymentLinks", testPaymentLinksExists)
	t.Run("ReferralPayouts", testReferralPayoutsExists)
	t.Run("SecurityCodes", testSecurityCodesExists)
	t.Run("StableNairaTransactions", testStableNairaTransactionsExists)
	t.Run("StableNairaTransactionAssignments", testStableNairaTransactionAssignmentsExists)
	t.Run("Subscriptions", testSubscriptionsExists)
	t.Run("Trades", testTradesExists)
	t.Run("TradeHistories", testTradeHistoriesExists)
	t.Run("TradeSchedules", testTradeSchedulesExists)
	t.Run("Transactions", testTransactionsExists)
	t.Run("TransactionAssignments", testTransactionAssignmentsExists)
	t.Run("Transfers", testTransfersExists)
	t.Run("UserSettings", testUserSettingsExists)
	t.Run("Wallets", testWalletsExists)
	t.Run("WalletBalanaces", testWalletBalanacesExists)
	t.Run("WeeklyPayouts", testWeeklyPayoutsExists)
	t.Run("Withdrawals", testWithdrawalsExists)
}

func TestFind(t *testing.T) {
	t.Run("Accounts", testAccountsFind)
	t.Run("AccountTransactions", testAccountTransactionsFind)
	t.Run("Agents", testAgentsFind)
	t.Run("Beneficiaries", testBeneficiariesFind)
	t.Run("CgoldHolders", testCgoldHoldersFind)
	t.Run("CryptoAssets", testCryptoAssetsFind)
	t.Run("CryptoDeposits", testCryptoDepositsFind)
	t.Run("Currencies", testCurrenciesFind)
	t.Run("DailyEarnings", testDailyEarningsFind)
	t.Run("Deposits", testDepositsFind)
	t.Run("DepositWallets", testDepositWalletsFind)
	t.Run("DFCHolders", testDFCHoldersFind)
	t.Run("DFCWalletTransactions", testDFCWalletTransactionsFind)
	t.Run("Investments", testInvestmentsFind)
	t.Run("KycForms", testKycFormsFind)
	t.Run("LoginInfos", testLoginInfosFind)
	t.Run("NetworkCurrencies", testNetworkCurrenciesFind)
	t.Run("Notifications", testNotificationsFind)
	t.Run("Packages", testPackagesFind)
	t.Run("PaymentLinks", testPaymentLinksFind)
	t.Run("ReferralPayouts", testReferralPayoutsFind)
	t.Run("SecurityCodes", testSecurityCodesFind)
	t.Run("StableNairaTransactions", testStableNairaTransactionsFind)
	t.Run("StableNairaTransactionAssignments", testStableNairaTransactionAssignmentsFind)
	t.Run("Subscriptions", testSubscriptionsFind)
	t.Run("Trades", testTradesFind)
	t.Run("TradeHistories", testTradeHistoriesFind)
	t.Run("TradeSchedules", testTradeSchedulesFind)
	t.Run("Transactions", testTransactionsFind)
	t.Run("TransactionAssignments", testTransactionAssignmentsFind)
	t.Run("Transfers", testTransfersFind)
	t.Run("UserSettings", testUserSettingsFind)
	t.Run("Wallets", testWalletsFind)
	t.Run("WalletBalanaces", testWalletBalanacesFind)
	t.Run("WeeklyPayouts", testWeeklyPayoutsFind)
	t.Run("Withdrawals", testWithdrawalsFind)
}

func TestBind(t *testing.T) {
	t.Run("Accounts", testAccountsBind)
	t.Run("AccountTransactions", testAccountTransactionsBind)
	t.Run("Agents", testAgentsBind)
	t.Run("Beneficiaries", testBeneficiariesBind)
	t.Run("CgoldHolders", testCgoldHoldersBind)
	t.Run("CryptoAssets", testCryptoAssetsBind)
	t.Run("CryptoDeposits", testCryptoDepositsBind)
	t.Run("Currencies", testCurrenciesBind)
	t.Run("DailyEarnings", testDailyEarningsBind)
	t.Run("Deposits", testDepositsBind)
	t.Run("DepositWallets", testDepositWalletsBind)
	t.Run("DFCHolders", testDFCHoldersBind)
	t.Run("DFCWalletTransactions", testDFCWalletTransactionsBind)
	t.Run("Investments", testInvestmentsBind)
	t.Run("KycForms", testKycFormsBind)
	t.Run("LoginInfos", testLoginInfosBind)
	t.Run("NetworkCurrencies", testNetworkCurrenciesBind)
	t.Run("Notifications", testNotificationsBind)
	t.Run("Packages", testPackagesBind)
	t.Run("PaymentLinks", testPaymentLinksBind)
	t.Run("ReferralPayouts", testReferralPayoutsBind)
	t.Run("SecurityCodes", testSecurityCodesBind)
	t.Run("StableNairaTransactions", testStableNairaTransactionsBind)
	t.Run("StableNairaTransactionAssignments", testStableNairaTransactionAssignmentsBind)
	t.Run("Subscriptions", testSubscriptionsBind)
	t.Run("Trades", testTradesBind)
	t.Run("TradeHistories", testTradeHistoriesBind)
	t.Run("TradeSchedules", testTradeSchedulesBind)
	t.Run("Transactions", testTransactionsBind)
	t.Run("TransactionAssignments", testTransactionAssignmentsBind)
	t.Run("Transfers", testTransfersBind)
	t.Run("UserSettings", testUserSettingsBind)
	t.Run("Wallets", testWalletsBind)
	t.Run("WalletBalanaces", testWalletBalanacesBind)
	t.Run("WeeklyPayouts", testWeeklyPayoutsBind)
	t.Run("Withdrawals", testWithdrawalsBind)
}

func TestOne(t *testing.T) {
	t.Run("Accounts", testAccountsOne)
	t.Run("AccountTransactions", testAccountTransactionsOne)
	t.Run("Agents", testAgentsOne)
	t.Run("Beneficiaries", testBeneficiariesOne)
	t.Run("CgoldHolders", testCgoldHoldersOne)
	t.Run("CryptoAssets", testCryptoAssetsOne)
	t.Run("CryptoDeposits", testCryptoDepositsOne)
	t.Run("Currencies", testCurrenciesOne)
	t.Run("DailyEarnings", testDailyEarningsOne)
	t.Run("Deposits", testDepositsOne)
	t.Run("DepositWallets", testDepositWalletsOne)
	t.Run("DFCHolders", testDFCHoldersOne)
	t.Run("DFCWalletTransactions", testDFCWalletTransactionsOne)
	t.Run("Investments", testInvestmentsOne)
	t.Run("KycForms", testKycFormsOne)
	t.Run("LoginInfos", testLoginInfosOne)
	t.Run("NetworkCurrencies", testNetworkCurrenciesOne)
	t.Run("Notifications", testNotificationsOne)
	t.Run("Packages", testPackagesOne)
	t.Run("PaymentLinks", testPaymentLinksOne)
	t.Run("ReferralPayouts", testReferralPayoutsOne)
	t.Run("SecurityCodes", testSecurityCodesOne)
	t.Run("StableNairaTransactions", testStableNairaTransactionsOne)
	t.Run("StableNairaTransactionAssignments", testStableNairaTransactionAssignmentsOne)
	t.Run("Subscriptions", testSubscriptionsOne)
	t.Run("Trades", testTradesOne)
	t.Run("TradeHistories", testTradeHistoriesOne)
	t.Run("TradeSchedules", testTradeSchedulesOne)
	t.Run("Transactions", testTransactionsOne)
	t.Run("TransactionAssignments", testTransactionAssignmentsOne)
	t.Run("Transfers", testTransfersOne)
	t.Run("UserSettings", testUserSettingsOne)
	t.Run("Wallets", testWalletsOne)
	t.Run("WalletBalanaces", testWalletBalanacesOne)
	t.Run("WeeklyPayouts", testWeeklyPayoutsOne)
	t.Run("Withdrawals", testWithdrawalsOne)
}

func TestAll(t *testing.T) {
	t.Run("Accounts", testAccountsAll)
	t.Run("AccountTransactions", testAccountTransactionsAll)
	t.Run("Agents", testAgentsAll)
	t.Run("Beneficiaries", testBeneficiariesAll)
	t.Run("CgoldHolders", testCgoldHoldersAll)
	t.Run("CryptoAssets", testCryptoAssetsAll)
	t.Run("CryptoDeposits", testCryptoDepositsAll)
	t.Run("Currencies", testCurrenciesAll)
	t.Run("DailyEarnings", testDailyEarningsAll)
	t.Run("Deposits", testDepositsAll)
	t.Run("DepositWallets", testDepositWalletsAll)
	t.Run("DFCHolders", testDFCHoldersAll)
	t.Run("DFCWalletTransactions", testDFCWalletTransactionsAll)
	t.Run("Investments", testInvestmentsAll)
	t.Run("KycForms", testKycFormsAll)
	t.Run("LoginInfos", testLoginInfosAll)
	t.Run("NetworkCurrencies", testNetworkCurrenciesAll)
	t.Run("Notifications", testNotificationsAll)
	t.Run("Packages", testPackagesAll)
	t.Run("PaymentLinks", testPaymentLinksAll)
	t.Run("ReferralPayouts", testReferralPayoutsAll)
	t.Run("SecurityCodes", testSecurityCodesAll)
	t.Run("StableNairaTransactions", testStableNairaTransactionsAll)
	t.Run("StableNairaTransactionAssignments", testStableNairaTransactionAssignmentsAll)
	t.Run("Subscriptions", testSubscriptionsAll)
	t.Run("Trades", testTradesAll)
	t.Run("TradeHistories", testTradeHistoriesAll)
	t.Run("TradeSchedules", testTradeSchedulesAll)
	t.Run("Transactions", testTransactionsAll)
	t.Run("TransactionAssignments", testTransactionAssignmentsAll)
	t.Run("Transfers", testTransfersAll)
	t.Run("UserSettings", testUserSettingsAll)
	t.Run("Wallets", testWalletsAll)
	t.Run("WalletBalanaces", testWalletBalanacesAll)
	t.Run("WeeklyPayouts", testWeeklyPayoutsAll)
	t.Run("Withdrawals", testWithdrawalsAll)
}

func TestCount(t *testing.T) {
	t.Run("Accounts", testAccountsCount)
	t.Run("AccountTransactions", testAccountTransactionsCount)
	t.Run("Agents", testAgentsCount)
	t.Run("Beneficiaries", testBeneficiariesCount)
	t.Run("CgoldHolders", testCgoldHoldersCount)
	t.Run("CryptoAssets", testCryptoAssetsCount)
	t.Run("CryptoDeposits", testCryptoDepositsCount)
	t.Run("Currencies", testCurrenciesCount)
	t.Run("DailyEarnings", testDailyEarningsCount)
	t.Run("Deposits", testDepositsCount)
	t.Run("DepositWallets", testDepositWalletsCount)
	t.Run("DFCHolders", testDFCHoldersCount)
	t.Run("DFCWalletTransactions", testDFCWalletTransactionsCount)
	t.Run("Investments", testInvestmentsCount)
	t.Run("KycForms", testKycFormsCount)
	t.Run("LoginInfos", testLoginInfosCount)
	t.Run("NetworkCurrencies", testNetworkCurrenciesCount)
	t.Run("Notifications", testNotificationsCount)
	t.Run("Packages", testPackagesCount)
	t.Run("PaymentLinks", testPaymentLinksCount)
	t.Run("ReferralPayouts", testReferralPayoutsCount)
	t.Run("SecurityCodes", testSecurityCodesCount)
	t.Run("StableNairaTransactions", testStableNairaTransactionsCount)
	t.Run("StableNairaTransactionAssignments", testStableNairaTransactionAssignmentsCount)
	t.Run("Subscriptions", testSubscriptionsCount)
	t.Run("Trades", testTradesCount)
	t.Run("TradeHistories", testTradeHistoriesCount)
	t.Run("TradeSchedules", testTradeSchedulesCount)
	t.Run("Transactions", testTransactionsCount)
	t.Run("TransactionAssignments", testTransactionAssignmentsCount)
	t.Run("Transfers", testTransfersCount)
	t.Run("UserSettings", testUserSettingsCount)
	t.Run("Wallets", testWalletsCount)
	t.Run("WalletBalanaces", testWalletBalanacesCount)
	t.Run("WeeklyPayouts", testWeeklyPayoutsCount)
	t.Run("Withdrawals", testWithdrawalsCount)
}

func TestInsert(t *testing.T) {
	t.Run("Accounts", testAccountsInsert)
	t.Run("Accounts", testAccountsInsertWhitelist)
	t.Run("AccountTransactions", testAccountTransactionsInsert)
	t.Run("AccountTransactions", testAccountTransactionsInsertWhitelist)
	t.Run("Agents", testAgentsInsert)
	t.Run("Agents", testAgentsInsertWhitelist)
	t.Run("Beneficiaries", testBeneficiariesInsert)
	t.Run("Beneficiaries", testBeneficiariesInsertWhitelist)
	t.Run("CgoldHolders", testCgoldHoldersInsert)
	t.Run("CgoldHolders", testCgoldHoldersInsertWhitelist)
	t.Run("CryptoAssets", testCryptoAssetsInsert)
	t.Run("CryptoAssets", testCryptoAssetsInsertWhitelist)
	t.Run("CryptoDeposits", testCryptoDepositsInsert)
	t.Run("CryptoDeposits", testCryptoDepositsInsertWhitelist)
	t.Run("Currencies", testCurrenciesInsert)
	t.Run("Currencies", testCurrenciesInsertWhitelist)
	t.Run("DailyEarnings", testDailyEarningsInsert)
	t.Run("DailyEarnings", testDailyEarningsInsertWhitelist)
	t.Run("Deposits", testDepositsInsert)
	t.Run("Deposits", testDepositsInsertWhitelist)
	t.Run("DepositWallets", testDepositWalletsInsert)
	t.Run("DepositWallets", testDepositWalletsInsertWhitelist)
	t.Run("DFCHolders", testDFCHoldersInsert)
	t.Run("DFCHolders", testDFCHoldersInsertWhitelist)
	t.Run("DFCWalletTransactions", testDFCWalletTransactionsInsert)
	t.Run("DFCWalletTransactions", testDFCWalletTransactionsInsertWhitelist)
	t.Run("Investments", testInvestmentsInsert)
	t.Run("Investments", testInvestmentsInsertWhitelist)
	t.Run("KycForms", testKycFormsInsert)
	t.Run("KycForms", testKycFormsInsertWhitelist)
	t.Run("LoginInfos", testLoginInfosInsert)
	t.Run("LoginInfos", testLoginInfosInsertWhitelist)
	t.Run("NetworkCurrencies", testNetworkCurrenciesInsert)
	t.Run("NetworkCurrencies", testNetworkCurrenciesInsertWhitelist)
	t.Run("Notifications", testNotificationsInsert)
	t.Run("Notifications", testNotificationsInsertWhitelist)
	t.Run("Packages", testPackagesInsert)
	t.Run("Packages", testPackagesInsertWhitelist)
	t.Run("PaymentLinks", testPaymentLinksInsert)
	t.Run("PaymentLinks", testPaymentLinksInsertWhitelist)
	t.Run("ReferralPayouts", testReferralPayoutsInsert)
	t.Run("ReferralPayouts", testReferralPayoutsInsertWhitelist)
	t.Run("SecurityCodes", testSecurityCodesInsert)
	t.Run("SecurityCodes", testSecurityCodesInsertWhitelist)
	t.Run("StableNairaTransactions", testStableNairaTransactionsInsert)
	t.Run("StableNairaTransactions", testStableNairaTransactionsInsertWhitelist)
	t.Run("StableNairaTransactionAssignments", testStableNairaTransactionAssignmentsInsert)
	t.Run("StableNairaTransactionAssignments", testStableNairaTransactionAssignmentsInsertWhitelist)
	t.Run("Subscriptions", testSubscriptionsInsert)
	t.Run("Subscriptions", testSubscriptionsInsertWhitelist)
	t.Run("Trades", testTradesInsert)
	t.Run("Trades", testTradesInsertWhitelist)
	t.Run("TradeHistories", testTradeHistoriesInsert)
	t.Run("TradeHistories", testTradeHistoriesInsertWhitelist)
	t.Run("TradeSchedules", testTradeSchedulesInsert)
	t.Run("TradeSchedules", testTradeSchedulesInsertWhitelist)
	t.Run("Transactions", testTransactionsInsert)
	t.Run("Transactions", testTransactionsInsertWhitelist)
	t.Run("TransactionAssignments", testTransactionAssignmentsInsert)
	t.Run("TransactionAssignments", testTransactionAssignmentsInsertWhitelist)
	t.Run("Transfers", testTransfersInsert)
	t.Run("Transfers", testTransfersInsertWhitelist)
	t.Run("UserSettings", testUserSettingsInsert)
	t.Run("UserSettings", testUserSettingsInsertWhitelist)
	t.Run("Wallets", testWalletsInsert)
	t.Run("Wallets", testWalletsInsertWhitelist)
	t.Run("WalletBalanaces", testWalletBalanacesInsert)
	t.Run("WalletBalanaces", testWalletBalanacesInsertWhitelist)
	t.Run("WeeklyPayouts", testWeeklyPayoutsInsert)
	t.Run("WeeklyPayouts", testWeeklyPayoutsInsertWhitelist)
	t.Run("Withdrawals", testWithdrawalsInsert)
	t.Run("Withdrawals", testWithdrawalsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("AccountTransactionToAccountUsingAccount", testAccountTransactionToOneAccountUsingAccount)
	t.Run("BeneficiaryToAccountUsingAccount", testBeneficiaryToOneAccountUsingAccount)
	t.Run("CryptoAssetToAccountUsingAccount", testCryptoAssetToOneAccountUsingAccount)
	t.Run("CryptoDepositToAccountUsingAccount", testCryptoDepositToOneAccountUsingAccount)
	t.Run("CryptoDepositToDepositWalletUsingWalletAddressDepositWallet", testCryptoDepositToOneDepositWalletUsingWalletAddressDepositWallet)
	t.Run("DailyEarningToAccountUsingAccount", testDailyEarningToOneAccountUsingAccount)
	t.Run("DepositToAccountUsingAccount", testDepositToOneAccountUsingAccount)
	t.Run("DepositWalletToAccountUsingAccount", testDepositWalletToOneAccountUsingAccount)
	t.Run("InvestmentToAccountUsingAccount", testInvestmentToOneAccountUsingAccount)
	t.Run("LoginInfoToAccountUsingAccount", testLoginInfoToOneAccountUsingAccount)
	t.Run("NetworkCurrencyToCurrencyUsingSymbolCurrency", testNetworkCurrencyToOneCurrencyUsingSymbolCurrency)
	t.Run("NotificationToAccountUsingAccount", testNotificationToOneAccountUsingAccount)
	t.Run("PaymentLinkToAccountUsingAccount", testPaymentLinkToOneAccountUsingAccount)
	t.Run("ReferralPayoutToAccountUsingAccount", testReferralPayoutToOneAccountUsingAccount)
	t.Run("ReferralPayoutToAccountUsingFromAccount", testReferralPayoutToOneAccountUsingFromAccount)
	t.Run("ReferralPayoutToSubscriptionUsingSubscription", testReferralPayoutToOneSubscriptionUsingSubscription)
	t.Run("SecurityCodeToAccountUsingAccount", testSecurityCodeToOneAccountUsingAccount)
	t.Run("StableNairaTransactionToAccountUsingAccount", testStableNairaTransactionToOneAccountUsingAccount)
	t.Run("StableNairaTransactionToAgentUsingAgent", testStableNairaTransactionToOneAgentUsingAgent)
	t.Run("StableNairaTransactionAssignmentToAgentUsingAgent", testStableNairaTransactionAssignmentToOneAgentUsingAgent)
	t.Run("StableNairaTransactionAssignmentToStableNairaTransactionUsingTransaction", testStableNairaTransactionAssignmentToOneStableNairaTransactionUsingTransaction)
	t.Run("SubscriptionToAccountUsingAccount", testSubscriptionToOneAccountUsingAccount)
	t.Run("SubscriptionToPackageUsingPackage", testSubscriptionToOnePackageUsingPackage)
	t.Run("TradeToAccountUsingAccount", testTradeToOneAccountUsingAccount)
	t.Run("TradeScheduleToAccountUsingAccount", testTradeScheduleToOneAccountUsingAccount)
	t.Run("TransactionAssignmentToAgentUsingAgent", testTransactionAssignmentToOneAgentUsingAgent)
	t.Run("TransactionAssignmentToTransactionUsingTransaction", testTransactionAssignmentToOneTransactionUsingTransaction)
	t.Run("TransferToAccountUsingReceiver", testTransferToOneAccountUsingReceiver)
	t.Run("TransferToAccountUsingSender", testTransferToOneAccountUsingSender)
	t.Run("UserSettingToAccountUsingAccount", testUserSettingToOneAccountUsingAccount)
	t.Run("WalletToAccountUsingAccount", testWalletToOneAccountUsingAccount)
	t.Run("WalletBalanaceToDepositWalletUsingWalletAddressDepositWallet", testWalletBalanaceToOneDepositWalletUsingWalletAddressDepositWallet)
	t.Run("WithdrawalToAccountUsingAccount", testWithdrawalToOneAccountUsingAccount)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("AccountToAccountTransactions", testAccountToManyAccountTransactions)
	t.Run("AccountToBeneficiaries", testAccountToManyBeneficiaries)
	t.Run("AccountToCryptoAssets", testAccountToManyCryptoAssets)
	t.Run("AccountToCryptoDeposits", testAccountToManyCryptoDeposits)
	t.Run("AccountToDailyEarnings", testAccountToManyDailyEarnings)
	t.Run("AccountToDeposits", testAccountToManyDeposits)
	t.Run("AccountToDepositWallets", testAccountToManyDepositWallets)
	t.Run("AccountToInvestments", testAccountToManyInvestments)
	t.Run("AccountToLoginInfos", testAccountToManyLoginInfos)
	t.Run("AccountToNotifications", testAccountToManyNotifications)
	t.Run("AccountToPaymentLinks", testAccountToManyPaymentLinks)
	t.Run("AccountToReferralPayouts", testAccountToManyReferralPayouts)
	t.Run("AccountToFromAccountReferralPayouts", testAccountToManyFromAccountReferralPayouts)
	t.Run("AccountToSecurityCodes", testAccountToManySecurityCodes)
	t.Run("AccountToStableNairaTransactions", testAccountToManyStableNairaTransactions)
	t.Run("AccountToSubscriptions", testAccountToManySubscriptions)
	t.Run("AccountToTrades", testAccountToManyTrades)
	t.Run("AccountToTradeSchedules", testAccountToManyTradeSchedules)
	t.Run("AccountToReceiverTransfers", testAccountToManyReceiverTransfers)
	t.Run("AccountToSenderTransfers", testAccountToManySenderTransfers)
	t.Run("AccountToUserSettings", testAccountToManyUserSettings)
	t.Run("AccountToWallets", testAccountToManyWallets)
	t.Run("AccountToWithdrawals", testAccountToManyWithdrawals)
	t.Run("AgentToStableNairaTransactions", testAgentToManyStableNairaTransactions)
	t.Run("AgentToStableNairaTransactionAssignments", testAgentToManyStableNairaTransactionAssignments)
	t.Run("AgentToTransactionAssignments", testAgentToManyTransactionAssignments)
	t.Run("CurrencyToSymbolNetworkCurrencies", testCurrencyToManySymbolNetworkCurrencies)
	t.Run("DepositWalletToWalletAddressCryptoDeposits", testDepositWalletToManyWalletAddressCryptoDeposits)
	t.Run("DepositWalletToWalletAddressWalletBalanaces", testDepositWalletToManyWalletAddressWalletBalanaces)
	t.Run("PackageToSubscriptions", testPackageToManySubscriptions)
	t.Run("StableNairaTransactionToTransactionStableNairaTransactionAssignments", testStableNairaTransactionToManyTransactionStableNairaTransactionAssignments)
	t.Run("SubscriptionToReferralPayouts", testSubscriptionToManyReferralPayouts)
	t.Run("TransactionToTransactionAssignments", testTransactionToManyTransactionAssignments)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("AccountTransactionToAccountUsingAccountTransactions", testAccountTransactionToOneSetOpAccountUsingAccount)
	t.Run("BeneficiaryToAccountUsingBeneficiaries", testBeneficiaryToOneSetOpAccountUsingAccount)
	t.Run("CryptoAssetToAccountUsingCryptoAssets", testCryptoAssetToOneSetOpAccountUsingAccount)
	t.Run("CryptoDepositToAccountUsingCryptoDeposits", testCryptoDepositToOneSetOpAccountUsingAccount)
	t.Run("CryptoDepositToDepositWalletUsingWalletAddressCryptoDeposits", testCryptoDepositToOneSetOpDepositWalletUsingWalletAddressDepositWallet)
	t.Run("DailyEarningToAccountUsingDailyEarnings", testDailyEarningToOneSetOpAccountUsingAccount)
	t.Run("DepositToAccountUsingDeposits", testDepositToOneSetOpAccountUsingAccount)
	t.Run("DepositWalletToAccountUsingDepositWallets", testDepositWalletToOneSetOpAccountUsingAccount)
	t.Run("InvestmentToAccountUsingInvestments", testInvestmentToOneSetOpAccountUsingAccount)
	t.Run("LoginInfoToAccountUsingLoginInfos", testLoginInfoToOneSetOpAccountUsingAccount)
	t.Run("NetworkCurrencyToCurrencyUsingSymbolNetworkCurrencies", testNetworkCurrencyToOneSetOpCurrencyUsingSymbolCurrency)
	t.Run("NotificationToAccountUsingNotifications", testNotificationToOneSetOpAccountUsingAccount)
	t.Run("PaymentLinkToAccountUsingPaymentLinks", testPaymentLinkToOneSetOpAccountUsingAccount)
	t.Run("ReferralPayoutToAccountUsingReferralPayouts", testReferralPayoutToOneSetOpAccountUsingAccount)
	t.Run("ReferralPayoutToAccountUsingFromAccountReferralPayouts", testReferralPayoutToOneSetOpAccountUsingFromAccount)
	t.Run("ReferralPayoutToSubscriptionUsingReferralPayouts", testReferralPayoutToOneSetOpSubscriptionUsingSubscription)
	t.Run("SecurityCodeToAccountUsingSecurityCodes", testSecurityCodeToOneSetOpAccountUsingAccount)
	t.Run("StableNairaTransactionToAccountUsingStableNairaTransactions", testStableNairaTransactionToOneSetOpAccountUsingAccount)
	t.Run("StableNairaTransactionToAgentUsingStableNairaTransactions", testStableNairaTransactionToOneSetOpAgentUsingAgent)
	t.Run("StableNairaTransactionAssignmentToAgentUsingStableNairaTransactionAssignments", testStableNairaTransactionAssignmentToOneSetOpAgentUsingAgent)
	t.Run("StableNairaTransactionAssignmentToStableNairaTransactionUsingTransactionStableNairaTransactionAssignments", testStableNairaTransactionAssignmentToOneSetOpStableNairaTransactionUsingTransaction)
	t.Run("SubscriptionToAccountUsingSubscriptions", testSubscriptionToOneSetOpAccountUsingAccount)
	t.Run("SubscriptionToPackageUsingSubscriptions", testSubscriptionToOneSetOpPackageUsingPackage)
	t.Run("TradeToAccountUsingTrades", testTradeToOneSetOpAccountUsingAccount)
	t.Run("TradeScheduleToAccountUsingTradeSchedules", testTradeScheduleToOneSetOpAccountUsingAccount)
	t.Run("TransactionAssignmentToAgentUsingTransactionAssignments", testTransactionAssignmentToOneSetOpAgentUsingAgent)
	t.Run("TransactionAssignmentToTransactionUsingTransactionAssignments", testTransactionAssignmentToOneSetOpTransactionUsingTransaction)
	t.Run("TransferToAccountUsingReceiverTransfers", testTransferToOneSetOpAccountUsingReceiver)
	t.Run("TransferToAccountUsingSenderTransfers", testTransferToOneSetOpAccountUsingSender)
	t.Run("UserSettingToAccountUsingUserSettings", testUserSettingToOneSetOpAccountUsingAccount)
	t.Run("WalletToAccountUsingWallets", testWalletToOneSetOpAccountUsingAccount)
	t.Run("WalletBalanaceToDepositWalletUsingWalletAddressWalletBalanaces", testWalletBalanaceToOneSetOpDepositWalletUsingWalletAddressDepositWallet)
	t.Run("WithdrawalToAccountUsingWithdrawals", testWithdrawalToOneSetOpAccountUsingAccount)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("BeneficiaryToAccountUsingBeneficiaries", testBeneficiaryToOneRemoveOpAccountUsingAccount)
	t.Run("PaymentLinkToAccountUsingPaymentLinks", testPaymentLinkToOneRemoveOpAccountUsingAccount)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("AccountToAccountTransactions", testAccountToManyAddOpAccountTransactions)
	t.Run("AccountToBeneficiaries", testAccountToManyAddOpBeneficiaries)
	t.Run("AccountToCryptoAssets", testAccountToManyAddOpCryptoAssets)
	t.Run("AccountToCryptoDeposits", testAccountToManyAddOpCryptoDeposits)
	t.Run("AccountToDailyEarnings", testAccountToManyAddOpDailyEarnings)
	t.Run("AccountToDeposits", testAccountToManyAddOpDeposits)
	t.Run("AccountToDepositWallets", testAccountToManyAddOpDepositWallets)
	t.Run("AccountToInvestments", testAccountToManyAddOpInvestments)
	t.Run("AccountToLoginInfos", testAccountToManyAddOpLoginInfos)
	t.Run("AccountToNotifications", testAccountToManyAddOpNotifications)
	t.Run("AccountToPaymentLinks", testAccountToManyAddOpPaymentLinks)
	t.Run("AccountToReferralPayouts", testAccountToManyAddOpReferralPayouts)
	t.Run("AccountToFromAccountReferralPayouts", testAccountToManyAddOpFromAccountReferralPayouts)
	t.Run("AccountToSecurityCodes", testAccountToManyAddOpSecurityCodes)
	t.Run("AccountToStableNairaTransactions", testAccountToManyAddOpStableNairaTransactions)
	t.Run("AccountToSubscriptions", testAccountToManyAddOpSubscriptions)
	t.Run("AccountToTrades", testAccountToManyAddOpTrades)
	t.Run("AccountToTradeSchedules", testAccountToManyAddOpTradeSchedules)
	t.Run("AccountToReceiverTransfers", testAccountToManyAddOpReceiverTransfers)
	t.Run("AccountToSenderTransfers", testAccountToManyAddOpSenderTransfers)
	t.Run("AccountToUserSettings", testAccountToManyAddOpUserSettings)
	t.Run("AccountToWallets", testAccountToManyAddOpWallets)
	t.Run("AccountToWithdrawals", testAccountToManyAddOpWithdrawals)
	t.Run("AgentToStableNairaTransactions", testAgentToManyAddOpStableNairaTransactions)
	t.Run("AgentToStableNairaTransactionAssignments", testAgentToManyAddOpStableNairaTransactionAssignments)
	t.Run("AgentToTransactionAssignments", testAgentToManyAddOpTransactionAssignments)
	t.Run("CurrencyToSymbolNetworkCurrencies", testCurrencyToManyAddOpSymbolNetworkCurrencies)
	t.Run("DepositWalletToWalletAddressCryptoDeposits", testDepositWalletToManyAddOpWalletAddressCryptoDeposits)
	t.Run("DepositWalletToWalletAddressWalletBalanaces", testDepositWalletToManyAddOpWalletAddressWalletBalanaces)
	t.Run("PackageToSubscriptions", testPackageToManyAddOpSubscriptions)
	t.Run("StableNairaTransactionToTransactionStableNairaTransactionAssignments", testStableNairaTransactionToManyAddOpTransactionStableNairaTransactionAssignments)
	t.Run("SubscriptionToReferralPayouts", testSubscriptionToManyAddOpReferralPayouts)
	t.Run("TransactionToTransactionAssignments", testTransactionToManyAddOpTransactionAssignments)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("AccountToBeneficiaries", testAccountToManySetOpBeneficiaries)
	t.Run("AccountToPaymentLinks", testAccountToManySetOpPaymentLinks)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("AccountToBeneficiaries", testAccountToManyRemoveOpBeneficiaries)
	t.Run("AccountToPaymentLinks", testAccountToManyRemoveOpPaymentLinks)
}

func TestReload(t *testing.T) {
	t.Run("Accounts", testAccountsReload)
	t.Run("AccountTransactions", testAccountTransactionsReload)
	t.Run("Agents", testAgentsReload)
	t.Run("Beneficiaries", testBeneficiariesReload)
	t.Run("CgoldHolders", testCgoldHoldersReload)
	t.Run("CryptoAssets", testCryptoAssetsReload)
	t.Run("CryptoDeposits", testCryptoDepositsReload)
	t.Run("Currencies", testCurrenciesReload)
	t.Run("DailyEarnings", testDailyEarningsReload)
	t.Run("Deposits", testDepositsReload)
	t.Run("DepositWallets", testDepositWalletsReload)
	t.Run("DFCHolders", testDFCHoldersReload)
	t.Run("DFCWalletTransactions", testDFCWalletTransactionsReload)
	t.Run("Investments", testInvestmentsReload)
	t.Run("KycForms", testKycFormsReload)
	t.Run("LoginInfos", testLoginInfosReload)
	t.Run("NetworkCurrencies", testNetworkCurrenciesReload)
	t.Run("Notifications", testNotificationsReload)
	t.Run("Packages", testPackagesReload)
	t.Run("PaymentLinks", testPaymentLinksReload)
	t.Run("ReferralPayouts", testReferralPayoutsReload)
	t.Run("SecurityCodes", testSecurityCodesReload)
	t.Run("StableNairaTransactions", testStableNairaTransactionsReload)
	t.Run("StableNairaTransactionAssignments", testStableNairaTransactionAssignmentsReload)
	t.Run("Subscriptions", testSubscriptionsReload)
	t.Run("Trades", testTradesReload)
	t.Run("TradeHistories", testTradeHistoriesReload)
	t.Run("TradeSchedules", testTradeSchedulesReload)
	t.Run("Transactions", testTransactionsReload)
	t.Run("TransactionAssignments", testTransactionAssignmentsReload)
	t.Run("Transfers", testTransfersReload)
	t.Run("UserSettings", testUserSettingsReload)
	t.Run("Wallets", testWalletsReload)
	t.Run("WalletBalanaces", testWalletBalanacesReload)
	t.Run("WeeklyPayouts", testWeeklyPayoutsReload)
	t.Run("Withdrawals", testWithdrawalsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Accounts", testAccountsReloadAll)
	t.Run("AccountTransactions", testAccountTransactionsReloadAll)
	t.Run("Agents", testAgentsReloadAll)
	t.Run("Beneficiaries", testBeneficiariesReloadAll)
	t.Run("CgoldHolders", testCgoldHoldersReloadAll)
	t.Run("CryptoAssets", testCryptoAssetsReloadAll)
	t.Run("CryptoDeposits", testCryptoDepositsReloadAll)
	t.Run("Currencies", testCurrenciesReloadAll)
	t.Run("DailyEarnings", testDailyEarningsReloadAll)
	t.Run("Deposits", testDepositsReloadAll)
	t.Run("DepositWallets", testDepositWalletsReloadAll)
	t.Run("DFCHolders", testDFCHoldersReloadAll)
	t.Run("DFCWalletTransactions", testDFCWalletTransactionsReloadAll)
	t.Run("Investments", testInvestmentsReloadAll)
	t.Run("KycForms", testKycFormsReloadAll)
	t.Run("LoginInfos", testLoginInfosReloadAll)
	t.Run("NetworkCurrencies", testNetworkCurrenciesReloadAll)
	t.Run("Notifications", testNotificationsReloadAll)
	t.Run("Packages", testPackagesReloadAll)
	t.Run("PaymentLinks", testPaymentLinksReloadAll)
	t.Run("ReferralPayouts", testReferralPayoutsReloadAll)
	t.Run("SecurityCodes", testSecurityCodesReloadAll)
	t.Run("StableNairaTransactions", testStableNairaTransactionsReloadAll)
	t.Run("StableNairaTransactionAssignments", testStableNairaTransactionAssignmentsReloadAll)
	t.Run("Subscriptions", testSubscriptionsReloadAll)
	t.Run("Trades", testTradesReloadAll)
	t.Run("TradeHistories", testTradeHistoriesReloadAll)
	t.Run("TradeSchedules", testTradeSchedulesReloadAll)
	t.Run("Transactions", testTransactionsReloadAll)
	t.Run("TransactionAssignments", testTransactionAssignmentsReloadAll)
	t.Run("Transfers", testTransfersReloadAll)
	t.Run("UserSettings", testUserSettingsReloadAll)
	t.Run("Wallets", testWalletsReloadAll)
	t.Run("WalletBalanaces", testWalletBalanacesReloadAll)
	t.Run("WeeklyPayouts", testWeeklyPayoutsReloadAll)
	t.Run("Withdrawals", testWithdrawalsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Accounts", testAccountsSelect)
	t.Run("AccountTransactions", testAccountTransactionsSelect)
	t.Run("Agents", testAgentsSelect)
	t.Run("Beneficiaries", testBeneficiariesSelect)
	t.Run("CgoldHolders", testCgoldHoldersSelect)
	t.Run("CryptoAssets", testCryptoAssetsSelect)
	t.Run("CryptoDeposits", testCryptoDepositsSelect)
	t.Run("Currencies", testCurrenciesSelect)
	t.Run("DailyEarnings", testDailyEarningsSelect)
	t.Run("Deposits", testDepositsSelect)
	t.Run("DepositWallets", testDepositWalletsSelect)
	t.Run("DFCHolders", testDFCHoldersSelect)
	t.Run("DFCWalletTransactions", testDFCWalletTransactionsSelect)
	t.Run("Investments", testInvestmentsSelect)
	t.Run("KycForms", testKycFormsSelect)
	t.Run("LoginInfos", testLoginInfosSelect)
	t.Run("NetworkCurrencies", testNetworkCurrenciesSelect)
	t.Run("Notifications", testNotificationsSelect)
	t.Run("Packages", testPackagesSelect)
	t.Run("PaymentLinks", testPaymentLinksSelect)
	t.Run("ReferralPayouts", testReferralPayoutsSelect)
	t.Run("SecurityCodes", testSecurityCodesSelect)
	t.Run("StableNairaTransactions", testStableNairaTransactionsSelect)
	t.Run("StableNairaTransactionAssignments", testStableNairaTransactionAssignmentsSelect)
	t.Run("Subscriptions", testSubscriptionsSelect)
	t.Run("Trades", testTradesSelect)
	t.Run("TradeHistories", testTradeHistoriesSelect)
	t.Run("TradeSchedules", testTradeSchedulesSelect)
	t.Run("Transactions", testTransactionsSelect)
	t.Run("TransactionAssignments", testTransactionAssignmentsSelect)
	t.Run("Transfers", testTransfersSelect)
	t.Run("UserSettings", testUserSettingsSelect)
	t.Run("Wallets", testWalletsSelect)
	t.Run("WalletBalanaces", testWalletBalanacesSelect)
	t.Run("WeeklyPayouts", testWeeklyPayoutsSelect)
	t.Run("Withdrawals", testWithdrawalsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Accounts", testAccountsUpdate)
	t.Run("AccountTransactions", testAccountTransactionsUpdate)
	t.Run("Agents", testAgentsUpdate)
	t.Run("Beneficiaries", testBeneficiariesUpdate)
	t.Run("CgoldHolders", testCgoldHoldersUpdate)
	t.Run("CryptoAssets", testCryptoAssetsUpdate)
	t.Run("CryptoDeposits", testCryptoDepositsUpdate)
	t.Run("Currencies", testCurrenciesUpdate)
	t.Run("DailyEarnings", testDailyEarningsUpdate)
	t.Run("Deposits", testDepositsUpdate)
	t.Run("DepositWallets", testDepositWalletsUpdate)
	t.Run("DFCHolders", testDFCHoldersUpdate)
	t.Run("DFCWalletTransactions", testDFCWalletTransactionsUpdate)
	t.Run("Investments", testInvestmentsUpdate)
	t.Run("KycForms", testKycFormsUpdate)
	t.Run("LoginInfos", testLoginInfosUpdate)
	t.Run("NetworkCurrencies", testNetworkCurrenciesUpdate)
	t.Run("Notifications", testNotificationsUpdate)
	t.Run("Packages", testPackagesUpdate)
	t.Run("PaymentLinks", testPaymentLinksUpdate)
	t.Run("ReferralPayouts", testReferralPayoutsUpdate)
	t.Run("SecurityCodes", testSecurityCodesUpdate)
	t.Run("StableNairaTransactions", testStableNairaTransactionsUpdate)
	t.Run("StableNairaTransactionAssignments", testStableNairaTransactionAssignmentsUpdate)
	t.Run("Subscriptions", testSubscriptionsUpdate)
	t.Run("Trades", testTradesUpdate)
	t.Run("TradeHistories", testTradeHistoriesUpdate)
	t.Run("TradeSchedules", testTradeSchedulesUpdate)
	t.Run("Transactions", testTransactionsUpdate)
	t.Run("TransactionAssignments", testTransactionAssignmentsUpdate)
	t.Run("Transfers", testTransfersUpdate)
	t.Run("UserSettings", testUserSettingsUpdate)
	t.Run("Wallets", testWalletsUpdate)
	t.Run("WalletBalanaces", testWalletBalanacesUpdate)
	t.Run("WeeklyPayouts", testWeeklyPayoutsUpdate)
	t.Run("Withdrawals", testWithdrawalsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Accounts", testAccountsSliceUpdateAll)
	t.Run("AccountTransactions", testAccountTransactionsSliceUpdateAll)
	t.Run("Agents", testAgentsSliceUpdateAll)
	t.Run("Beneficiaries", testBeneficiariesSliceUpdateAll)
	t.Run("CgoldHolders", testCgoldHoldersSliceUpdateAll)
	t.Run("CryptoAssets", testCryptoAssetsSliceUpdateAll)
	t.Run("CryptoDeposits", testCryptoDepositsSliceUpdateAll)
	t.Run("Currencies", testCurrenciesSliceUpdateAll)
	t.Run("DailyEarnings", testDailyEarningsSliceUpdateAll)
	t.Run("Deposits", testDepositsSliceUpdateAll)
	t.Run("DepositWallets", testDepositWalletsSliceUpdateAll)
	t.Run("DFCHolders", testDFCHoldersSliceUpdateAll)
	t.Run("DFCWalletTransactions", testDFCWalletTransactionsSliceUpdateAll)
	t.Run("Investments", testInvestmentsSliceUpdateAll)
	t.Run("KycForms", testKycFormsSliceUpdateAll)
	t.Run("LoginInfos", testLoginInfosSliceUpdateAll)
	t.Run("NetworkCurrencies", testNetworkCurrenciesSliceUpdateAll)
	t.Run("Notifications", testNotificationsSliceUpdateAll)
	t.Run("Packages", testPackagesSliceUpdateAll)
	t.Run("PaymentLinks", testPaymentLinksSliceUpdateAll)
	t.Run("ReferralPayouts", testReferralPayoutsSliceUpdateAll)
	t.Run("SecurityCodes", testSecurityCodesSliceUpdateAll)
	t.Run("StableNairaTransactions", testStableNairaTransactionsSliceUpdateAll)
	t.Run("StableNairaTransactionAssignments", testStableNairaTransactionAssignmentsSliceUpdateAll)
	t.Run("Subscriptions", testSubscriptionsSliceUpdateAll)
	t.Run("Trades", testTradesSliceUpdateAll)
	t.Run("TradeHistories", testTradeHistoriesSliceUpdateAll)
	t.Run("TradeSchedules", testTradeSchedulesSliceUpdateAll)
	t.Run("Transactions", testTransactionsSliceUpdateAll)
	t.Run("TransactionAssignments", testTransactionAssignmentsSliceUpdateAll)
	t.Run("Transfers", testTransfersSliceUpdateAll)
	t.Run("UserSettings", testUserSettingsSliceUpdateAll)
	t.Run("Wallets", testWalletsSliceUpdateAll)
	t.Run("WalletBalanaces", testWalletBalanacesSliceUpdateAll)
	t.Run("WeeklyPayouts", testWeeklyPayoutsSliceUpdateAll)
	t.Run("Withdrawals", testWithdrawalsSliceUpdateAll)
}
