// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// StableNairaTransaction is an object representing the database table.
type StableNairaTransaction struct {
	ID               string `boil:"id" json:"id" toml:"id" yaml:"id"`
	AccountID        string `boil:"account_id" json:"account_id" toml:"account_id" yaml:"account_id"`
	Amount           int64  `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	AmountReceivable int64  `boil:"amount_receivable" json:"amount_receivable" toml:"amount_receivable" yaml:"amount_receivable"`
	AgentID          int    `boil:"agent_id" json:"agent_id" toml:"agent_id" yaml:"agent_id"`
	Date             int64  `boil:"date" json:"date" toml:"date" yaml:"date"`
	PaymentDate      int64  `boil:"payment_date" json:"payment_date" toml:"payment_date" yaml:"payment_date"`
	CompletionDate   int64  `boil:"completion_date" json:"completion_date" toml:"completion_date" yaml:"completion_date"`

	R *stableNairaTransactionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L stableNairaTransactionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StableNairaTransactionColumns = struct {
	ID               string
	AccountID        string
	Amount           string
	AmountReceivable string
	AgentID          string
	Date             string
	PaymentDate      string
	CompletionDate   string
}{
	ID:               "id",
	AccountID:        "account_id",
	Amount:           "amount",
	AmountReceivable: "amount_receivable",
	AgentID:          "agent_id",
	Date:             "date",
	PaymentDate:      "payment_date",
	CompletionDate:   "completion_date",
}

var StableNairaTransactionTableColumns = struct {
	ID               string
	AccountID        string
	Amount           string
	AmountReceivable string
	AgentID          string
	Date             string
	PaymentDate      string
	CompletionDate   string
}{
	ID:               "stable_naira_transaction.id",
	AccountID:        "stable_naira_transaction.account_id",
	Amount:           "stable_naira_transaction.amount",
	AmountReceivable: "stable_naira_transaction.amount_receivable",
	AgentID:          "stable_naira_transaction.agent_id",
	Date:             "stable_naira_transaction.date",
	PaymentDate:      "stable_naira_transaction.payment_date",
	CompletionDate:   "stable_naira_transaction.completion_date",
}

// Generated where

var StableNairaTransactionWhere = struct {
	ID               whereHelperstring
	AccountID        whereHelperstring
	Amount           whereHelperint64
	AmountReceivable whereHelperint64
	AgentID          whereHelperint
	Date             whereHelperint64
	PaymentDate      whereHelperint64
	CompletionDate   whereHelperint64
}{
	ID:               whereHelperstring{field: "\"stable_naira_transaction\".\"id\""},
	AccountID:        whereHelperstring{field: "\"stable_naira_transaction\".\"account_id\""},
	Amount:           whereHelperint64{field: "\"stable_naira_transaction\".\"amount\""},
	AmountReceivable: whereHelperint64{field: "\"stable_naira_transaction\".\"amount_receivable\""},
	AgentID:          whereHelperint{field: "\"stable_naira_transaction\".\"agent_id\""},
	Date:             whereHelperint64{field: "\"stable_naira_transaction\".\"date\""},
	PaymentDate:      whereHelperint64{field: "\"stable_naira_transaction\".\"payment_date\""},
	CompletionDate:   whereHelperint64{field: "\"stable_naira_transaction\".\"completion_date\""},
}

// StableNairaTransactionRels is where relationship names are stored.
var StableNairaTransactionRels = struct {
	Account                                      string
	Agent                                        string
	TransactionStableNairaTransactionAssignments string
}{
	Account: "Account",
	Agent:   "Agent",
	TransactionStableNairaTransactionAssignments: "TransactionStableNairaTransactionAssignments",
}

// stableNairaTransactionR is where relationships are stored.
type stableNairaTransactionR struct {
	Account                                      *Account                              `boil:"Account" json:"Account" toml:"Account" yaml:"Account"`
	Agent                                        *Agent                                `boil:"Agent" json:"Agent" toml:"Agent" yaml:"Agent"`
	TransactionStableNairaTransactionAssignments StableNairaTransactionAssignmentSlice `boil:"TransactionStableNairaTransactionAssignments" json:"TransactionStableNairaTransactionAssignments" toml:"TransactionStableNairaTransactionAssignments" yaml:"TransactionStableNairaTransactionAssignments"`
}

// NewStruct creates a new relationship struct
func (*stableNairaTransactionR) NewStruct() *stableNairaTransactionR {
	return &stableNairaTransactionR{}
}

// stableNairaTransactionL is where Load methods for each relationship are stored.
type stableNairaTransactionL struct{}

var (
	stableNairaTransactionAllColumns            = []string{"id", "account_id", "amount", "amount_receivable", "agent_id", "date", "payment_date", "completion_date"}
	stableNairaTransactionColumnsWithoutDefault = []string{"account_id", "amount", "amount_receivable", "agent_id", "date", "payment_date", "completion_date"}
	stableNairaTransactionColumnsWithDefault    = []string{"id"}
	stableNairaTransactionPrimaryKeyColumns     = []string{"id"}
)

type (
	// StableNairaTransactionSlice is an alias for a slice of pointers to StableNairaTransaction.
	// This should almost always be used instead of []StableNairaTransaction.
	StableNairaTransactionSlice []*StableNairaTransaction

	stableNairaTransactionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	stableNairaTransactionType                 = reflect.TypeOf(&StableNairaTransaction{})
	stableNairaTransactionMapping              = queries.MakeStructMapping(stableNairaTransactionType)
	stableNairaTransactionPrimaryKeyMapping, _ = queries.BindMapping(stableNairaTransactionType, stableNairaTransactionMapping, stableNairaTransactionPrimaryKeyColumns)
	stableNairaTransactionInsertCacheMut       sync.RWMutex
	stableNairaTransactionInsertCache          = make(map[string]insertCache)
	stableNairaTransactionUpdateCacheMut       sync.RWMutex
	stableNairaTransactionUpdateCache          = make(map[string]updateCache)
	stableNairaTransactionUpsertCacheMut       sync.RWMutex
	stableNairaTransactionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single stableNairaTransaction record from the query.
func (q stableNairaTransactionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*StableNairaTransaction, error) {
	o := &StableNairaTransaction{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for stable_naira_transaction")
	}

	return o, nil
}

// All returns all StableNairaTransaction records from the query.
func (q stableNairaTransactionQuery) All(ctx context.Context, exec boil.ContextExecutor) (StableNairaTransactionSlice, error) {
	var o []*StableNairaTransaction

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to StableNairaTransaction slice")
	}

	return o, nil
}

// Count returns the count of all StableNairaTransaction records in the query.
func (q stableNairaTransactionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count stable_naira_transaction rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q stableNairaTransactionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if stable_naira_transaction exists")
	}

	return count > 0, nil
}

// Account pointed to by the foreign key.
func (o *StableNairaTransaction) Account(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AccountID),
	}

	queryMods = append(queryMods, mods...)

	query := Accounts(queryMods...)
	queries.SetFrom(query.Query, "\"account\"")

	return query
}

// Agent pointed to by the foreign key.
func (o *StableNairaTransaction) Agent(mods ...qm.QueryMod) agentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AgentID),
	}

	queryMods = append(queryMods, mods...)

	query := Agents(queryMods...)
	queries.SetFrom(query.Query, "\"agent\"")

	return query
}

// TransactionStableNairaTransactionAssignments retrieves all the stable_naira_transaction_assignment's StableNairaTransactionAssignments with an executor via transaction_id column.
func (o *StableNairaTransaction) TransactionStableNairaTransactionAssignments(mods ...qm.QueryMod) stableNairaTransactionAssignmentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"stable_naira_transaction_assignment\".\"transaction_id\"=?", o.ID),
	)

	query := StableNairaTransactionAssignments(queryMods...)
	queries.SetFrom(query.Query, "\"stable_naira_transaction_assignment\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"stable_naira_transaction_assignment\".*"})
	}

	return query
}

// LoadAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (stableNairaTransactionL) LoadAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStableNairaTransaction interface{}, mods queries.Applicator) error {
	var slice []*StableNairaTransaction
	var object *StableNairaTransaction

	if singular {
		object = maybeStableNairaTransaction.(*StableNairaTransaction)
	} else {
		slice = *maybeStableNairaTransaction.(*[]*StableNairaTransaction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &stableNairaTransactionR{}
		}
		args = append(args, object.AccountID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stableNairaTransactionR{}
			}

			for _, a := range args {
				if a == obj.AccountID {
					continue Outer
				}
			}

			args = append(args, obj.AccountID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`account`),
		qm.WhereIn(`account.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for account")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Account = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.StableNairaTransactions = append(foreign.R.StableNairaTransactions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AccountID == foreign.ID {
				local.R.Account = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.StableNairaTransactions = append(foreign.R.StableNairaTransactions, local)
				break
			}
		}
	}

	return nil
}

// LoadAgent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (stableNairaTransactionL) LoadAgent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStableNairaTransaction interface{}, mods queries.Applicator) error {
	var slice []*StableNairaTransaction
	var object *StableNairaTransaction

	if singular {
		object = maybeStableNairaTransaction.(*StableNairaTransaction)
	} else {
		slice = *maybeStableNairaTransaction.(*[]*StableNairaTransaction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &stableNairaTransactionR{}
		}
		args = append(args, object.AgentID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stableNairaTransactionR{}
			}

			for _, a := range args {
				if a == obj.AgentID {
					continue Outer
				}
			}

			args = append(args, obj.AgentID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`agent`),
		qm.WhereIn(`agent.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Agent")
	}

	var resultSlice []*Agent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Agent")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for agent")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for agent")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Agent = foreign
		if foreign.R == nil {
			foreign.R = &agentR{}
		}
		foreign.R.StableNairaTransactions = append(foreign.R.StableNairaTransactions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AgentID == foreign.ID {
				local.R.Agent = foreign
				if foreign.R == nil {
					foreign.R = &agentR{}
				}
				foreign.R.StableNairaTransactions = append(foreign.R.StableNairaTransactions, local)
				break
			}
		}
	}

	return nil
}

// LoadTransactionStableNairaTransactionAssignments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (stableNairaTransactionL) LoadTransactionStableNairaTransactionAssignments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStableNairaTransaction interface{}, mods queries.Applicator) error {
	var slice []*StableNairaTransaction
	var object *StableNairaTransaction

	if singular {
		object = maybeStableNairaTransaction.(*StableNairaTransaction)
	} else {
		slice = *maybeStableNairaTransaction.(*[]*StableNairaTransaction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &stableNairaTransactionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stableNairaTransactionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`stable_naira_transaction_assignment`),
		qm.WhereIn(`stable_naira_transaction_assignment.transaction_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load stable_naira_transaction_assignment")
	}

	var resultSlice []*StableNairaTransactionAssignment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice stable_naira_transaction_assignment")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on stable_naira_transaction_assignment")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for stable_naira_transaction_assignment")
	}

	if singular {
		object.R.TransactionStableNairaTransactionAssignments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &stableNairaTransactionAssignmentR{}
			}
			foreign.R.Transaction = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TransactionID {
				local.R.TransactionStableNairaTransactionAssignments = append(local.R.TransactionStableNairaTransactionAssignments, foreign)
				if foreign.R == nil {
					foreign.R = &stableNairaTransactionAssignmentR{}
				}
				foreign.R.Transaction = local
				break
			}
		}
	}

	return nil
}

// SetAccount of the stableNairaTransaction to the related item.
// Sets o.R.Account to related.
// Adds o to related.R.StableNairaTransactions.
func (o *StableNairaTransaction) SetAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"stable_naira_transaction\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"account_id"}),
		strmangle.WhereClause("\"", "\"", 2, stableNairaTransactionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AccountID = related.ID
	if o.R == nil {
		o.R = &stableNairaTransactionR{
			Account: related,
		}
	} else {
		o.R.Account = related
	}

	if related.R == nil {
		related.R = &accountR{
			StableNairaTransactions: StableNairaTransactionSlice{o},
		}
	} else {
		related.R.StableNairaTransactions = append(related.R.StableNairaTransactions, o)
	}

	return nil
}

// SetAgent of the stableNairaTransaction to the related item.
// Sets o.R.Agent to related.
// Adds o to related.R.StableNairaTransactions.
func (o *StableNairaTransaction) SetAgent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Agent) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"stable_naira_transaction\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"agent_id"}),
		strmangle.WhereClause("\"", "\"", 2, stableNairaTransactionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AgentID = related.ID
	if o.R == nil {
		o.R = &stableNairaTransactionR{
			Agent: related,
		}
	} else {
		o.R.Agent = related
	}

	if related.R == nil {
		related.R = &agentR{
			StableNairaTransactions: StableNairaTransactionSlice{o},
		}
	} else {
		related.R.StableNairaTransactions = append(related.R.StableNairaTransactions, o)
	}

	return nil
}

// AddTransactionStableNairaTransactionAssignments adds the given related objects to the existing relationships
// of the stable_naira_transaction, optionally inserting them as new records.
// Appends related to o.R.TransactionStableNairaTransactionAssignments.
// Sets related.R.Transaction appropriately.
func (o *StableNairaTransaction) AddTransactionStableNairaTransactionAssignments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*StableNairaTransactionAssignment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TransactionID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"stable_naira_transaction_assignment\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"transaction_id"}),
				strmangle.WhereClause("\"", "\"", 2, stableNairaTransactionAssignmentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TransactionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &stableNairaTransactionR{
			TransactionStableNairaTransactionAssignments: related,
		}
	} else {
		o.R.TransactionStableNairaTransactionAssignments = append(o.R.TransactionStableNairaTransactionAssignments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &stableNairaTransactionAssignmentR{
				Transaction: o,
			}
		} else {
			rel.R.Transaction = o
		}
	}
	return nil
}

// StableNairaTransactions retrieves all the records using an executor.
func StableNairaTransactions(mods ...qm.QueryMod) stableNairaTransactionQuery {
	mods = append(mods, qm.From("\"stable_naira_transaction\""))
	return stableNairaTransactionQuery{NewQuery(mods...)}
}

// FindStableNairaTransaction retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStableNairaTransaction(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*StableNairaTransaction, error) {
	stableNairaTransactionObj := &StableNairaTransaction{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"stable_naira_transaction\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, stableNairaTransactionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from stable_naira_transaction")
	}

	return stableNairaTransactionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *StableNairaTransaction) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no stable_naira_transaction provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(stableNairaTransactionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	stableNairaTransactionInsertCacheMut.RLock()
	cache, cached := stableNairaTransactionInsertCache[key]
	stableNairaTransactionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			stableNairaTransactionAllColumns,
			stableNairaTransactionColumnsWithDefault,
			stableNairaTransactionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(stableNairaTransactionType, stableNairaTransactionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(stableNairaTransactionType, stableNairaTransactionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"stable_naira_transaction\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"stable_naira_transaction\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into stable_naira_transaction")
	}

	if !cached {
		stableNairaTransactionInsertCacheMut.Lock()
		stableNairaTransactionInsertCache[key] = cache
		stableNairaTransactionInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the StableNairaTransaction.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *StableNairaTransaction) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	stableNairaTransactionUpdateCacheMut.RLock()
	cache, cached := stableNairaTransactionUpdateCache[key]
	stableNairaTransactionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			stableNairaTransactionAllColumns,
			stableNairaTransactionPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update stable_naira_transaction, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"stable_naira_transaction\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, stableNairaTransactionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(stableNairaTransactionType, stableNairaTransactionMapping, append(wl, stableNairaTransactionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update stable_naira_transaction row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for stable_naira_transaction")
	}

	if !cached {
		stableNairaTransactionUpdateCacheMut.Lock()
		stableNairaTransactionUpdateCache[key] = cache
		stableNairaTransactionUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q stableNairaTransactionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for stable_naira_transaction")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for stable_naira_transaction")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StableNairaTransactionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stableNairaTransactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"stable_naira_transaction\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, stableNairaTransactionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in stableNairaTransaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all stableNairaTransaction")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *StableNairaTransaction) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no stable_naira_transaction provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(stableNairaTransactionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	stableNairaTransactionUpsertCacheMut.RLock()
	cache, cached := stableNairaTransactionUpsertCache[key]
	stableNairaTransactionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			stableNairaTransactionAllColumns,
			stableNairaTransactionColumnsWithDefault,
			stableNairaTransactionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			stableNairaTransactionAllColumns,
			stableNairaTransactionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert stable_naira_transaction, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(stableNairaTransactionPrimaryKeyColumns))
			copy(conflict, stableNairaTransactionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"stable_naira_transaction\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(stableNairaTransactionType, stableNairaTransactionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(stableNairaTransactionType, stableNairaTransactionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert stable_naira_transaction")
	}

	if !cached {
		stableNairaTransactionUpsertCacheMut.Lock()
		stableNairaTransactionUpsertCache[key] = cache
		stableNairaTransactionUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single StableNairaTransaction record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *StableNairaTransaction) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no StableNairaTransaction provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), stableNairaTransactionPrimaryKeyMapping)
	sql := "DELETE FROM \"stable_naira_transaction\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from stable_naira_transaction")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for stable_naira_transaction")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q stableNairaTransactionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no stableNairaTransactionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from stable_naira_transaction")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for stable_naira_transaction")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StableNairaTransactionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stableNairaTransactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"stable_naira_transaction\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, stableNairaTransactionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from stableNairaTransaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for stable_naira_transaction")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *StableNairaTransaction) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStableNairaTransaction(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StableNairaTransactionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StableNairaTransactionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stableNairaTransactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"stable_naira_transaction\".* FROM \"stable_naira_transaction\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, stableNairaTransactionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in StableNairaTransactionSlice")
	}

	*o = slice

	return nil
}

// StableNairaTransactionExists checks if the StableNairaTransaction row exists.
func StableNairaTransactionExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"stable_naira_transaction\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if stable_naira_transaction exists")
	}

	return exists, nil
}
