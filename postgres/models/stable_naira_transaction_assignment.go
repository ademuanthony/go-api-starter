// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// StableNairaTransactionAssignment is an object representing the database table.
type StableNairaTransactionAssignment struct {
	ID            int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	AgentID       int    `boil:"agent_id" json:"agent_id" toml:"agent_id" yaml:"agent_id"`
	TransactionID string `boil:"transaction_id" json:"transaction_id" toml:"transaction_id" yaml:"transaction_id"`
	Amount        int64  `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	Date          int64  `boil:"date" json:"date" toml:"date" yaml:"date"`
	Status        int    `boil:"status" json:"status" toml:"status" yaml:"status"`

	R *stableNairaTransactionAssignmentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L stableNairaTransactionAssignmentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StableNairaTransactionAssignmentColumns = struct {
	ID            string
	AgentID       string
	TransactionID string
	Amount        string
	Date          string
	Status        string
}{
	ID:            "id",
	AgentID:       "agent_id",
	TransactionID: "transaction_id",
	Amount:        "amount",
	Date:          "date",
	Status:        "status",
}

var StableNairaTransactionAssignmentTableColumns = struct {
	ID            string
	AgentID       string
	TransactionID string
	Amount        string
	Date          string
	Status        string
}{
	ID:            "stable_naira_transaction_assignment.id",
	AgentID:       "stable_naira_transaction_assignment.agent_id",
	TransactionID: "stable_naira_transaction_assignment.transaction_id",
	Amount:        "stable_naira_transaction_assignment.amount",
	Date:          "stable_naira_transaction_assignment.date",
	Status:        "stable_naira_transaction_assignment.status",
}

// Generated where

var StableNairaTransactionAssignmentWhere = struct {
	ID            whereHelperint
	AgentID       whereHelperint
	TransactionID whereHelperstring
	Amount        whereHelperint64
	Date          whereHelperint64
	Status        whereHelperint
}{
	ID:            whereHelperint{field: "\"stable_naira_transaction_assignment\".\"id\""},
	AgentID:       whereHelperint{field: "\"stable_naira_transaction_assignment\".\"agent_id\""},
	TransactionID: whereHelperstring{field: "\"stable_naira_transaction_assignment\".\"transaction_id\""},
	Amount:        whereHelperint64{field: "\"stable_naira_transaction_assignment\".\"amount\""},
	Date:          whereHelperint64{field: "\"stable_naira_transaction_assignment\".\"date\""},
	Status:        whereHelperint{field: "\"stable_naira_transaction_assignment\".\"status\""},
}

// StableNairaTransactionAssignmentRels is where relationship names are stored.
var StableNairaTransactionAssignmentRels = struct {
	Agent       string
	Transaction string
}{
	Agent:       "Agent",
	Transaction: "Transaction",
}

// stableNairaTransactionAssignmentR is where relationships are stored.
type stableNairaTransactionAssignmentR struct {
	Agent       *Agent                  `boil:"Agent" json:"Agent" toml:"Agent" yaml:"Agent"`
	Transaction *StableNairaTransaction `boil:"Transaction" json:"Transaction" toml:"Transaction" yaml:"Transaction"`
}

// NewStruct creates a new relationship struct
func (*stableNairaTransactionAssignmentR) NewStruct() *stableNairaTransactionAssignmentR {
	return &stableNairaTransactionAssignmentR{}
}

// stableNairaTransactionAssignmentL is where Load methods for each relationship are stored.
type stableNairaTransactionAssignmentL struct{}

var (
	stableNairaTransactionAssignmentAllColumns            = []string{"id", "agent_id", "transaction_id", "amount", "date", "status"}
	stableNairaTransactionAssignmentColumnsWithoutDefault = []string{"agent_id", "transaction_id", "amount", "date", "status"}
	stableNairaTransactionAssignmentColumnsWithDefault    = []string{"id"}
	stableNairaTransactionAssignmentPrimaryKeyColumns     = []string{"id"}
)

type (
	// StableNairaTransactionAssignmentSlice is an alias for a slice of pointers to StableNairaTransactionAssignment.
	// This should almost always be used instead of []StableNairaTransactionAssignment.
	StableNairaTransactionAssignmentSlice []*StableNairaTransactionAssignment

	stableNairaTransactionAssignmentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	stableNairaTransactionAssignmentType                 = reflect.TypeOf(&StableNairaTransactionAssignment{})
	stableNairaTransactionAssignmentMapping              = queries.MakeStructMapping(stableNairaTransactionAssignmentType)
	stableNairaTransactionAssignmentPrimaryKeyMapping, _ = queries.BindMapping(stableNairaTransactionAssignmentType, stableNairaTransactionAssignmentMapping, stableNairaTransactionAssignmentPrimaryKeyColumns)
	stableNairaTransactionAssignmentInsertCacheMut       sync.RWMutex
	stableNairaTransactionAssignmentInsertCache          = make(map[string]insertCache)
	stableNairaTransactionAssignmentUpdateCacheMut       sync.RWMutex
	stableNairaTransactionAssignmentUpdateCache          = make(map[string]updateCache)
	stableNairaTransactionAssignmentUpsertCacheMut       sync.RWMutex
	stableNairaTransactionAssignmentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single stableNairaTransactionAssignment record from the query.
func (q stableNairaTransactionAssignmentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*StableNairaTransactionAssignment, error) {
	o := &StableNairaTransactionAssignment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for stable_naira_transaction_assignment")
	}

	return o, nil
}

// All returns all StableNairaTransactionAssignment records from the query.
func (q stableNairaTransactionAssignmentQuery) All(ctx context.Context, exec boil.ContextExecutor) (StableNairaTransactionAssignmentSlice, error) {
	var o []*StableNairaTransactionAssignment

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to StableNairaTransactionAssignment slice")
	}

	return o, nil
}

// Count returns the count of all StableNairaTransactionAssignment records in the query.
func (q stableNairaTransactionAssignmentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count stable_naira_transaction_assignment rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q stableNairaTransactionAssignmentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if stable_naira_transaction_assignment exists")
	}

	return count > 0, nil
}

// Agent pointed to by the foreign key.
func (o *StableNairaTransactionAssignment) Agent(mods ...qm.QueryMod) agentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AgentID),
	}

	queryMods = append(queryMods, mods...)

	query := Agents(queryMods...)
	queries.SetFrom(query.Query, "\"agent\"")

	return query
}

// Transaction pointed to by the foreign key.
func (o *StableNairaTransactionAssignment) Transaction(mods ...qm.QueryMod) stableNairaTransactionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TransactionID),
	}

	queryMods = append(queryMods, mods...)

	query := StableNairaTransactions(queryMods...)
	queries.SetFrom(query.Query, "\"stable_naira_transaction\"")

	return query
}

// LoadAgent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (stableNairaTransactionAssignmentL) LoadAgent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStableNairaTransactionAssignment interface{}, mods queries.Applicator) error {
	var slice []*StableNairaTransactionAssignment
	var object *StableNairaTransactionAssignment

	if singular {
		object = maybeStableNairaTransactionAssignment.(*StableNairaTransactionAssignment)
	} else {
		slice = *maybeStableNairaTransactionAssignment.(*[]*StableNairaTransactionAssignment)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &stableNairaTransactionAssignmentR{}
		}
		args = append(args, object.AgentID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stableNairaTransactionAssignmentR{}
			}

			for _, a := range args {
				if a == obj.AgentID {
					continue Outer
				}
			}

			args = append(args, obj.AgentID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`agent`),
		qm.WhereIn(`agent.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Agent")
	}

	var resultSlice []*Agent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Agent")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for agent")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for agent")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Agent = foreign
		if foreign.R == nil {
			foreign.R = &agentR{}
		}
		foreign.R.StableNairaTransactionAssignments = append(foreign.R.StableNairaTransactionAssignments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AgentID == foreign.ID {
				local.R.Agent = foreign
				if foreign.R == nil {
					foreign.R = &agentR{}
				}
				foreign.R.StableNairaTransactionAssignments = append(foreign.R.StableNairaTransactionAssignments, local)
				break
			}
		}
	}

	return nil
}

// LoadTransaction allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (stableNairaTransactionAssignmentL) LoadTransaction(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStableNairaTransactionAssignment interface{}, mods queries.Applicator) error {
	var slice []*StableNairaTransactionAssignment
	var object *StableNairaTransactionAssignment

	if singular {
		object = maybeStableNairaTransactionAssignment.(*StableNairaTransactionAssignment)
	} else {
		slice = *maybeStableNairaTransactionAssignment.(*[]*StableNairaTransactionAssignment)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &stableNairaTransactionAssignmentR{}
		}
		args = append(args, object.TransactionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stableNairaTransactionAssignmentR{}
			}

			for _, a := range args {
				if a == obj.TransactionID {
					continue Outer
				}
			}

			args = append(args, obj.TransactionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`stable_naira_transaction`),
		qm.WhereIn(`stable_naira_transaction.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load StableNairaTransaction")
	}

	var resultSlice []*StableNairaTransaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice StableNairaTransaction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for stable_naira_transaction")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for stable_naira_transaction")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Transaction = foreign
		if foreign.R == nil {
			foreign.R = &stableNairaTransactionR{}
		}
		foreign.R.TransactionStableNairaTransactionAssignments = append(foreign.R.TransactionStableNairaTransactionAssignments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TransactionID == foreign.ID {
				local.R.Transaction = foreign
				if foreign.R == nil {
					foreign.R = &stableNairaTransactionR{}
				}
				foreign.R.TransactionStableNairaTransactionAssignments = append(foreign.R.TransactionStableNairaTransactionAssignments, local)
				break
			}
		}
	}

	return nil
}

// SetAgent of the stableNairaTransactionAssignment to the related item.
// Sets o.R.Agent to related.
// Adds o to related.R.StableNairaTransactionAssignments.
func (o *StableNairaTransactionAssignment) SetAgent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Agent) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"stable_naira_transaction_assignment\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"agent_id"}),
		strmangle.WhereClause("\"", "\"", 2, stableNairaTransactionAssignmentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AgentID = related.ID
	if o.R == nil {
		o.R = &stableNairaTransactionAssignmentR{
			Agent: related,
		}
	} else {
		o.R.Agent = related
	}

	if related.R == nil {
		related.R = &agentR{
			StableNairaTransactionAssignments: StableNairaTransactionAssignmentSlice{o},
		}
	} else {
		related.R.StableNairaTransactionAssignments = append(related.R.StableNairaTransactionAssignments, o)
	}

	return nil
}

// SetTransaction of the stableNairaTransactionAssignment to the related item.
// Sets o.R.Transaction to related.
// Adds o to related.R.TransactionStableNairaTransactionAssignments.
func (o *StableNairaTransactionAssignment) SetTransaction(ctx context.Context, exec boil.ContextExecutor, insert bool, related *StableNairaTransaction) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"stable_naira_transaction_assignment\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"transaction_id"}),
		strmangle.WhereClause("\"", "\"", 2, stableNairaTransactionAssignmentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TransactionID = related.ID
	if o.R == nil {
		o.R = &stableNairaTransactionAssignmentR{
			Transaction: related,
		}
	} else {
		o.R.Transaction = related
	}

	if related.R == nil {
		related.R = &stableNairaTransactionR{
			TransactionStableNairaTransactionAssignments: StableNairaTransactionAssignmentSlice{o},
		}
	} else {
		related.R.TransactionStableNairaTransactionAssignments = append(related.R.TransactionStableNairaTransactionAssignments, o)
	}

	return nil
}

// StableNairaTransactionAssignments retrieves all the records using an executor.
func StableNairaTransactionAssignments(mods ...qm.QueryMod) stableNairaTransactionAssignmentQuery {
	mods = append(mods, qm.From("\"stable_naira_transaction_assignment\""))
	return stableNairaTransactionAssignmentQuery{NewQuery(mods...)}
}

// FindStableNairaTransactionAssignment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStableNairaTransactionAssignment(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*StableNairaTransactionAssignment, error) {
	stableNairaTransactionAssignmentObj := &StableNairaTransactionAssignment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"stable_naira_transaction_assignment\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, stableNairaTransactionAssignmentObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from stable_naira_transaction_assignment")
	}

	return stableNairaTransactionAssignmentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *StableNairaTransactionAssignment) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no stable_naira_transaction_assignment provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(stableNairaTransactionAssignmentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	stableNairaTransactionAssignmentInsertCacheMut.RLock()
	cache, cached := stableNairaTransactionAssignmentInsertCache[key]
	stableNairaTransactionAssignmentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			stableNairaTransactionAssignmentAllColumns,
			stableNairaTransactionAssignmentColumnsWithDefault,
			stableNairaTransactionAssignmentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(stableNairaTransactionAssignmentType, stableNairaTransactionAssignmentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(stableNairaTransactionAssignmentType, stableNairaTransactionAssignmentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"stable_naira_transaction_assignment\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"stable_naira_transaction_assignment\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into stable_naira_transaction_assignment")
	}

	if !cached {
		stableNairaTransactionAssignmentInsertCacheMut.Lock()
		stableNairaTransactionAssignmentInsertCache[key] = cache
		stableNairaTransactionAssignmentInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the StableNairaTransactionAssignment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *StableNairaTransactionAssignment) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	stableNairaTransactionAssignmentUpdateCacheMut.RLock()
	cache, cached := stableNairaTransactionAssignmentUpdateCache[key]
	stableNairaTransactionAssignmentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			stableNairaTransactionAssignmentAllColumns,
			stableNairaTransactionAssignmentPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update stable_naira_transaction_assignment, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"stable_naira_transaction_assignment\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, stableNairaTransactionAssignmentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(stableNairaTransactionAssignmentType, stableNairaTransactionAssignmentMapping, append(wl, stableNairaTransactionAssignmentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update stable_naira_transaction_assignment row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for stable_naira_transaction_assignment")
	}

	if !cached {
		stableNairaTransactionAssignmentUpdateCacheMut.Lock()
		stableNairaTransactionAssignmentUpdateCache[key] = cache
		stableNairaTransactionAssignmentUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q stableNairaTransactionAssignmentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for stable_naira_transaction_assignment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for stable_naira_transaction_assignment")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StableNairaTransactionAssignmentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stableNairaTransactionAssignmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"stable_naira_transaction_assignment\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, stableNairaTransactionAssignmentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in stableNairaTransactionAssignment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all stableNairaTransactionAssignment")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *StableNairaTransactionAssignment) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no stable_naira_transaction_assignment provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(stableNairaTransactionAssignmentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	stableNairaTransactionAssignmentUpsertCacheMut.RLock()
	cache, cached := stableNairaTransactionAssignmentUpsertCache[key]
	stableNairaTransactionAssignmentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			stableNairaTransactionAssignmentAllColumns,
			stableNairaTransactionAssignmentColumnsWithDefault,
			stableNairaTransactionAssignmentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			stableNairaTransactionAssignmentAllColumns,
			stableNairaTransactionAssignmentPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert stable_naira_transaction_assignment, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(stableNairaTransactionAssignmentPrimaryKeyColumns))
			copy(conflict, stableNairaTransactionAssignmentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"stable_naira_transaction_assignment\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(stableNairaTransactionAssignmentType, stableNairaTransactionAssignmentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(stableNairaTransactionAssignmentType, stableNairaTransactionAssignmentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert stable_naira_transaction_assignment")
	}

	if !cached {
		stableNairaTransactionAssignmentUpsertCacheMut.Lock()
		stableNairaTransactionAssignmentUpsertCache[key] = cache
		stableNairaTransactionAssignmentUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single StableNairaTransactionAssignment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *StableNairaTransactionAssignment) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no StableNairaTransactionAssignment provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), stableNairaTransactionAssignmentPrimaryKeyMapping)
	sql := "DELETE FROM \"stable_naira_transaction_assignment\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from stable_naira_transaction_assignment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for stable_naira_transaction_assignment")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q stableNairaTransactionAssignmentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no stableNairaTransactionAssignmentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from stable_naira_transaction_assignment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for stable_naira_transaction_assignment")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StableNairaTransactionAssignmentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stableNairaTransactionAssignmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"stable_naira_transaction_assignment\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, stableNairaTransactionAssignmentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from stableNairaTransactionAssignment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for stable_naira_transaction_assignment")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *StableNairaTransactionAssignment) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStableNairaTransactionAssignment(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StableNairaTransactionAssignmentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StableNairaTransactionAssignmentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stableNairaTransactionAssignmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"stable_naira_transaction_assignment\".* FROM \"stable_naira_transaction_assignment\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, stableNairaTransactionAssignmentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in StableNairaTransactionAssignmentSlice")
	}

	*o = slice

	return nil
}

// StableNairaTransactionAssignmentExists checks if the StableNairaTransactionAssignment row exists.
func StableNairaTransactionAssignmentExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"stable_naira_transaction_assignment\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if stable_naira_transaction_assignment exists")
	}

	return exists, nil
}
