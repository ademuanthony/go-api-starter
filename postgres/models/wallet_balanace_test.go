// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testWalletBalanaces(t *testing.T) {
	t.Parallel()

	query := WalletBalanaces()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testWalletBalanacesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WalletBalanace{}
	if err = randomize.Struct(seed, o, walletBalanaceDBTypes, true, walletBalanaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WalletBalanace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := WalletBalanaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWalletBalanacesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WalletBalanace{}
	if err = randomize.Struct(seed, o, walletBalanaceDBTypes, true, walletBalanaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WalletBalanace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := WalletBalanaces().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := WalletBalanaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWalletBalanacesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WalletBalanace{}
	if err = randomize.Struct(seed, o, walletBalanaceDBTypes, true, walletBalanaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WalletBalanace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := WalletBalanaceSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := WalletBalanaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWalletBalanacesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WalletBalanace{}
	if err = randomize.Struct(seed, o, walletBalanaceDBTypes, true, walletBalanaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WalletBalanace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := WalletBalanaceExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if WalletBalanace exists: %s", err)
	}
	if !e {
		t.Errorf("Expected WalletBalanaceExists to return true, but got false.")
	}
}

func testWalletBalanacesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WalletBalanace{}
	if err = randomize.Struct(seed, o, walletBalanaceDBTypes, true, walletBalanaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WalletBalanace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	walletBalanaceFound, err := FindWalletBalanace(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if walletBalanaceFound == nil {
		t.Error("want a record, got nil")
	}
}

func testWalletBalanacesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WalletBalanace{}
	if err = randomize.Struct(seed, o, walletBalanaceDBTypes, true, walletBalanaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WalletBalanace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = WalletBalanaces().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testWalletBalanacesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WalletBalanace{}
	if err = randomize.Struct(seed, o, walletBalanaceDBTypes, true, walletBalanaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WalletBalanace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := WalletBalanaces().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testWalletBalanacesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	walletBalanaceOne := &WalletBalanace{}
	walletBalanaceTwo := &WalletBalanace{}
	if err = randomize.Struct(seed, walletBalanaceOne, walletBalanaceDBTypes, false, walletBalanaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WalletBalanace struct: %s", err)
	}
	if err = randomize.Struct(seed, walletBalanaceTwo, walletBalanaceDBTypes, false, walletBalanaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WalletBalanace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = walletBalanaceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = walletBalanaceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := WalletBalanaces().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testWalletBalanacesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	walletBalanaceOne := &WalletBalanace{}
	walletBalanaceTwo := &WalletBalanace{}
	if err = randomize.Struct(seed, walletBalanaceOne, walletBalanaceDBTypes, false, walletBalanaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WalletBalanace struct: %s", err)
	}
	if err = randomize.Struct(seed, walletBalanaceTwo, walletBalanaceDBTypes, false, walletBalanaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WalletBalanace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = walletBalanaceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = walletBalanaceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := WalletBalanaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testWalletBalanacesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WalletBalanace{}
	if err = randomize.Struct(seed, o, walletBalanaceDBTypes, true, walletBalanaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WalletBalanace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := WalletBalanaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWalletBalanacesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WalletBalanace{}
	if err = randomize.Struct(seed, o, walletBalanaceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize WalletBalanace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(walletBalanaceColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := WalletBalanaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWalletBalanaceToOneDepositWalletUsingWalletAddressDepositWallet(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local WalletBalanace
	var foreign DepositWallet

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, walletBalanaceDBTypes, false, walletBalanaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WalletBalanace struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, depositWalletDBTypes, false, depositWalletColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DepositWallet struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.WalletAddress = foreign.Address
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.WalletAddressDepositWallet().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.Address != foreign.Address {
		t.Errorf("want: %v, got %v", foreign.Address, check.Address)
	}

	slice := WalletBalanaceSlice{&local}
	if err = local.L.LoadWalletAddressDepositWallet(ctx, tx, false, (*[]*WalletBalanace)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.WalletAddressDepositWallet == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.WalletAddressDepositWallet = nil
	if err = local.L.LoadWalletAddressDepositWallet(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.WalletAddressDepositWallet == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testWalletBalanaceToOneSetOpDepositWalletUsingWalletAddressDepositWallet(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a WalletBalanace
	var b, c DepositWallet

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, walletBalanaceDBTypes, false, strmangle.SetComplement(walletBalanacePrimaryKeyColumns, walletBalanaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, depositWalletDBTypes, false, strmangle.SetComplement(depositWalletPrimaryKeyColumns, depositWalletColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, depositWalletDBTypes, false, strmangle.SetComplement(depositWalletPrimaryKeyColumns, depositWalletColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DepositWallet{&b, &c} {
		err = a.SetWalletAddressDepositWallet(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.WalletAddressDepositWallet != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.WalletAddressWalletBalanaces[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.WalletAddress != x.Address {
			t.Error("foreign key was wrong value", a.WalletAddress)
		}

		zero := reflect.Zero(reflect.TypeOf(a.WalletAddress))
		reflect.Indirect(reflect.ValueOf(&a.WalletAddress)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.WalletAddress != x.Address {
			t.Error("foreign key was wrong value", a.WalletAddress, x.Address)
		}
	}
}

func testWalletBalanacesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WalletBalanace{}
	if err = randomize.Struct(seed, o, walletBalanaceDBTypes, true, walletBalanaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WalletBalanace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testWalletBalanacesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WalletBalanace{}
	if err = randomize.Struct(seed, o, walletBalanaceDBTypes, true, walletBalanaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WalletBalanace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := WalletBalanaceSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testWalletBalanacesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WalletBalanace{}
	if err = randomize.Struct(seed, o, walletBalanaceDBTypes, true, walletBalanaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WalletBalanace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := WalletBalanaces().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	walletBalanaceDBTypes = map[string]string{`ID`: `uuid`, `WalletAddress`: `character varying`, `Balance`: `character varying`, `Currency`: `character varying`, `Network`: `character varying`}
	_                     = bytes.MinRead
)

func testWalletBalanacesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(walletBalanacePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(walletBalanaceAllColumns) == len(walletBalanacePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &WalletBalanace{}
	if err = randomize.Struct(seed, o, walletBalanaceDBTypes, true, walletBalanaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WalletBalanace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := WalletBalanaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, walletBalanaceDBTypes, true, walletBalanacePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize WalletBalanace struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testWalletBalanacesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(walletBalanaceAllColumns) == len(walletBalanacePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &WalletBalanace{}
	if err = randomize.Struct(seed, o, walletBalanaceDBTypes, true, walletBalanaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WalletBalanace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := WalletBalanaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, walletBalanaceDBTypes, true, walletBalanacePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize WalletBalanace struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(walletBalanaceAllColumns, walletBalanacePrimaryKeyColumns) {
		fields = walletBalanaceAllColumns
	} else {
		fields = strmangle.SetComplement(
			walletBalanaceAllColumns,
			walletBalanacePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := WalletBalanaceSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testWalletBalanacesUpsert(t *testing.T) {
	t.Parallel()

	if len(walletBalanaceAllColumns) == len(walletBalanacePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := WalletBalanace{}
	if err = randomize.Struct(seed, &o, walletBalanaceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize WalletBalanace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert WalletBalanace: %s", err)
	}

	count, err := WalletBalanaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, walletBalanaceDBTypes, false, walletBalanacePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize WalletBalanace struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert WalletBalanace: %s", err)
	}

	count, err = WalletBalanaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
