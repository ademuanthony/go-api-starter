// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTransactionAssignments(t *testing.T) {
	t.Parallel()

	query := TransactionAssignments()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTransactionAssignmentsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionAssignment{}
	if err = randomize.Struct(seed, o, transactionAssignmentDBTypes, true, transactionAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TransactionAssignments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTransactionAssignmentsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionAssignment{}
	if err = randomize.Struct(seed, o, transactionAssignmentDBTypes, true, transactionAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TransactionAssignments().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TransactionAssignments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTransactionAssignmentsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionAssignment{}
	if err = randomize.Struct(seed, o, transactionAssignmentDBTypes, true, transactionAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TransactionAssignmentSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TransactionAssignments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTransactionAssignmentsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionAssignment{}
	if err = randomize.Struct(seed, o, transactionAssignmentDBTypes, true, transactionAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TransactionAssignmentExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if TransactionAssignment exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TransactionAssignmentExists to return true, but got false.")
	}
}

func testTransactionAssignmentsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionAssignment{}
	if err = randomize.Struct(seed, o, transactionAssignmentDBTypes, true, transactionAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	transactionAssignmentFound, err := FindTransactionAssignment(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if transactionAssignmentFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTransactionAssignmentsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionAssignment{}
	if err = randomize.Struct(seed, o, transactionAssignmentDBTypes, true, transactionAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TransactionAssignments().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTransactionAssignmentsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionAssignment{}
	if err = randomize.Struct(seed, o, transactionAssignmentDBTypes, true, transactionAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TransactionAssignments().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTransactionAssignmentsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	transactionAssignmentOne := &TransactionAssignment{}
	transactionAssignmentTwo := &TransactionAssignment{}
	if err = randomize.Struct(seed, transactionAssignmentOne, transactionAssignmentDBTypes, false, transactionAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionAssignment struct: %s", err)
	}
	if err = randomize.Struct(seed, transactionAssignmentTwo, transactionAssignmentDBTypes, false, transactionAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = transactionAssignmentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = transactionAssignmentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TransactionAssignments().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTransactionAssignmentsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	transactionAssignmentOne := &TransactionAssignment{}
	transactionAssignmentTwo := &TransactionAssignment{}
	if err = randomize.Struct(seed, transactionAssignmentOne, transactionAssignmentDBTypes, false, transactionAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionAssignment struct: %s", err)
	}
	if err = randomize.Struct(seed, transactionAssignmentTwo, transactionAssignmentDBTypes, false, transactionAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = transactionAssignmentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = transactionAssignmentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TransactionAssignments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testTransactionAssignmentsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionAssignment{}
	if err = randomize.Struct(seed, o, transactionAssignmentDBTypes, true, transactionAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TransactionAssignments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTransactionAssignmentsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionAssignment{}
	if err = randomize.Struct(seed, o, transactionAssignmentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TransactionAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(transactionAssignmentColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TransactionAssignments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTransactionAssignmentToOneAgentUsingAgent(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local TransactionAssignment
	var foreign Agent

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, transactionAssignmentDBTypes, false, transactionAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionAssignment struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, agentDBTypes, false, agentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Agent struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.AgentID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Agent().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TransactionAssignmentSlice{&local}
	if err = local.L.LoadAgent(ctx, tx, false, (*[]*TransactionAssignment)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Agent == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Agent = nil
	if err = local.L.LoadAgent(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Agent == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTransactionAssignmentToOneTransactionUsingTransaction(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local TransactionAssignment
	var foreign Transaction

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, transactionAssignmentDBTypes, false, transactionAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionAssignment struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, transactionDBTypes, false, transactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Transaction struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TransactionID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Transaction().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TransactionAssignmentSlice{&local}
	if err = local.L.LoadTransaction(ctx, tx, false, (*[]*TransactionAssignment)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Transaction == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Transaction = nil
	if err = local.L.LoadTransaction(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Transaction == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTransactionAssignmentToOneSetOpAgentUsingAgent(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TransactionAssignment
	var b, c Agent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, transactionAssignmentDBTypes, false, strmangle.SetComplement(transactionAssignmentPrimaryKeyColumns, transactionAssignmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, agentDBTypes, false, strmangle.SetComplement(agentPrimaryKeyColumns, agentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, agentDBTypes, false, strmangle.SetComplement(agentPrimaryKeyColumns, agentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Agent{&b, &c} {
		err = a.SetAgent(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Agent != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TransactionAssignments[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AgentID != x.ID {
			t.Error("foreign key was wrong value", a.AgentID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AgentID))
		reflect.Indirect(reflect.ValueOf(&a.AgentID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.AgentID != x.ID {
			t.Error("foreign key was wrong value", a.AgentID, x.ID)
		}
	}
}
func testTransactionAssignmentToOneSetOpTransactionUsingTransaction(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TransactionAssignment
	var b, c Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, transactionAssignmentDBTypes, false, strmangle.SetComplement(transactionAssignmentPrimaryKeyColumns, transactionAssignmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, transactionDBTypes, false, strmangle.SetComplement(transactionPrimaryKeyColumns, transactionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, transactionDBTypes, false, strmangle.SetComplement(transactionPrimaryKeyColumns, transactionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Transaction{&b, &c} {
		err = a.SetTransaction(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Transaction != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TransactionAssignments[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TransactionID != x.ID {
			t.Error("foreign key was wrong value", a.TransactionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TransactionID))
		reflect.Indirect(reflect.ValueOf(&a.TransactionID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TransactionID != x.ID {
			t.Error("foreign key was wrong value", a.TransactionID, x.ID)
		}
	}
}

func testTransactionAssignmentsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionAssignment{}
	if err = randomize.Struct(seed, o, transactionAssignmentDBTypes, true, transactionAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTransactionAssignmentsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionAssignment{}
	if err = randomize.Struct(seed, o, transactionAssignmentDBTypes, true, transactionAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TransactionAssignmentSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTransactionAssignmentsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionAssignment{}
	if err = randomize.Struct(seed, o, transactionAssignmentDBTypes, true, transactionAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TransactionAssignments().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	transactionAssignmentDBTypes = map[string]string{`ID`: `integer`, `AgentID`: `integer`, `TransactionID`: `uuid`, `Amount`: `bigint`, `Date`: `bigint`, `Status`: `integer`}
	_                            = bytes.MinRead
)

func testTransactionAssignmentsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(transactionAssignmentPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(transactionAssignmentAllColumns) == len(transactionAssignmentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TransactionAssignment{}
	if err = randomize.Struct(seed, o, transactionAssignmentDBTypes, true, transactionAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TransactionAssignments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, transactionAssignmentDBTypes, true, transactionAssignmentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TransactionAssignment struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTransactionAssignmentsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(transactionAssignmentAllColumns) == len(transactionAssignmentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TransactionAssignment{}
	if err = randomize.Struct(seed, o, transactionAssignmentDBTypes, true, transactionAssignmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TransactionAssignments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, transactionAssignmentDBTypes, true, transactionAssignmentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TransactionAssignment struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(transactionAssignmentAllColumns, transactionAssignmentPrimaryKeyColumns) {
		fields = transactionAssignmentAllColumns
	} else {
		fields = strmangle.SetComplement(
			transactionAssignmentAllColumns,
			transactionAssignmentPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TransactionAssignmentSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTransactionAssignmentsUpsert(t *testing.T) {
	t.Parallel()

	if len(transactionAssignmentAllColumns) == len(transactionAssignmentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TransactionAssignment{}
	if err = randomize.Struct(seed, &o, transactionAssignmentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TransactionAssignment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TransactionAssignment: %s", err)
	}

	count, err := TransactionAssignments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, transactionAssignmentDBTypes, false, transactionAssignmentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TransactionAssignment struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TransactionAssignment: %s", err)
	}

	count, err = TransactionAssignments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
