// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// KycForm is an object representing the database table.
type KycForm struct {
	ID                 string `boil:"id" json:"id" toml:"id" yaml:"id"`
	AccountID          string `boil:"account_id" json:"account_id" toml:"account_id" yaml:"account_id"`
	FirstName          string `boil:"first_name" json:"first_name" toml:"first_name" yaml:"first_name"`
	LastName           string `boil:"last_name" json:"last_name" toml:"last_name" yaml:"last_name"`
	MiddleName         string `boil:"middle_name" json:"middle_name" toml:"middle_name" yaml:"middle_name"`
	ApplicationDate    int64  `boil:"application_date" json:"application_date" toml:"application_date" yaml:"application_date"`
	DateOfBirth        int64  `boil:"date_of_birth" json:"date_of_birth" toml:"date_of_birth" yaml:"date_of_birth"`
	IdentityType       string `boil:"identity_type" json:"identity_type" toml:"identity_type" yaml:"identity_type"`
	IdentityIsseuDate  int64  `boil:"identity_isseu_date" json:"identity_isseu_date" toml:"identity_isseu_date" yaml:"identity_isseu_date"`
	IdentityExpiryDate int64  `boil:"identity_expiry_date" json:"identity_expiry_date" toml:"identity_expiry_date" yaml:"identity_expiry_date"`
	IdentityCountry    string `boil:"identity_country" json:"identity_country" toml:"identity_country" yaml:"identity_country"`
	Country            string `boil:"country" json:"country" toml:"country" yaml:"country"`
	State              string `boil:"state" json:"state" toml:"state" yaml:"state"`
	Address            string `boil:"address" json:"address" toml:"address" yaml:"address"`
	IdentityFile       string `boil:"identity_file" json:"identity_file" toml:"identity_file" yaml:"identity_file"`
	PhotoFile          string `boil:"photo_file" json:"photo_file" toml:"photo_file" yaml:"photo_file"`
	VerificationStatus int    `boil:"verification_status" json:"verification_status" toml:"verification_status" yaml:"verification_status"`

	R *kycFormR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L kycFormL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var KycFormColumns = struct {
	ID                 string
	AccountID          string
	FirstName          string
	LastName           string
	MiddleName         string
	ApplicationDate    string
	DateOfBirth        string
	IdentityType       string
	IdentityIsseuDate  string
	IdentityExpiryDate string
	IdentityCountry    string
	Country            string
	State              string
	Address            string
	IdentityFile       string
	PhotoFile          string
	VerificationStatus string
}{
	ID:                 "id",
	AccountID:          "account_id",
	FirstName:          "first_name",
	LastName:           "last_name",
	MiddleName:         "middle_name",
	ApplicationDate:    "application_date",
	DateOfBirth:        "date_of_birth",
	IdentityType:       "identity_type",
	IdentityIsseuDate:  "identity_isseu_date",
	IdentityExpiryDate: "identity_expiry_date",
	IdentityCountry:    "identity_country",
	Country:            "country",
	State:              "state",
	Address:            "address",
	IdentityFile:       "identity_file",
	PhotoFile:          "photo_file",
	VerificationStatus: "verification_status",
}

var KycFormTableColumns = struct {
	ID                 string
	AccountID          string
	FirstName          string
	LastName           string
	MiddleName         string
	ApplicationDate    string
	DateOfBirth        string
	IdentityType       string
	IdentityIsseuDate  string
	IdentityExpiryDate string
	IdentityCountry    string
	Country            string
	State              string
	Address            string
	IdentityFile       string
	PhotoFile          string
	VerificationStatus string
}{
	ID:                 "kyc_form.id",
	AccountID:          "kyc_form.account_id",
	FirstName:          "kyc_form.first_name",
	LastName:           "kyc_form.last_name",
	MiddleName:         "kyc_form.middle_name",
	ApplicationDate:    "kyc_form.application_date",
	DateOfBirth:        "kyc_form.date_of_birth",
	IdentityType:       "kyc_form.identity_type",
	IdentityIsseuDate:  "kyc_form.identity_isseu_date",
	IdentityExpiryDate: "kyc_form.identity_expiry_date",
	IdentityCountry:    "kyc_form.identity_country",
	Country:            "kyc_form.country",
	State:              "kyc_form.state",
	Address:            "kyc_form.address",
	IdentityFile:       "kyc_form.identity_file",
	PhotoFile:          "kyc_form.photo_file",
	VerificationStatus: "kyc_form.verification_status",
}

// Generated where

var KycFormWhere = struct {
	ID                 whereHelperstring
	AccountID          whereHelperstring
	FirstName          whereHelperstring
	LastName           whereHelperstring
	MiddleName         whereHelperstring
	ApplicationDate    whereHelperint64
	DateOfBirth        whereHelperint64
	IdentityType       whereHelperstring
	IdentityIsseuDate  whereHelperint64
	IdentityExpiryDate whereHelperint64
	IdentityCountry    whereHelperstring
	Country            whereHelperstring
	State              whereHelperstring
	Address            whereHelperstring
	IdentityFile       whereHelperstring
	PhotoFile          whereHelperstring
	VerificationStatus whereHelperint
}{
	ID:                 whereHelperstring{field: "\"kyc_form\".\"id\""},
	AccountID:          whereHelperstring{field: "\"kyc_form\".\"account_id\""},
	FirstName:          whereHelperstring{field: "\"kyc_form\".\"first_name\""},
	LastName:           whereHelperstring{field: "\"kyc_form\".\"last_name\""},
	MiddleName:         whereHelperstring{field: "\"kyc_form\".\"middle_name\""},
	ApplicationDate:    whereHelperint64{field: "\"kyc_form\".\"application_date\""},
	DateOfBirth:        whereHelperint64{field: "\"kyc_form\".\"date_of_birth\""},
	IdentityType:       whereHelperstring{field: "\"kyc_form\".\"identity_type\""},
	IdentityIsseuDate:  whereHelperint64{field: "\"kyc_form\".\"identity_isseu_date\""},
	IdentityExpiryDate: whereHelperint64{field: "\"kyc_form\".\"identity_expiry_date\""},
	IdentityCountry:    whereHelperstring{field: "\"kyc_form\".\"identity_country\""},
	Country:            whereHelperstring{field: "\"kyc_form\".\"country\""},
	State:              whereHelperstring{field: "\"kyc_form\".\"state\""},
	Address:            whereHelperstring{field: "\"kyc_form\".\"address\""},
	IdentityFile:       whereHelperstring{field: "\"kyc_form\".\"identity_file\""},
	PhotoFile:          whereHelperstring{field: "\"kyc_form\".\"photo_file\""},
	VerificationStatus: whereHelperint{field: "\"kyc_form\".\"verification_status\""},
}

// KycFormRels is where relationship names are stored.
var KycFormRels = struct {
}{}

// kycFormR is where relationships are stored.
type kycFormR struct {
}

// NewStruct creates a new relationship struct
func (*kycFormR) NewStruct() *kycFormR {
	return &kycFormR{}
}

// kycFormL is where Load methods for each relationship are stored.
type kycFormL struct{}

var (
	kycFormAllColumns            = []string{"id", "account_id", "first_name", "last_name", "middle_name", "application_date", "date_of_birth", "identity_type", "identity_isseu_date", "identity_expiry_date", "identity_country", "country", "state", "address", "identity_file", "photo_file", "verification_status"}
	kycFormColumnsWithoutDefault = []string{"account_id", "first_name", "last_name", "middle_name", "application_date", "date_of_birth", "identity_type", "identity_isseu_date", "identity_expiry_date", "identity_country", "country", "state", "address", "identity_file", "photo_file"}
	kycFormColumnsWithDefault    = []string{"id", "verification_status"}
	kycFormPrimaryKeyColumns     = []string{"id"}
)

type (
	// KycFormSlice is an alias for a slice of pointers to KycForm.
	// This should almost always be used instead of []KycForm.
	KycFormSlice []*KycForm

	kycFormQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	kycFormType                 = reflect.TypeOf(&KycForm{})
	kycFormMapping              = queries.MakeStructMapping(kycFormType)
	kycFormPrimaryKeyMapping, _ = queries.BindMapping(kycFormType, kycFormMapping, kycFormPrimaryKeyColumns)
	kycFormInsertCacheMut       sync.RWMutex
	kycFormInsertCache          = make(map[string]insertCache)
	kycFormUpdateCacheMut       sync.RWMutex
	kycFormUpdateCache          = make(map[string]updateCache)
	kycFormUpsertCacheMut       sync.RWMutex
	kycFormUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single kycForm record from the query.
func (q kycFormQuery) One(ctx context.Context, exec boil.ContextExecutor) (*KycForm, error) {
	o := &KycForm{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for kyc_form")
	}

	return o, nil
}

// All returns all KycForm records from the query.
func (q kycFormQuery) All(ctx context.Context, exec boil.ContextExecutor) (KycFormSlice, error) {
	var o []*KycForm

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to KycForm slice")
	}

	return o, nil
}

// Count returns the count of all KycForm records in the query.
func (q kycFormQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count kyc_form rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q kycFormQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if kyc_form exists")
	}

	return count > 0, nil
}

// KycForms retrieves all the records using an executor.
func KycForms(mods ...qm.QueryMod) kycFormQuery {
	mods = append(mods, qm.From("\"kyc_form\""))
	return kycFormQuery{NewQuery(mods...)}
}

// FindKycForm retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindKycForm(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*KycForm, error) {
	kycFormObj := &KycForm{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"kyc_form\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, kycFormObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from kyc_form")
	}

	return kycFormObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *KycForm) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no kyc_form provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(kycFormColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	kycFormInsertCacheMut.RLock()
	cache, cached := kycFormInsertCache[key]
	kycFormInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			kycFormAllColumns,
			kycFormColumnsWithDefault,
			kycFormColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(kycFormType, kycFormMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(kycFormType, kycFormMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"kyc_form\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"kyc_form\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into kyc_form")
	}

	if !cached {
		kycFormInsertCacheMut.Lock()
		kycFormInsertCache[key] = cache
		kycFormInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the KycForm.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *KycForm) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	kycFormUpdateCacheMut.RLock()
	cache, cached := kycFormUpdateCache[key]
	kycFormUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			kycFormAllColumns,
			kycFormPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update kyc_form, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"kyc_form\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, kycFormPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(kycFormType, kycFormMapping, append(wl, kycFormPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update kyc_form row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for kyc_form")
	}

	if !cached {
		kycFormUpdateCacheMut.Lock()
		kycFormUpdateCache[key] = cache
		kycFormUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q kycFormQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for kyc_form")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for kyc_form")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o KycFormSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), kycFormPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"kyc_form\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, kycFormPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in kycForm slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all kycForm")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *KycForm) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no kyc_form provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(kycFormColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	kycFormUpsertCacheMut.RLock()
	cache, cached := kycFormUpsertCache[key]
	kycFormUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			kycFormAllColumns,
			kycFormColumnsWithDefault,
			kycFormColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			kycFormAllColumns,
			kycFormPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert kyc_form, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(kycFormPrimaryKeyColumns))
			copy(conflict, kycFormPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"kyc_form\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(kycFormType, kycFormMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(kycFormType, kycFormMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert kyc_form")
	}

	if !cached {
		kycFormUpsertCacheMut.Lock()
		kycFormUpsertCache[key] = cache
		kycFormUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single KycForm record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *KycForm) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no KycForm provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), kycFormPrimaryKeyMapping)
	sql := "DELETE FROM \"kyc_form\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from kyc_form")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for kyc_form")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q kycFormQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no kycFormQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from kyc_form")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for kyc_form")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o KycFormSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), kycFormPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"kyc_form\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, kycFormPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from kycForm slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for kyc_form")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *KycForm) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindKycForm(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *KycFormSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := KycFormSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), kycFormPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"kyc_form\".* FROM \"kyc_form\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, kycFormPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in KycFormSlice")
	}

	*o = slice

	return nil
}

// KycFormExists checks if the KycForm row exists.
func KycFormExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"kyc_form\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if kyc_form exists")
	}

	return exists, nil
}
