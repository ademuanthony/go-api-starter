// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// WalletBalanace is an object representing the database table.
type WalletBalanace struct {
	ID            string `boil:"id" json:"id" toml:"id" yaml:"id"`
	WalletAddress string `boil:"wallet_address" json:"wallet_address" toml:"wallet_address" yaml:"wallet_address"`
	Balance       string `boil:"balance" json:"balance" toml:"balance" yaml:"balance"`
	Currency      string `boil:"currency" json:"currency" toml:"currency" yaml:"currency"`
	Network       string `boil:"network" json:"network" toml:"network" yaml:"network"`

	R *walletBalanaceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L walletBalanaceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WalletBalanaceColumns = struct {
	ID            string
	WalletAddress string
	Balance       string
	Currency      string
	Network       string
}{
	ID:            "id",
	WalletAddress: "wallet_address",
	Balance:       "balance",
	Currency:      "currency",
	Network:       "network",
}

var WalletBalanaceTableColumns = struct {
	ID            string
	WalletAddress string
	Balance       string
	Currency      string
	Network       string
}{
	ID:            "wallet_balanace.id",
	WalletAddress: "wallet_balanace.wallet_address",
	Balance:       "wallet_balanace.balance",
	Currency:      "wallet_balanace.currency",
	Network:       "wallet_balanace.network",
}

// Generated where

var WalletBalanaceWhere = struct {
	ID            whereHelperstring
	WalletAddress whereHelperstring
	Balance       whereHelperstring
	Currency      whereHelperstring
	Network       whereHelperstring
}{
	ID:            whereHelperstring{field: "\"wallet_balanace\".\"id\""},
	WalletAddress: whereHelperstring{field: "\"wallet_balanace\".\"wallet_address\""},
	Balance:       whereHelperstring{field: "\"wallet_balanace\".\"balance\""},
	Currency:      whereHelperstring{field: "\"wallet_balanace\".\"currency\""},
	Network:       whereHelperstring{field: "\"wallet_balanace\".\"network\""},
}

// WalletBalanaceRels is where relationship names are stored.
var WalletBalanaceRels = struct {
	WalletAddressDepositWallet string
}{
	WalletAddressDepositWallet: "WalletAddressDepositWallet",
}

// walletBalanaceR is where relationships are stored.
type walletBalanaceR struct {
	WalletAddressDepositWallet *DepositWallet `boil:"WalletAddressDepositWallet" json:"WalletAddressDepositWallet" toml:"WalletAddressDepositWallet" yaml:"WalletAddressDepositWallet"`
}

// NewStruct creates a new relationship struct
func (*walletBalanaceR) NewStruct() *walletBalanaceR {
	return &walletBalanaceR{}
}

// walletBalanaceL is where Load methods for each relationship are stored.
type walletBalanaceL struct{}

var (
	walletBalanaceAllColumns            = []string{"id", "wallet_address", "balance", "currency", "network"}
	walletBalanaceColumnsWithoutDefault = []string{"wallet_address", "balance", "currency", "network"}
	walletBalanaceColumnsWithDefault    = []string{"id"}
	walletBalanacePrimaryKeyColumns     = []string{"id"}
)

type (
	// WalletBalanaceSlice is an alias for a slice of pointers to WalletBalanace.
	// This should almost always be used instead of []WalletBalanace.
	WalletBalanaceSlice []*WalletBalanace

	walletBalanaceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	walletBalanaceType                 = reflect.TypeOf(&WalletBalanace{})
	walletBalanaceMapping              = queries.MakeStructMapping(walletBalanaceType)
	walletBalanacePrimaryKeyMapping, _ = queries.BindMapping(walletBalanaceType, walletBalanaceMapping, walletBalanacePrimaryKeyColumns)
	walletBalanaceInsertCacheMut       sync.RWMutex
	walletBalanaceInsertCache          = make(map[string]insertCache)
	walletBalanaceUpdateCacheMut       sync.RWMutex
	walletBalanaceUpdateCache          = make(map[string]updateCache)
	walletBalanaceUpsertCacheMut       sync.RWMutex
	walletBalanaceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single walletBalanace record from the query.
func (q walletBalanaceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*WalletBalanace, error) {
	o := &WalletBalanace{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for wallet_balanace")
	}

	return o, nil
}

// All returns all WalletBalanace records from the query.
func (q walletBalanaceQuery) All(ctx context.Context, exec boil.ContextExecutor) (WalletBalanaceSlice, error) {
	var o []*WalletBalanace

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to WalletBalanace slice")
	}

	return o, nil
}

// Count returns the count of all WalletBalanace records in the query.
func (q walletBalanaceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count wallet_balanace rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q walletBalanaceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if wallet_balanace exists")
	}

	return count > 0, nil
}

// WalletAddressDepositWallet pointed to by the foreign key.
func (o *WalletBalanace) WalletAddressDepositWallet(mods ...qm.QueryMod) depositWalletQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"address\" = ?", o.WalletAddress),
	}

	queryMods = append(queryMods, mods...)

	query := DepositWallets(queryMods...)
	queries.SetFrom(query.Query, "\"deposit_wallet\"")

	return query
}

// LoadWalletAddressDepositWallet allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (walletBalanaceL) LoadWalletAddressDepositWallet(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWalletBalanace interface{}, mods queries.Applicator) error {
	var slice []*WalletBalanace
	var object *WalletBalanace

	if singular {
		object = maybeWalletBalanace.(*WalletBalanace)
	} else {
		slice = *maybeWalletBalanace.(*[]*WalletBalanace)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &walletBalanaceR{}
		}
		args = append(args, object.WalletAddress)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &walletBalanaceR{}
			}

			for _, a := range args {
				if a == obj.WalletAddress {
					continue Outer
				}
			}

			args = append(args, obj.WalletAddress)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`deposit_wallet`),
		qm.WhereIn(`deposit_wallet.address in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DepositWallet")
	}

	var resultSlice []*DepositWallet
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DepositWallet")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for deposit_wallet")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for deposit_wallet")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.WalletAddressDepositWallet = foreign
		if foreign.R == nil {
			foreign.R = &depositWalletR{}
		}
		foreign.R.WalletAddressWalletBalanaces = append(foreign.R.WalletAddressWalletBalanaces, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.WalletAddress == foreign.Address {
				local.R.WalletAddressDepositWallet = foreign
				if foreign.R == nil {
					foreign.R = &depositWalletR{}
				}
				foreign.R.WalletAddressWalletBalanaces = append(foreign.R.WalletAddressWalletBalanaces, local)
				break
			}
		}
	}

	return nil
}

// SetWalletAddressDepositWallet of the walletBalanace to the related item.
// Sets o.R.WalletAddressDepositWallet to related.
// Adds o to related.R.WalletAddressWalletBalanaces.
func (o *WalletBalanace) SetWalletAddressDepositWallet(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DepositWallet) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"wallet_balanace\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"wallet_address"}),
		strmangle.WhereClause("\"", "\"", 2, walletBalanacePrimaryKeyColumns),
	)
	values := []interface{}{related.Address, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.WalletAddress = related.Address
	if o.R == nil {
		o.R = &walletBalanaceR{
			WalletAddressDepositWallet: related,
		}
	} else {
		o.R.WalletAddressDepositWallet = related
	}

	if related.R == nil {
		related.R = &depositWalletR{
			WalletAddressWalletBalanaces: WalletBalanaceSlice{o},
		}
	} else {
		related.R.WalletAddressWalletBalanaces = append(related.R.WalletAddressWalletBalanaces, o)
	}

	return nil
}

// WalletBalanaces retrieves all the records using an executor.
func WalletBalanaces(mods ...qm.QueryMod) walletBalanaceQuery {
	mods = append(mods, qm.From("\"wallet_balanace\""))
	return walletBalanaceQuery{NewQuery(mods...)}
}

// FindWalletBalanace retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWalletBalanace(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*WalletBalanace, error) {
	walletBalanaceObj := &WalletBalanace{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"wallet_balanace\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, walletBalanaceObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from wallet_balanace")
	}

	return walletBalanaceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *WalletBalanace) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no wallet_balanace provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(walletBalanaceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	walletBalanaceInsertCacheMut.RLock()
	cache, cached := walletBalanaceInsertCache[key]
	walletBalanaceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			walletBalanaceAllColumns,
			walletBalanaceColumnsWithDefault,
			walletBalanaceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(walletBalanaceType, walletBalanaceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(walletBalanaceType, walletBalanaceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"wallet_balanace\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"wallet_balanace\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into wallet_balanace")
	}

	if !cached {
		walletBalanaceInsertCacheMut.Lock()
		walletBalanaceInsertCache[key] = cache
		walletBalanaceInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the WalletBalanace.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *WalletBalanace) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	walletBalanaceUpdateCacheMut.RLock()
	cache, cached := walletBalanaceUpdateCache[key]
	walletBalanaceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			walletBalanaceAllColumns,
			walletBalanacePrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update wallet_balanace, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"wallet_balanace\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, walletBalanacePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(walletBalanaceType, walletBalanaceMapping, append(wl, walletBalanacePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update wallet_balanace row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for wallet_balanace")
	}

	if !cached {
		walletBalanaceUpdateCacheMut.Lock()
		walletBalanaceUpdateCache[key] = cache
		walletBalanaceUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q walletBalanaceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for wallet_balanace")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for wallet_balanace")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WalletBalanaceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), walletBalanacePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"wallet_balanace\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, walletBalanacePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in walletBalanace slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all walletBalanace")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *WalletBalanace) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no wallet_balanace provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(walletBalanaceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	walletBalanaceUpsertCacheMut.RLock()
	cache, cached := walletBalanaceUpsertCache[key]
	walletBalanaceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			walletBalanaceAllColumns,
			walletBalanaceColumnsWithDefault,
			walletBalanaceColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			walletBalanaceAllColumns,
			walletBalanacePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert wallet_balanace, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(walletBalanacePrimaryKeyColumns))
			copy(conflict, walletBalanacePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"wallet_balanace\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(walletBalanaceType, walletBalanaceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(walletBalanaceType, walletBalanaceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert wallet_balanace")
	}

	if !cached {
		walletBalanaceUpsertCacheMut.Lock()
		walletBalanaceUpsertCache[key] = cache
		walletBalanaceUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single WalletBalanace record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *WalletBalanace) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no WalletBalanace provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), walletBalanacePrimaryKeyMapping)
	sql := "DELETE FROM \"wallet_balanace\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from wallet_balanace")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for wallet_balanace")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q walletBalanaceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no walletBalanaceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from wallet_balanace")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for wallet_balanace")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WalletBalanaceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), walletBalanacePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"wallet_balanace\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, walletBalanacePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from walletBalanace slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for wallet_balanace")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *WalletBalanace) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindWalletBalanace(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WalletBalanaceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WalletBalanaceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), walletBalanacePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"wallet_balanace\".* FROM \"wallet_balanace\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, walletBalanacePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in WalletBalanaceSlice")
	}

	*o = slice

	return nil
}

// WalletBalanaceExists checks if the WalletBalanace row exists.
func WalletBalanaceExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"wallet_balanace\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if wallet_balanace exists")
	}

	return exists, nil
}
